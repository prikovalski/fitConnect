generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String
  name                 String
  role                 Role
  birthDate            DateTime              
  gender               Gender                
  createdAt            DateTime              @default(now())
  trainerPlans         WorkoutPlan[]         @relation("TrainerPlans")
  patientPlans         WorkoutPlan[]         @relation("PatientPlans")
  assessments          PhysicalAssessment[]  @relation("AssessmentPatient")
  createdAssessments   PhysicalAssessment[]  @relation("AssessmentCreator")
  nutritionistPlans    MealPlan[]            @relation("NutritionistPlans")
  mealPatientPlans     MealPlan[]            @relation("MealPatientPlans")
  patientDataSharing      DataSharing[]        @relation("PatientDataSharing")
  professionalDataSharing DataSharing[]        @relation("ProfessionalDataSharing")
}


model WorkoutPlan {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  validFrom   DateTime
  validUntil  DateTime
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  trainer     User         @relation("TrainerPlans", fields: [trainerId], references: [id])
  trainerId   Int
  patient     User         @relation("PatientPlans", fields: [patientId], references: [id])
  patientId   Int

  workoutDays WorkoutDay[]
}

model WorkoutDay {
  id            Int               @id @default(autoincrement())
  workoutPlan   WorkoutPlan       @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int
  dayOfWeek     String
  muscleGroup   String
  exercises     WorkoutExercise[]
}

model WorkoutExercise {
  id           Int          @id @default(autoincrement())
  workoutDay   WorkoutDay   @relation(fields: [workoutDayId], references: [id])
  workoutDayId Int
  name         String
  order        Int
  sets         WorkoutSet[]
}

model WorkoutSet {
  id         Int             @id @default(autoincrement())
  exercise   WorkoutExercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  setNumber  Int
  targetReps Int
  targetLoad Float
  logs       WorkoutLog[]
}

model WorkoutLog {
  id           Int        @id @default(autoincrement())
  workoutSet   WorkoutSet @relation(fields: [workoutSetId], references: [id])
  workoutSetId Int
  date         DateTime
  actualReps   Int
  actualLoad   Float
}

model MealPlan {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  observations   String?
  validFrom      DateTime
  validUntil     DateTime
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  nutritionist   User     @relation("NutritionistPlans", fields: [nutritionistId], references: [id])
  nutritionistId Int
  patient        User     @relation("MealPatientPlans", fields: [patientId], references: [id])
  patientId      Int
  meals          Meal[]
}

model Meal {
  id         Int        @id @default(autoincrement())
  mealPlan   MealPlan   @relation(fields: [mealPlanId], references: [id])
  mealPlanId Int
  name       String
  order      Int
  items      MealItem[]
}

model MealItem {
  id       Int     @id @default(autoincrement())
  meal     Meal    @relation(fields: [mealId], references: [id])
  mealId   Int
  foodName String
  quantity String
  notes    String?
}

model PhysicalAssessment {
  id              Int      @id @default(autoincrement())
  method          String
  date            DateTime @default(now())
  nextAssessment  DateTime?  // Novo campo para a próxima avaliação
  data            Json
  patient         User     @relation("AssessmentPatient", fields: [patientId], references: [id])
  patientId       Int
  createdBy       User     @relation("AssessmentCreator", fields: [createdById], references: [id])
  createdById     Int
}

model DataSharing {
  id               Int     @id @default(autoincrement())
  patient          User    @relation("PatientDataSharing", fields: [patientId], references: [id])
  patientId        Int
  professional     User    @relation("ProfessionalDataSharing", fields: [professionalId], references: [id])
  professionalId   Int
  role             Role // TRAINER ou NUTRITIONIST
  shareWorkoutWith Boolean @default(false)
  shareMealWith    Boolean @default(false)

  @@unique([patientId, professionalId, role]) // Evita duplicidade de vínculo
}

enum Role {
  PATIENT
  TRAINER
  NUTRITIONIST
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
