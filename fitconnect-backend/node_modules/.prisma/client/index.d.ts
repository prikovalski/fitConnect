
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model WorkoutPlan
 * 
 */
export type WorkoutPlan = $Result.DefaultSelection<Prisma.$WorkoutPlanPayload>
/**
 * Model PhysicalAssessment
 * 
 */
export type PhysicalAssessment = $Result.DefaultSelection<Prisma.$PhysicalAssessmentPayload>
/**
 * Model MealPlan
 * 
 */
export type MealPlan = $Result.DefaultSelection<Prisma.$MealPlanPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  PATIENT: 'PATIENT',
  TRAINER: 'TRAINER',
  NUTRITIONIST: 'NUTRITIONIST'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more WorkoutPlans
 * const workoutPlans = await prisma.workoutPlan.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more WorkoutPlans
   * const workoutPlans = await prisma.workoutPlan.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.workoutPlan`: Exposes CRUD operations for the **WorkoutPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutPlans
    * const workoutPlans = await prisma.workoutPlan.findMany()
    * ```
    */
  get workoutPlan(): Prisma.WorkoutPlanDelegate<ExtArgs>;

  /**
   * `prisma.physicalAssessment`: Exposes CRUD operations for the **PhysicalAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PhysicalAssessments
    * const physicalAssessments = await prisma.physicalAssessment.findMany()
    * ```
    */
  get physicalAssessment(): Prisma.PhysicalAssessmentDelegate<ExtArgs>;

  /**
   * `prisma.mealPlan`: Exposes CRUD operations for the **MealPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealPlans
    * const mealPlans = await prisma.mealPlan.findMany()
    * ```
    */
  get mealPlan(): Prisma.MealPlanDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    WorkoutPlan: 'WorkoutPlan',
    PhysicalAssessment: 'PhysicalAssessment',
    MealPlan: 'MealPlan',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "workoutPlan" | "physicalAssessment" | "mealPlan" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      WorkoutPlan: {
        payload: Prisma.$WorkoutPlanPayload<ExtArgs>
        fields: Prisma.WorkoutPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          findFirst: {
            args: Prisma.WorkoutPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          findMany: {
            args: Prisma.WorkoutPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>[]
          }
          create: {
            args: Prisma.WorkoutPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          createMany: {
            args: Prisma.WorkoutPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>[]
          }
          delete: {
            args: Prisma.WorkoutPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          update: {
            args: Prisma.WorkoutPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          aggregate: {
            args: Prisma.WorkoutPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutPlan>
          }
          groupBy: {
            args: Prisma.WorkoutPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutPlanCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutPlanCountAggregateOutputType> | number
          }
        }
      }
      PhysicalAssessment: {
        payload: Prisma.$PhysicalAssessmentPayload<ExtArgs>
        fields: Prisma.PhysicalAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhysicalAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhysicalAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          findFirst: {
            args: Prisma.PhysicalAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhysicalAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          findMany: {
            args: Prisma.PhysicalAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>[]
          }
          create: {
            args: Prisma.PhysicalAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          createMany: {
            args: Prisma.PhysicalAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PhysicalAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>[]
          }
          delete: {
            args: Prisma.PhysicalAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          update: {
            args: Prisma.PhysicalAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.PhysicalAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhysicalAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PhysicalAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          aggregate: {
            args: Prisma.PhysicalAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhysicalAssessment>
          }
          groupBy: {
            args: Prisma.PhysicalAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhysicalAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhysicalAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<PhysicalAssessmentCountAggregateOutputType> | number
          }
        }
      }
      MealPlan: {
        payload: Prisma.$MealPlanPayload<ExtArgs>
        fields: Prisma.MealPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          findFirst: {
            args: Prisma.MealPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          findMany: {
            args: Prisma.MealPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>[]
          }
          create: {
            args: Prisma.MealPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          createMany: {
            args: Prisma.MealPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>[]
          }
          delete: {
            args: Prisma.MealPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          update: {
            args: Prisma.MealPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          deleteMany: {
            args: Prisma.MealPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MealPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          aggregate: {
            args: Prisma.MealPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealPlan>
          }
          groupBy: {
            args: Prisma.MealPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealPlanCountArgs<ExtArgs>
            result: $Utils.Optional<MealPlanCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    trainerPlans: number
    patientPlans: number
    assessments: number
    createdAssessments: number
    nutritionistPlans: number
    mealPatientPlans: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainerPlans?: boolean | UserCountOutputTypeCountTrainerPlansArgs
    patientPlans?: boolean | UserCountOutputTypeCountPatientPlansArgs
    assessments?: boolean | UserCountOutputTypeCountAssessmentsArgs
    createdAssessments?: boolean | UserCountOutputTypeCountCreatedAssessmentsArgs
    nutritionistPlans?: boolean | UserCountOutputTypeCountNutritionistPlansArgs
    mealPatientPlans?: boolean | UserCountOutputTypeCountMealPatientPlansArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTrainerPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhysicalAssessmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhysicalAssessmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNutritionistPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMealPatientPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanWhereInput
  }


  /**
   * Models
   */

  /**
   * Model WorkoutPlan
   */

  export type AggregateWorkoutPlan = {
    _count: WorkoutPlanCountAggregateOutputType | null
    _avg: WorkoutPlanAvgAggregateOutputType | null
    _sum: WorkoutPlanSumAggregateOutputType | null
    _min: WorkoutPlanMinAggregateOutputType | null
    _max: WorkoutPlanMaxAggregateOutputType | null
  }

  export type WorkoutPlanAvgAggregateOutputType = {
    id: number | null
    trainerId: number | null
    patientId: number | null
  }

  export type WorkoutPlanSumAggregateOutputType = {
    id: number | null
    trainerId: number | null
    patientId: number | null
  }

  export type WorkoutPlanMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    createdAt: Date | null
    trainerId: number | null
    patientId: number | null
  }

  export type WorkoutPlanMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    createdAt: Date | null
    trainerId: number | null
    patientId: number | null
  }

  export type WorkoutPlanCountAggregateOutputType = {
    id: number
    title: number
    description: number
    createdAt: number
    trainerId: number
    patientId: number
    _all: number
  }


  export type WorkoutPlanAvgAggregateInputType = {
    id?: true
    trainerId?: true
    patientId?: true
  }

  export type WorkoutPlanSumAggregateInputType = {
    id?: true
    trainerId?: true
    patientId?: true
  }

  export type WorkoutPlanMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdAt?: true
    trainerId?: true
    patientId?: true
  }

  export type WorkoutPlanMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdAt?: true
    trainerId?: true
    patientId?: true
  }

  export type WorkoutPlanCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdAt?: true
    trainerId?: true
    patientId?: true
    _all?: true
  }

  export type WorkoutPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutPlan to aggregate.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutPlans
    **/
    _count?: true | WorkoutPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutPlanMaxAggregateInputType
  }

  export type GetWorkoutPlanAggregateType<T extends WorkoutPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutPlan[P]>
      : GetScalarType<T[P], AggregateWorkoutPlan[P]>
  }




  export type WorkoutPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutPlanWhereInput
    orderBy?: WorkoutPlanOrderByWithAggregationInput | WorkoutPlanOrderByWithAggregationInput[]
    by: WorkoutPlanScalarFieldEnum[] | WorkoutPlanScalarFieldEnum
    having?: WorkoutPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutPlanCountAggregateInputType | true
    _avg?: WorkoutPlanAvgAggregateInputType
    _sum?: WorkoutPlanSumAggregateInputType
    _min?: WorkoutPlanMinAggregateInputType
    _max?: WorkoutPlanMaxAggregateInputType
  }

  export type WorkoutPlanGroupByOutputType = {
    id: number
    title: string
    description: string
    createdAt: Date
    trainerId: number
    patientId: number
    _count: WorkoutPlanCountAggregateOutputType | null
    _avg: WorkoutPlanAvgAggregateOutputType | null
    _sum: WorkoutPlanSumAggregateOutputType | null
    _min: WorkoutPlanMinAggregateOutputType | null
    _max: WorkoutPlanMaxAggregateOutputType | null
  }

  type GetWorkoutPlanGroupByPayload<T extends WorkoutPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutPlanGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutPlanGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
    trainerId?: boolean
    patientId?: boolean
    trainer?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutPlan"]>

  export type WorkoutPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
    trainerId?: boolean
    patientId?: boolean
    trainer?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutPlan"]>

  export type WorkoutPlanSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
    trainerId?: boolean
    patientId?: boolean
  }

  export type WorkoutPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainer?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WorkoutPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainer?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkoutPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutPlan"
    objects: {
      trainer: Prisma.$UserPayload<ExtArgs>
      patient: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      createdAt: Date
      trainerId: number
      patientId: number
    }, ExtArgs["result"]["workoutPlan"]>
    composites: {}
  }

  type WorkoutPlanGetPayload<S extends boolean | null | undefined | WorkoutPlanDefaultArgs> = $Result.GetResult<Prisma.$WorkoutPlanPayload, S>

  type WorkoutPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutPlanCountAggregateInputType | true
    }

  export interface WorkoutPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutPlan'], meta: { name: 'WorkoutPlan' } }
    /**
     * Find zero or one WorkoutPlan that matches the filter.
     * @param {WorkoutPlanFindUniqueArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutPlanFindUniqueArgs>(args: SelectSubset<T, WorkoutPlanFindUniqueArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkoutPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutPlanFindUniqueOrThrowArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkoutPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanFindFirstArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutPlanFindFirstArgs>(args?: SelectSubset<T, WorkoutPlanFindFirstArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkoutPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanFindFirstOrThrowArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkoutPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutPlans
     * const workoutPlans = await prisma.workoutPlan.findMany()
     * 
     * // Get first 10 WorkoutPlans
     * const workoutPlans = await prisma.workoutPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutPlanWithIdOnly = await prisma.workoutPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutPlanFindManyArgs>(args?: SelectSubset<T, WorkoutPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkoutPlan.
     * @param {WorkoutPlanCreateArgs} args - Arguments to create a WorkoutPlan.
     * @example
     * // Create one WorkoutPlan
     * const WorkoutPlan = await prisma.workoutPlan.create({
     *   data: {
     *     // ... data to create a WorkoutPlan
     *   }
     * })
     * 
     */
    create<T extends WorkoutPlanCreateArgs>(args: SelectSubset<T, WorkoutPlanCreateArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkoutPlans.
     * @param {WorkoutPlanCreateManyArgs} args - Arguments to create many WorkoutPlans.
     * @example
     * // Create many WorkoutPlans
     * const workoutPlan = await prisma.workoutPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutPlanCreateManyArgs>(args?: SelectSubset<T, WorkoutPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutPlans and returns the data saved in the database.
     * @param {WorkoutPlanCreateManyAndReturnArgs} args - Arguments to create many WorkoutPlans.
     * @example
     * // Create many WorkoutPlans
     * const workoutPlan = await prisma.workoutPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutPlans and only return the `id`
     * const workoutPlanWithIdOnly = await prisma.workoutPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkoutPlan.
     * @param {WorkoutPlanDeleteArgs} args - Arguments to delete one WorkoutPlan.
     * @example
     * // Delete one WorkoutPlan
     * const WorkoutPlan = await prisma.workoutPlan.delete({
     *   where: {
     *     // ... filter to delete one WorkoutPlan
     *   }
     * })
     * 
     */
    delete<T extends WorkoutPlanDeleteArgs>(args: SelectSubset<T, WorkoutPlanDeleteArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkoutPlan.
     * @param {WorkoutPlanUpdateArgs} args - Arguments to update one WorkoutPlan.
     * @example
     * // Update one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutPlanUpdateArgs>(args: SelectSubset<T, WorkoutPlanUpdateArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkoutPlans.
     * @param {WorkoutPlanDeleteManyArgs} args - Arguments to filter WorkoutPlans to delete.
     * @example
     * // Delete a few WorkoutPlans
     * const { count } = await prisma.workoutPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutPlanDeleteManyArgs>(args?: SelectSubset<T, WorkoutPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutPlans
     * const workoutPlan = await prisma.workoutPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutPlanUpdateManyArgs>(args: SelectSubset<T, WorkoutPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutPlan.
     * @param {WorkoutPlanUpsertArgs} args - Arguments to update or create a WorkoutPlan.
     * @example
     * // Update or create a WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.upsert({
     *   create: {
     *     // ... data to create a WorkoutPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutPlan we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutPlanUpsertArgs>(args: SelectSubset<T, WorkoutPlanUpsertArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkoutPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanCountArgs} args - Arguments to filter WorkoutPlans to count.
     * @example
     * // Count the number of WorkoutPlans
     * const count = await prisma.workoutPlan.count({
     *   where: {
     *     // ... the filter for the WorkoutPlans we want to count
     *   }
     * })
    **/
    count<T extends WorkoutPlanCountArgs>(
      args?: Subset<T, WorkoutPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutPlanAggregateArgs>(args: Subset<T, WorkoutPlanAggregateArgs>): Prisma.PrismaPromise<GetWorkoutPlanAggregateType<T>>

    /**
     * Group by WorkoutPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutPlanGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutPlan model
   */
  readonly fields: WorkoutPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trainer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutPlan model
   */ 
  interface WorkoutPlanFieldRefs {
    readonly id: FieldRef<"WorkoutPlan", 'Int'>
    readonly title: FieldRef<"WorkoutPlan", 'String'>
    readonly description: FieldRef<"WorkoutPlan", 'String'>
    readonly createdAt: FieldRef<"WorkoutPlan", 'DateTime'>
    readonly trainerId: FieldRef<"WorkoutPlan", 'Int'>
    readonly patientId: FieldRef<"WorkoutPlan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutPlan findUnique
   */
  export type WorkoutPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan findUniqueOrThrow
   */
  export type WorkoutPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan findFirst
   */
  export type WorkoutPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutPlans.
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutPlans.
     */
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * WorkoutPlan findFirstOrThrow
   */
  export type WorkoutPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutPlans.
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutPlans.
     */
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * WorkoutPlan findMany
   */
  export type WorkoutPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlans to fetch.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutPlans.
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * WorkoutPlan create
   */
  export type WorkoutPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutPlan.
     */
    data: XOR<WorkoutPlanCreateInput, WorkoutPlanUncheckedCreateInput>
  }

  /**
   * WorkoutPlan createMany
   */
  export type WorkoutPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutPlans.
     */
    data: WorkoutPlanCreateManyInput | WorkoutPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutPlan createManyAndReturn
   */
  export type WorkoutPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkoutPlans.
     */
    data: WorkoutPlanCreateManyInput | WorkoutPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutPlan update
   */
  export type WorkoutPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutPlan.
     */
    data: XOR<WorkoutPlanUpdateInput, WorkoutPlanUncheckedUpdateInput>
    /**
     * Choose, which WorkoutPlan to update.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan updateMany
   */
  export type WorkoutPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutPlans.
     */
    data: XOR<WorkoutPlanUpdateManyMutationInput, WorkoutPlanUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutPlans to update
     */
    where?: WorkoutPlanWhereInput
  }

  /**
   * WorkoutPlan upsert
   */
  export type WorkoutPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutPlan to update in case it exists.
     */
    where: WorkoutPlanWhereUniqueInput
    /**
     * In case the WorkoutPlan found by the `where` argument doesn't exist, create a new WorkoutPlan with this data.
     */
    create: XOR<WorkoutPlanCreateInput, WorkoutPlanUncheckedCreateInput>
    /**
     * In case the WorkoutPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutPlanUpdateInput, WorkoutPlanUncheckedUpdateInput>
  }

  /**
   * WorkoutPlan delete
   */
  export type WorkoutPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter which WorkoutPlan to delete.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan deleteMany
   */
  export type WorkoutPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutPlans to delete
     */
    where?: WorkoutPlanWhereInput
  }

  /**
   * WorkoutPlan without action
   */
  export type WorkoutPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
  }


  /**
   * Model PhysicalAssessment
   */

  export type AggregatePhysicalAssessment = {
    _count: PhysicalAssessmentCountAggregateOutputType | null
    _avg: PhysicalAssessmentAvgAggregateOutputType | null
    _sum: PhysicalAssessmentSumAggregateOutputType | null
    _min: PhysicalAssessmentMinAggregateOutputType | null
    _max: PhysicalAssessmentMaxAggregateOutputType | null
  }

  export type PhysicalAssessmentAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    createdById: number | null
  }

  export type PhysicalAssessmentSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    createdById: number | null
  }

  export type PhysicalAssessmentMinAggregateOutputType = {
    id: number | null
    method: string | null
    date: Date | null
    patientId: number | null
    createdById: number | null
  }

  export type PhysicalAssessmentMaxAggregateOutputType = {
    id: number | null
    method: string | null
    date: Date | null
    patientId: number | null
    createdById: number | null
  }

  export type PhysicalAssessmentCountAggregateOutputType = {
    id: number
    method: number
    date: number
    data: number
    patientId: number
    createdById: number
    _all: number
  }


  export type PhysicalAssessmentAvgAggregateInputType = {
    id?: true
    patientId?: true
    createdById?: true
  }

  export type PhysicalAssessmentSumAggregateInputType = {
    id?: true
    patientId?: true
    createdById?: true
  }

  export type PhysicalAssessmentMinAggregateInputType = {
    id?: true
    method?: true
    date?: true
    patientId?: true
    createdById?: true
  }

  export type PhysicalAssessmentMaxAggregateInputType = {
    id?: true
    method?: true
    date?: true
    patientId?: true
    createdById?: true
  }

  export type PhysicalAssessmentCountAggregateInputType = {
    id?: true
    method?: true
    date?: true
    data?: true
    patientId?: true
    createdById?: true
    _all?: true
  }

  export type PhysicalAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhysicalAssessment to aggregate.
     */
    where?: PhysicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhysicalAssessments to fetch.
     */
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhysicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhysicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhysicalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PhysicalAssessments
    **/
    _count?: true | PhysicalAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhysicalAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhysicalAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhysicalAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhysicalAssessmentMaxAggregateInputType
  }

  export type GetPhysicalAssessmentAggregateType<T extends PhysicalAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePhysicalAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhysicalAssessment[P]>
      : GetScalarType<T[P], AggregatePhysicalAssessment[P]>
  }




  export type PhysicalAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhysicalAssessmentWhereInput
    orderBy?: PhysicalAssessmentOrderByWithAggregationInput | PhysicalAssessmentOrderByWithAggregationInput[]
    by: PhysicalAssessmentScalarFieldEnum[] | PhysicalAssessmentScalarFieldEnum
    having?: PhysicalAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhysicalAssessmentCountAggregateInputType | true
    _avg?: PhysicalAssessmentAvgAggregateInputType
    _sum?: PhysicalAssessmentSumAggregateInputType
    _min?: PhysicalAssessmentMinAggregateInputType
    _max?: PhysicalAssessmentMaxAggregateInputType
  }

  export type PhysicalAssessmentGroupByOutputType = {
    id: number
    method: string
    date: Date
    data: JsonValue
    patientId: number
    createdById: number
    _count: PhysicalAssessmentCountAggregateOutputType | null
    _avg: PhysicalAssessmentAvgAggregateOutputType | null
    _sum: PhysicalAssessmentSumAggregateOutputType | null
    _min: PhysicalAssessmentMinAggregateOutputType | null
    _max: PhysicalAssessmentMaxAggregateOutputType | null
  }

  type GetPhysicalAssessmentGroupByPayload<T extends PhysicalAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhysicalAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhysicalAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhysicalAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], PhysicalAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type PhysicalAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    date?: boolean
    data?: boolean
    patientId?: boolean
    createdById?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["physicalAssessment"]>

  export type PhysicalAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    date?: boolean
    data?: boolean
    patientId?: boolean
    createdById?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["physicalAssessment"]>

  export type PhysicalAssessmentSelectScalar = {
    id?: boolean
    method?: boolean
    date?: boolean
    data?: boolean
    patientId?: boolean
    createdById?: boolean
  }

  export type PhysicalAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PhysicalAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PhysicalAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PhysicalAssessment"
    objects: {
      patient: Prisma.$UserPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      method: string
      date: Date
      data: Prisma.JsonValue
      patientId: number
      createdById: number
    }, ExtArgs["result"]["physicalAssessment"]>
    composites: {}
  }

  type PhysicalAssessmentGetPayload<S extends boolean | null | undefined | PhysicalAssessmentDefaultArgs> = $Result.GetResult<Prisma.$PhysicalAssessmentPayload, S>

  type PhysicalAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PhysicalAssessmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PhysicalAssessmentCountAggregateInputType | true
    }

  export interface PhysicalAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PhysicalAssessment'], meta: { name: 'PhysicalAssessment' } }
    /**
     * Find zero or one PhysicalAssessment that matches the filter.
     * @param {PhysicalAssessmentFindUniqueArgs} args - Arguments to find a PhysicalAssessment
     * @example
     * // Get one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhysicalAssessmentFindUniqueArgs>(args: SelectSubset<T, PhysicalAssessmentFindUniqueArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PhysicalAssessment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PhysicalAssessmentFindUniqueOrThrowArgs} args - Arguments to find a PhysicalAssessment
     * @example
     * // Get one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhysicalAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PhysicalAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PhysicalAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentFindFirstArgs} args - Arguments to find a PhysicalAssessment
     * @example
     * // Get one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhysicalAssessmentFindFirstArgs>(args?: SelectSubset<T, PhysicalAssessmentFindFirstArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PhysicalAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentFindFirstOrThrowArgs} args - Arguments to find a PhysicalAssessment
     * @example
     * // Get one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhysicalAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PhysicalAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PhysicalAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PhysicalAssessments
     * const physicalAssessments = await prisma.physicalAssessment.findMany()
     * 
     * // Get first 10 PhysicalAssessments
     * const physicalAssessments = await prisma.physicalAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const physicalAssessmentWithIdOnly = await prisma.physicalAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhysicalAssessmentFindManyArgs>(args?: SelectSubset<T, PhysicalAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PhysicalAssessment.
     * @param {PhysicalAssessmentCreateArgs} args - Arguments to create a PhysicalAssessment.
     * @example
     * // Create one PhysicalAssessment
     * const PhysicalAssessment = await prisma.physicalAssessment.create({
     *   data: {
     *     // ... data to create a PhysicalAssessment
     *   }
     * })
     * 
     */
    create<T extends PhysicalAssessmentCreateArgs>(args: SelectSubset<T, PhysicalAssessmentCreateArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PhysicalAssessments.
     * @param {PhysicalAssessmentCreateManyArgs} args - Arguments to create many PhysicalAssessments.
     * @example
     * // Create many PhysicalAssessments
     * const physicalAssessment = await prisma.physicalAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhysicalAssessmentCreateManyArgs>(args?: SelectSubset<T, PhysicalAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PhysicalAssessments and returns the data saved in the database.
     * @param {PhysicalAssessmentCreateManyAndReturnArgs} args - Arguments to create many PhysicalAssessments.
     * @example
     * // Create many PhysicalAssessments
     * const physicalAssessment = await prisma.physicalAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PhysicalAssessments and only return the `id`
     * const physicalAssessmentWithIdOnly = await prisma.physicalAssessment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PhysicalAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PhysicalAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PhysicalAssessment.
     * @param {PhysicalAssessmentDeleteArgs} args - Arguments to delete one PhysicalAssessment.
     * @example
     * // Delete one PhysicalAssessment
     * const PhysicalAssessment = await prisma.physicalAssessment.delete({
     *   where: {
     *     // ... filter to delete one PhysicalAssessment
     *   }
     * })
     * 
     */
    delete<T extends PhysicalAssessmentDeleteArgs>(args: SelectSubset<T, PhysicalAssessmentDeleteArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PhysicalAssessment.
     * @param {PhysicalAssessmentUpdateArgs} args - Arguments to update one PhysicalAssessment.
     * @example
     * // Update one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhysicalAssessmentUpdateArgs>(args: SelectSubset<T, PhysicalAssessmentUpdateArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PhysicalAssessments.
     * @param {PhysicalAssessmentDeleteManyArgs} args - Arguments to filter PhysicalAssessments to delete.
     * @example
     * // Delete a few PhysicalAssessments
     * const { count } = await prisma.physicalAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhysicalAssessmentDeleteManyArgs>(args?: SelectSubset<T, PhysicalAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PhysicalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PhysicalAssessments
     * const physicalAssessment = await prisma.physicalAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhysicalAssessmentUpdateManyArgs>(args: SelectSubset<T, PhysicalAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PhysicalAssessment.
     * @param {PhysicalAssessmentUpsertArgs} args - Arguments to update or create a PhysicalAssessment.
     * @example
     * // Update or create a PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.upsert({
     *   create: {
     *     // ... data to create a PhysicalAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PhysicalAssessment we want to update
     *   }
     * })
     */
    upsert<T extends PhysicalAssessmentUpsertArgs>(args: SelectSubset<T, PhysicalAssessmentUpsertArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PhysicalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentCountArgs} args - Arguments to filter PhysicalAssessments to count.
     * @example
     * // Count the number of PhysicalAssessments
     * const count = await prisma.physicalAssessment.count({
     *   where: {
     *     // ... the filter for the PhysicalAssessments we want to count
     *   }
     * })
    **/
    count<T extends PhysicalAssessmentCountArgs>(
      args?: Subset<T, PhysicalAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhysicalAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PhysicalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhysicalAssessmentAggregateArgs>(args: Subset<T, PhysicalAssessmentAggregateArgs>): Prisma.PrismaPromise<GetPhysicalAssessmentAggregateType<T>>

    /**
     * Group by PhysicalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhysicalAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhysicalAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: PhysicalAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhysicalAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhysicalAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PhysicalAssessment model
   */
  readonly fields: PhysicalAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PhysicalAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhysicalAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PhysicalAssessment model
   */ 
  interface PhysicalAssessmentFieldRefs {
    readonly id: FieldRef<"PhysicalAssessment", 'Int'>
    readonly method: FieldRef<"PhysicalAssessment", 'String'>
    readonly date: FieldRef<"PhysicalAssessment", 'DateTime'>
    readonly data: FieldRef<"PhysicalAssessment", 'Json'>
    readonly patientId: FieldRef<"PhysicalAssessment", 'Int'>
    readonly createdById: FieldRef<"PhysicalAssessment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PhysicalAssessment findUnique
   */
  export type PhysicalAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessment to fetch.
     */
    where: PhysicalAssessmentWhereUniqueInput
  }

  /**
   * PhysicalAssessment findUniqueOrThrow
   */
  export type PhysicalAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessment to fetch.
     */
    where: PhysicalAssessmentWhereUniqueInput
  }

  /**
   * PhysicalAssessment findFirst
   */
  export type PhysicalAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessment to fetch.
     */
    where?: PhysicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhysicalAssessments to fetch.
     */
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhysicalAssessments.
     */
    cursor?: PhysicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhysicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhysicalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhysicalAssessments.
     */
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * PhysicalAssessment findFirstOrThrow
   */
  export type PhysicalAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessment to fetch.
     */
    where?: PhysicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhysicalAssessments to fetch.
     */
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhysicalAssessments.
     */
    cursor?: PhysicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhysicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhysicalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhysicalAssessments.
     */
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * PhysicalAssessment findMany
   */
  export type PhysicalAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessments to fetch.
     */
    where?: PhysicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhysicalAssessments to fetch.
     */
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PhysicalAssessments.
     */
    cursor?: PhysicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhysicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhysicalAssessments.
     */
    skip?: number
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * PhysicalAssessment create
   */
  export type PhysicalAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PhysicalAssessment.
     */
    data: XOR<PhysicalAssessmentCreateInput, PhysicalAssessmentUncheckedCreateInput>
  }

  /**
   * PhysicalAssessment createMany
   */
  export type PhysicalAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PhysicalAssessments.
     */
    data: PhysicalAssessmentCreateManyInput | PhysicalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PhysicalAssessment createManyAndReturn
   */
  export type PhysicalAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PhysicalAssessments.
     */
    data: PhysicalAssessmentCreateManyInput | PhysicalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PhysicalAssessment update
   */
  export type PhysicalAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PhysicalAssessment.
     */
    data: XOR<PhysicalAssessmentUpdateInput, PhysicalAssessmentUncheckedUpdateInput>
    /**
     * Choose, which PhysicalAssessment to update.
     */
    where: PhysicalAssessmentWhereUniqueInput
  }

  /**
   * PhysicalAssessment updateMany
   */
  export type PhysicalAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PhysicalAssessments.
     */
    data: XOR<PhysicalAssessmentUpdateManyMutationInput, PhysicalAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which PhysicalAssessments to update
     */
    where?: PhysicalAssessmentWhereInput
  }

  /**
   * PhysicalAssessment upsert
   */
  export type PhysicalAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PhysicalAssessment to update in case it exists.
     */
    where: PhysicalAssessmentWhereUniqueInput
    /**
     * In case the PhysicalAssessment found by the `where` argument doesn't exist, create a new PhysicalAssessment with this data.
     */
    create: XOR<PhysicalAssessmentCreateInput, PhysicalAssessmentUncheckedCreateInput>
    /**
     * In case the PhysicalAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhysicalAssessmentUpdateInput, PhysicalAssessmentUncheckedUpdateInput>
  }

  /**
   * PhysicalAssessment delete
   */
  export type PhysicalAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter which PhysicalAssessment to delete.
     */
    where: PhysicalAssessmentWhereUniqueInput
  }

  /**
   * PhysicalAssessment deleteMany
   */
  export type PhysicalAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhysicalAssessments to delete
     */
    where?: PhysicalAssessmentWhereInput
  }

  /**
   * PhysicalAssessment without action
   */
  export type PhysicalAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model MealPlan
   */

  export type AggregateMealPlan = {
    _count: MealPlanCountAggregateOutputType | null
    _avg: MealPlanAvgAggregateOutputType | null
    _sum: MealPlanSumAggregateOutputType | null
    _min: MealPlanMinAggregateOutputType | null
    _max: MealPlanMaxAggregateOutputType | null
  }

  export type MealPlanAvgAggregateOutputType = {
    id: number | null
    nutritionistId: number | null
    patientId: number | null
  }

  export type MealPlanSumAggregateOutputType = {
    id: number | null
    nutritionistId: number | null
    patientId: number | null
  }

  export type MealPlanMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    createdAt: Date | null
    nutritionistId: number | null
    patientId: number | null
  }

  export type MealPlanMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    createdAt: Date | null
    nutritionistId: number | null
    patientId: number | null
  }

  export type MealPlanCountAggregateOutputType = {
    id: number
    title: number
    description: number
    createdAt: number
    nutritionistId: number
    patientId: number
    _all: number
  }


  export type MealPlanAvgAggregateInputType = {
    id?: true
    nutritionistId?: true
    patientId?: true
  }

  export type MealPlanSumAggregateInputType = {
    id?: true
    nutritionistId?: true
    patientId?: true
  }

  export type MealPlanMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdAt?: true
    nutritionistId?: true
    patientId?: true
  }

  export type MealPlanMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdAt?: true
    nutritionistId?: true
    patientId?: true
  }

  export type MealPlanCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdAt?: true
    nutritionistId?: true
    patientId?: true
    _all?: true
  }

  export type MealPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealPlan to aggregate.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealPlans
    **/
    _count?: true | MealPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MealPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MealPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealPlanMaxAggregateInputType
  }

  export type GetMealPlanAggregateType<T extends MealPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateMealPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealPlan[P]>
      : GetScalarType<T[P], AggregateMealPlan[P]>
  }




  export type MealPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanWhereInput
    orderBy?: MealPlanOrderByWithAggregationInput | MealPlanOrderByWithAggregationInput[]
    by: MealPlanScalarFieldEnum[] | MealPlanScalarFieldEnum
    having?: MealPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealPlanCountAggregateInputType | true
    _avg?: MealPlanAvgAggregateInputType
    _sum?: MealPlanSumAggregateInputType
    _min?: MealPlanMinAggregateInputType
    _max?: MealPlanMaxAggregateInputType
  }

  export type MealPlanGroupByOutputType = {
    id: number
    title: string
    description: string
    createdAt: Date
    nutritionistId: number
    patientId: number
    _count: MealPlanCountAggregateOutputType | null
    _avg: MealPlanAvgAggregateOutputType | null
    _sum: MealPlanSumAggregateOutputType | null
    _min: MealPlanMinAggregateOutputType | null
    _max: MealPlanMaxAggregateOutputType | null
  }

  type GetMealPlanGroupByPayload<T extends MealPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealPlanGroupByOutputType[P]>
            : GetScalarType<T[P], MealPlanGroupByOutputType[P]>
        }
      >
    >


  export type MealPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
    nutritionistId?: boolean
    patientId?: boolean
    nutritionist?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlan"]>

  export type MealPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
    nutritionistId?: boolean
    patientId?: boolean
    nutritionist?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlan"]>

  export type MealPlanSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
    nutritionistId?: boolean
    patientId?: boolean
  }

  export type MealPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nutritionist?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MealPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nutritionist?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MealPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealPlan"
    objects: {
      nutritionist: Prisma.$UserPayload<ExtArgs>
      patient: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      createdAt: Date
      nutritionistId: number
      patientId: number
    }, ExtArgs["result"]["mealPlan"]>
    composites: {}
  }

  type MealPlanGetPayload<S extends boolean | null | undefined | MealPlanDefaultArgs> = $Result.GetResult<Prisma.$MealPlanPayload, S>

  type MealPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealPlanCountAggregateInputType | true
    }

  export interface MealPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealPlan'], meta: { name: 'MealPlan' } }
    /**
     * Find zero or one MealPlan that matches the filter.
     * @param {MealPlanFindUniqueArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealPlanFindUniqueArgs>(args: SelectSubset<T, MealPlanFindUniqueArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MealPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealPlanFindUniqueOrThrowArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, MealPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MealPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanFindFirstArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealPlanFindFirstArgs>(args?: SelectSubset<T, MealPlanFindFirstArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MealPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanFindFirstOrThrowArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, MealPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MealPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealPlans
     * const mealPlans = await prisma.mealPlan.findMany()
     * 
     * // Get first 10 MealPlans
     * const mealPlans = await prisma.mealPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealPlanWithIdOnly = await prisma.mealPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealPlanFindManyArgs>(args?: SelectSubset<T, MealPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MealPlan.
     * @param {MealPlanCreateArgs} args - Arguments to create a MealPlan.
     * @example
     * // Create one MealPlan
     * const MealPlan = await prisma.mealPlan.create({
     *   data: {
     *     // ... data to create a MealPlan
     *   }
     * })
     * 
     */
    create<T extends MealPlanCreateArgs>(args: SelectSubset<T, MealPlanCreateArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MealPlans.
     * @param {MealPlanCreateManyArgs} args - Arguments to create many MealPlans.
     * @example
     * // Create many MealPlans
     * const mealPlan = await prisma.mealPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealPlanCreateManyArgs>(args?: SelectSubset<T, MealPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealPlans and returns the data saved in the database.
     * @param {MealPlanCreateManyAndReturnArgs} args - Arguments to create many MealPlans.
     * @example
     * // Create many MealPlans
     * const mealPlan = await prisma.mealPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealPlans and only return the `id`
     * const mealPlanWithIdOnly = await prisma.mealPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, MealPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MealPlan.
     * @param {MealPlanDeleteArgs} args - Arguments to delete one MealPlan.
     * @example
     * // Delete one MealPlan
     * const MealPlan = await prisma.mealPlan.delete({
     *   where: {
     *     // ... filter to delete one MealPlan
     *   }
     * })
     * 
     */
    delete<T extends MealPlanDeleteArgs>(args: SelectSubset<T, MealPlanDeleteArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MealPlan.
     * @param {MealPlanUpdateArgs} args - Arguments to update one MealPlan.
     * @example
     * // Update one MealPlan
     * const mealPlan = await prisma.mealPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealPlanUpdateArgs>(args: SelectSubset<T, MealPlanUpdateArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MealPlans.
     * @param {MealPlanDeleteManyArgs} args - Arguments to filter MealPlans to delete.
     * @example
     * // Delete a few MealPlans
     * const { count } = await prisma.mealPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealPlanDeleteManyArgs>(args?: SelectSubset<T, MealPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealPlans
     * const mealPlan = await prisma.mealPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealPlanUpdateManyArgs>(args: SelectSubset<T, MealPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MealPlan.
     * @param {MealPlanUpsertArgs} args - Arguments to update or create a MealPlan.
     * @example
     * // Update or create a MealPlan
     * const mealPlan = await prisma.mealPlan.upsert({
     *   create: {
     *     // ... data to create a MealPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealPlan we want to update
     *   }
     * })
     */
    upsert<T extends MealPlanUpsertArgs>(args: SelectSubset<T, MealPlanUpsertArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MealPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanCountArgs} args - Arguments to filter MealPlans to count.
     * @example
     * // Count the number of MealPlans
     * const count = await prisma.mealPlan.count({
     *   where: {
     *     // ... the filter for the MealPlans we want to count
     *   }
     * })
    **/
    count<T extends MealPlanCountArgs>(
      args?: Subset<T, MealPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealPlanAggregateArgs>(args: Subset<T, MealPlanAggregateArgs>): Prisma.PrismaPromise<GetMealPlanAggregateType<T>>

    /**
     * Group by MealPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealPlanGroupByArgs['orderBy'] }
        : { orderBy?: MealPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealPlan model
   */
  readonly fields: MealPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nutritionist<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealPlan model
   */ 
  interface MealPlanFieldRefs {
    readonly id: FieldRef<"MealPlan", 'Int'>
    readonly title: FieldRef<"MealPlan", 'String'>
    readonly description: FieldRef<"MealPlan", 'String'>
    readonly createdAt: FieldRef<"MealPlan", 'DateTime'>
    readonly nutritionistId: FieldRef<"MealPlan", 'Int'>
    readonly patientId: FieldRef<"MealPlan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MealPlan findUnique
   */
  export type MealPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan findUniqueOrThrow
   */
  export type MealPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan findFirst
   */
  export type MealPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealPlans.
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealPlans.
     */
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * MealPlan findFirstOrThrow
   */
  export type MealPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealPlans.
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealPlans.
     */
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * MealPlan findMany
   */
  export type MealPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlans to fetch.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealPlans.
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * MealPlan create
   */
  export type MealPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a MealPlan.
     */
    data: XOR<MealPlanCreateInput, MealPlanUncheckedCreateInput>
  }

  /**
   * MealPlan createMany
   */
  export type MealPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealPlans.
     */
    data: MealPlanCreateManyInput | MealPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealPlan createManyAndReturn
   */
  export type MealPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MealPlans.
     */
    data: MealPlanCreateManyInput | MealPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealPlan update
   */
  export type MealPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a MealPlan.
     */
    data: XOR<MealPlanUpdateInput, MealPlanUncheckedUpdateInput>
    /**
     * Choose, which MealPlan to update.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan updateMany
   */
  export type MealPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealPlans.
     */
    data: XOR<MealPlanUpdateManyMutationInput, MealPlanUncheckedUpdateManyInput>
    /**
     * Filter which MealPlans to update
     */
    where?: MealPlanWhereInput
  }

  /**
   * MealPlan upsert
   */
  export type MealPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the MealPlan to update in case it exists.
     */
    where: MealPlanWhereUniqueInput
    /**
     * In case the MealPlan found by the `where` argument doesn't exist, create a new MealPlan with this data.
     */
    create: XOR<MealPlanCreateInput, MealPlanUncheckedCreateInput>
    /**
     * In case the MealPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealPlanUpdateInput, MealPlanUncheckedUpdateInput>
  }

  /**
   * MealPlan delete
   */
  export type MealPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter which MealPlan to delete.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan deleteMany
   */
  export type MealPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealPlans to delete
     */
    where?: MealPlanWhereInput
  }

  /**
   * MealPlan without action
   */
  export type MealPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    trainerPlans?: boolean | User$trainerPlansArgs<ExtArgs>
    patientPlans?: boolean | User$patientPlansArgs<ExtArgs>
    assessments?: boolean | User$assessmentsArgs<ExtArgs>
    createdAssessments?: boolean | User$createdAssessmentsArgs<ExtArgs>
    nutritionistPlans?: boolean | User$nutritionistPlansArgs<ExtArgs>
    mealPatientPlans?: boolean | User$mealPatientPlansArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainerPlans?: boolean | User$trainerPlansArgs<ExtArgs>
    patientPlans?: boolean | User$patientPlansArgs<ExtArgs>
    assessments?: boolean | User$assessmentsArgs<ExtArgs>
    createdAssessments?: boolean | User$createdAssessmentsArgs<ExtArgs>
    nutritionistPlans?: boolean | User$nutritionistPlansArgs<ExtArgs>
    mealPatientPlans?: boolean | User$mealPatientPlansArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      trainerPlans: Prisma.$WorkoutPlanPayload<ExtArgs>[]
      patientPlans: Prisma.$WorkoutPlanPayload<ExtArgs>[]
      assessments: Prisma.$PhysicalAssessmentPayload<ExtArgs>[]
      createdAssessments: Prisma.$PhysicalAssessmentPayload<ExtArgs>[]
      nutritionistPlans: Prisma.$MealPlanPayload<ExtArgs>[]
      mealPatientPlans: Prisma.$MealPlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      role: $Enums.Role
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trainerPlans<T extends User$trainerPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$trainerPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findMany"> | Null>
    patientPlans<T extends User$patientPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$patientPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findMany"> | Null>
    assessments<T extends User$assessmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$assessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findMany"> | Null>
    createdAssessments<T extends User$createdAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findMany"> | Null>
    nutritionistPlans<T extends User$nutritionistPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$nutritionistPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findMany"> | Null>
    mealPatientPlans<T extends User$mealPatientPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$mealPatientPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.trainerPlans
   */
  export type User$trainerPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    where?: WorkoutPlanWhereInput
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    cursor?: WorkoutPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * User.patientPlans
   */
  export type User$patientPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    where?: WorkoutPlanWhereInput
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    cursor?: WorkoutPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * User.assessments
   */
  export type User$assessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    where?: PhysicalAssessmentWhereInput
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    cursor?: PhysicalAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * User.createdAssessments
   */
  export type User$createdAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    where?: PhysicalAssessmentWhereInput
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    cursor?: PhysicalAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * User.nutritionistPlans
   */
  export type User$nutritionistPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    where?: MealPlanWhereInput
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    cursor?: MealPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * User.mealPatientPlans
   */
  export type User$mealPatientPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    where?: MealPlanWhereInput
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    cursor?: MealPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WorkoutPlanScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    createdAt: 'createdAt',
    trainerId: 'trainerId',
    patientId: 'patientId'
  };

  export type WorkoutPlanScalarFieldEnum = (typeof WorkoutPlanScalarFieldEnum)[keyof typeof WorkoutPlanScalarFieldEnum]


  export const PhysicalAssessmentScalarFieldEnum: {
    id: 'id',
    method: 'method',
    date: 'date',
    data: 'data',
    patientId: 'patientId',
    createdById: 'createdById'
  };

  export type PhysicalAssessmentScalarFieldEnum = (typeof PhysicalAssessmentScalarFieldEnum)[keyof typeof PhysicalAssessmentScalarFieldEnum]


  export const MealPlanScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    createdAt: 'createdAt',
    nutritionistId: 'nutritionistId',
    patientId: 'patientId'
  };

  export type MealPlanScalarFieldEnum = (typeof MealPlanScalarFieldEnum)[keyof typeof MealPlanScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type WorkoutPlanWhereInput = {
    AND?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    OR?: WorkoutPlanWhereInput[]
    NOT?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    id?: IntFilter<"WorkoutPlan"> | number
    title?: StringFilter<"WorkoutPlan"> | string
    description?: StringFilter<"WorkoutPlan"> | string
    createdAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    trainerId?: IntFilter<"WorkoutPlan"> | number
    patientId?: IntFilter<"WorkoutPlan"> | number
    trainer?: XOR<UserRelationFilter, UserWhereInput>
    patient?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type WorkoutPlanOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
    trainer?: UserOrderByWithRelationInput
    patient?: UserOrderByWithRelationInput
  }

  export type WorkoutPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    OR?: WorkoutPlanWhereInput[]
    NOT?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    title?: StringFilter<"WorkoutPlan"> | string
    description?: StringFilter<"WorkoutPlan"> | string
    createdAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    trainerId?: IntFilter<"WorkoutPlan"> | number
    patientId?: IntFilter<"WorkoutPlan"> | number
    trainer?: XOR<UserRelationFilter, UserWhereInput>
    patient?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type WorkoutPlanOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
    _count?: WorkoutPlanCountOrderByAggregateInput
    _avg?: WorkoutPlanAvgOrderByAggregateInput
    _max?: WorkoutPlanMaxOrderByAggregateInput
    _min?: WorkoutPlanMinOrderByAggregateInput
    _sum?: WorkoutPlanSumOrderByAggregateInput
  }

  export type WorkoutPlanScalarWhereWithAggregatesInput = {
    AND?: WorkoutPlanScalarWhereWithAggregatesInput | WorkoutPlanScalarWhereWithAggregatesInput[]
    OR?: WorkoutPlanScalarWhereWithAggregatesInput[]
    NOT?: WorkoutPlanScalarWhereWithAggregatesInput | WorkoutPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkoutPlan"> | number
    title?: StringWithAggregatesFilter<"WorkoutPlan"> | string
    description?: StringWithAggregatesFilter<"WorkoutPlan"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutPlan"> | Date | string
    trainerId?: IntWithAggregatesFilter<"WorkoutPlan"> | number
    patientId?: IntWithAggregatesFilter<"WorkoutPlan"> | number
  }

  export type PhysicalAssessmentWhereInput = {
    AND?: PhysicalAssessmentWhereInput | PhysicalAssessmentWhereInput[]
    OR?: PhysicalAssessmentWhereInput[]
    NOT?: PhysicalAssessmentWhereInput | PhysicalAssessmentWhereInput[]
    id?: IntFilter<"PhysicalAssessment"> | number
    method?: StringFilter<"PhysicalAssessment"> | string
    date?: DateTimeFilter<"PhysicalAssessment"> | Date | string
    data?: JsonFilter<"PhysicalAssessment">
    patientId?: IntFilter<"PhysicalAssessment"> | number
    createdById?: IntFilter<"PhysicalAssessment"> | number
    patient?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PhysicalAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    data?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
    patient?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type PhysicalAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PhysicalAssessmentWhereInput | PhysicalAssessmentWhereInput[]
    OR?: PhysicalAssessmentWhereInput[]
    NOT?: PhysicalAssessmentWhereInput | PhysicalAssessmentWhereInput[]
    method?: StringFilter<"PhysicalAssessment"> | string
    date?: DateTimeFilter<"PhysicalAssessment"> | Date | string
    data?: JsonFilter<"PhysicalAssessment">
    patientId?: IntFilter<"PhysicalAssessment"> | number
    createdById?: IntFilter<"PhysicalAssessment"> | number
    patient?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PhysicalAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    data?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
    _count?: PhysicalAssessmentCountOrderByAggregateInput
    _avg?: PhysicalAssessmentAvgOrderByAggregateInput
    _max?: PhysicalAssessmentMaxOrderByAggregateInput
    _min?: PhysicalAssessmentMinOrderByAggregateInput
    _sum?: PhysicalAssessmentSumOrderByAggregateInput
  }

  export type PhysicalAssessmentScalarWhereWithAggregatesInput = {
    AND?: PhysicalAssessmentScalarWhereWithAggregatesInput | PhysicalAssessmentScalarWhereWithAggregatesInput[]
    OR?: PhysicalAssessmentScalarWhereWithAggregatesInput[]
    NOT?: PhysicalAssessmentScalarWhereWithAggregatesInput | PhysicalAssessmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PhysicalAssessment"> | number
    method?: StringWithAggregatesFilter<"PhysicalAssessment"> | string
    date?: DateTimeWithAggregatesFilter<"PhysicalAssessment"> | Date | string
    data?: JsonWithAggregatesFilter<"PhysicalAssessment">
    patientId?: IntWithAggregatesFilter<"PhysicalAssessment"> | number
    createdById?: IntWithAggregatesFilter<"PhysicalAssessment"> | number
  }

  export type MealPlanWhereInput = {
    AND?: MealPlanWhereInput | MealPlanWhereInput[]
    OR?: MealPlanWhereInput[]
    NOT?: MealPlanWhereInput | MealPlanWhereInput[]
    id?: IntFilter<"MealPlan"> | number
    title?: StringFilter<"MealPlan"> | string
    description?: StringFilter<"MealPlan"> | string
    createdAt?: DateTimeFilter<"MealPlan"> | Date | string
    nutritionistId?: IntFilter<"MealPlan"> | number
    patientId?: IntFilter<"MealPlan"> | number
    nutritionist?: XOR<UserRelationFilter, UserWhereInput>
    patient?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MealPlanOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
    nutritionist?: UserOrderByWithRelationInput
    patient?: UserOrderByWithRelationInput
  }

  export type MealPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MealPlanWhereInput | MealPlanWhereInput[]
    OR?: MealPlanWhereInput[]
    NOT?: MealPlanWhereInput | MealPlanWhereInput[]
    title?: StringFilter<"MealPlan"> | string
    description?: StringFilter<"MealPlan"> | string
    createdAt?: DateTimeFilter<"MealPlan"> | Date | string
    nutritionistId?: IntFilter<"MealPlan"> | number
    patientId?: IntFilter<"MealPlan"> | number
    nutritionist?: XOR<UserRelationFilter, UserWhereInput>
    patient?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type MealPlanOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
    _count?: MealPlanCountOrderByAggregateInput
    _avg?: MealPlanAvgOrderByAggregateInput
    _max?: MealPlanMaxOrderByAggregateInput
    _min?: MealPlanMinOrderByAggregateInput
    _sum?: MealPlanSumOrderByAggregateInput
  }

  export type MealPlanScalarWhereWithAggregatesInput = {
    AND?: MealPlanScalarWhereWithAggregatesInput | MealPlanScalarWhereWithAggregatesInput[]
    OR?: MealPlanScalarWhereWithAggregatesInput[]
    NOT?: MealPlanScalarWhereWithAggregatesInput | MealPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MealPlan"> | number
    title?: StringWithAggregatesFilter<"MealPlan"> | string
    description?: StringWithAggregatesFilter<"MealPlan"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MealPlan"> | Date | string
    nutritionistId?: IntWithAggregatesFilter<"MealPlan"> | number
    patientId?: IntWithAggregatesFilter<"MealPlan"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    trainerPlans?: WorkoutPlanListRelationFilter
    patientPlans?: WorkoutPlanListRelationFilter
    assessments?: PhysicalAssessmentListRelationFilter
    createdAssessments?: PhysicalAssessmentListRelationFilter
    nutritionistPlans?: MealPlanListRelationFilter
    mealPatientPlans?: MealPlanListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    trainerPlans?: WorkoutPlanOrderByRelationAggregateInput
    patientPlans?: WorkoutPlanOrderByRelationAggregateInput
    assessments?: PhysicalAssessmentOrderByRelationAggregateInput
    createdAssessments?: PhysicalAssessmentOrderByRelationAggregateInput
    nutritionistPlans?: MealPlanOrderByRelationAggregateInput
    mealPatientPlans?: MealPlanOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    trainerPlans?: WorkoutPlanListRelationFilter
    patientPlans?: WorkoutPlanListRelationFilter
    assessments?: PhysicalAssessmentListRelationFilter
    createdAssessments?: PhysicalAssessmentListRelationFilter
    nutritionistPlans?: MealPlanListRelationFilter
    mealPatientPlans?: MealPlanListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WorkoutPlanCreateInput = {
    title: string
    description: string
    createdAt?: Date | string
    trainer: UserCreateNestedOneWithoutTrainerPlansInput
    patient: UserCreateNestedOneWithoutPatientPlansInput
  }

  export type WorkoutPlanUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    trainerId: number
    patientId: number
  }

  export type WorkoutPlanUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainer?: UserUpdateOneRequiredWithoutTrainerPlansNestedInput
    patient?: UserUpdateOneRequiredWithoutPatientPlansNestedInput
  }

  export type WorkoutPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutPlanCreateManyInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    trainerId: number
    patientId: number
  }

  export type WorkoutPlanUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentCreateInput = {
    method: string
    date?: Date | string
    data: JsonNullValueInput | InputJsonValue
    patient: UserCreateNestedOneWithoutAssessmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAssessmentsInput
  }

  export type PhysicalAssessmentUncheckedCreateInput = {
    id?: number
    method: string
    date?: Date | string
    data: JsonNullValueInput | InputJsonValue
    patientId: number
    createdById: number
  }

  export type PhysicalAssessmentUpdateInput = {
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    patient?: UserUpdateOneRequiredWithoutAssessmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput
  }

  export type PhysicalAssessmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    patientId?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentCreateManyInput = {
    id?: number
    method: string
    date?: Date | string
    data: JsonNullValueInput | InputJsonValue
    patientId: number
    createdById: number
  }

  export type PhysicalAssessmentUpdateManyMutationInput = {
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type PhysicalAssessmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    patientId?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanCreateInput = {
    title: string
    description: string
    createdAt?: Date | string
    nutritionist: UserCreateNestedOneWithoutNutritionistPlansInput
    patient: UserCreateNestedOneWithoutMealPatientPlansInput
  }

  export type MealPlanUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    nutritionistId: number
    patientId: number
  }

  export type MealPlanUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionist?: UserUpdateOneRequiredWithoutNutritionistPlansNestedInput
    patient?: UserUpdateOneRequiredWithoutMealPatientPlansNestedInput
  }

  export type MealPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionistId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanCreateManyInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    nutritionistId: number
    patientId: number
  }

  export type MealPlanUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionistId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WorkoutPlanCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type WorkoutPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type WorkoutPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type WorkoutPlanMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type WorkoutPlanSumOrderByAggregateInput = {
    id?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PhysicalAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    data?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }

  export type PhysicalAssessmentAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }

  export type PhysicalAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }

  export type PhysicalAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }

  export type PhysicalAssessmentSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type MealPlanCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type MealPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type MealPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type MealPlanMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type MealPlanSumOrderByAggregateInput = {
    id?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type WorkoutPlanListRelationFilter = {
    every?: WorkoutPlanWhereInput
    some?: WorkoutPlanWhereInput
    none?: WorkoutPlanWhereInput
  }

  export type PhysicalAssessmentListRelationFilter = {
    every?: PhysicalAssessmentWhereInput
    some?: PhysicalAssessmentWhereInput
    none?: PhysicalAssessmentWhereInput
  }

  export type MealPlanListRelationFilter = {
    every?: MealPlanWhereInput
    some?: MealPlanWhereInput
    none?: MealPlanWhereInput
  }

  export type WorkoutPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PhysicalAssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type UserCreateNestedOneWithoutTrainerPlansInput = {
    create?: XOR<UserCreateWithoutTrainerPlansInput, UserUncheckedCreateWithoutTrainerPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrainerPlansInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPatientPlansInput = {
    create?: XOR<UserCreateWithoutPatientPlansInput, UserUncheckedCreateWithoutPatientPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientPlansInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutTrainerPlansNestedInput = {
    create?: XOR<UserCreateWithoutTrainerPlansInput, UserUncheckedCreateWithoutTrainerPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrainerPlansInput
    upsert?: UserUpsertWithoutTrainerPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTrainerPlansInput, UserUpdateWithoutTrainerPlansInput>, UserUncheckedUpdateWithoutTrainerPlansInput>
  }

  export type UserUpdateOneRequiredWithoutPatientPlansNestedInput = {
    create?: XOR<UserCreateWithoutPatientPlansInput, UserUncheckedCreateWithoutPatientPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientPlansInput
    upsert?: UserUpsertWithoutPatientPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientPlansInput, UserUpdateWithoutPatientPlansInput>, UserUncheckedUpdateWithoutPatientPlansInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutAssessmentsInput = {
    create?: XOR<UserCreateWithoutAssessmentsInput, UserUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssessmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedAssessmentsInput = {
    create?: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAssessmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAssessmentsNestedInput = {
    create?: XOR<UserCreateWithoutAssessmentsInput, UserUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssessmentsInput
    upsert?: UserUpsertWithoutAssessmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssessmentsInput, UserUpdateWithoutAssessmentsInput>, UserUncheckedUpdateWithoutAssessmentsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAssessmentsInput
    upsert?: UserUpsertWithoutCreatedAssessmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAssessmentsInput, UserUpdateWithoutCreatedAssessmentsInput>, UserUncheckedUpdateWithoutCreatedAssessmentsInput>
  }

  export type UserCreateNestedOneWithoutNutritionistPlansInput = {
    create?: XOR<UserCreateWithoutNutritionistPlansInput, UserUncheckedCreateWithoutNutritionistPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutNutritionistPlansInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMealPatientPlansInput = {
    create?: XOR<UserCreateWithoutMealPatientPlansInput, UserUncheckedCreateWithoutMealPatientPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealPatientPlansInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNutritionistPlansNestedInput = {
    create?: XOR<UserCreateWithoutNutritionistPlansInput, UserUncheckedCreateWithoutNutritionistPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutNutritionistPlansInput
    upsert?: UserUpsertWithoutNutritionistPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNutritionistPlansInput, UserUpdateWithoutNutritionistPlansInput>, UserUncheckedUpdateWithoutNutritionistPlansInput>
  }

  export type UserUpdateOneRequiredWithoutMealPatientPlansNestedInput = {
    create?: XOR<UserCreateWithoutMealPatientPlansInput, UserUncheckedCreateWithoutMealPatientPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealPatientPlansInput
    upsert?: UserUpsertWithoutMealPatientPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMealPatientPlansInput, UserUpdateWithoutMealPatientPlansInput>, UserUncheckedUpdateWithoutMealPatientPlansInput>
  }

  export type WorkoutPlanCreateNestedManyWithoutTrainerInput = {
    create?: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput> | WorkoutPlanCreateWithoutTrainerInput[] | WorkoutPlanUncheckedCreateWithoutTrainerInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutTrainerInput | WorkoutPlanCreateOrConnectWithoutTrainerInput[]
    createMany?: WorkoutPlanCreateManyTrainerInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type WorkoutPlanCreateNestedManyWithoutPatientInput = {
    create?: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput> | WorkoutPlanCreateWithoutPatientInput[] | WorkoutPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutPatientInput | WorkoutPlanCreateOrConnectWithoutPatientInput[]
    createMany?: WorkoutPlanCreateManyPatientInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type PhysicalAssessmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput> | PhysicalAssessmentCreateWithoutPatientInput[] | PhysicalAssessmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutPatientInput | PhysicalAssessmentCreateOrConnectWithoutPatientInput[]
    createMany?: PhysicalAssessmentCreateManyPatientInputEnvelope
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
  }

  export type PhysicalAssessmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput> | PhysicalAssessmentCreateWithoutCreatedByInput[] | PhysicalAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutCreatedByInput | PhysicalAssessmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PhysicalAssessmentCreateManyCreatedByInputEnvelope
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
  }

  export type MealPlanCreateNestedManyWithoutNutritionistInput = {
    create?: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput> | MealPlanCreateWithoutNutritionistInput[] | MealPlanUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutNutritionistInput | MealPlanCreateOrConnectWithoutNutritionistInput[]
    createMany?: MealPlanCreateManyNutritionistInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type MealPlanCreateNestedManyWithoutPatientInput = {
    create?: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput> | MealPlanCreateWithoutPatientInput[] | MealPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutPatientInput | MealPlanCreateOrConnectWithoutPatientInput[]
    createMany?: MealPlanCreateManyPatientInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput = {
    create?: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput> | WorkoutPlanCreateWithoutTrainerInput[] | WorkoutPlanUncheckedCreateWithoutTrainerInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutTrainerInput | WorkoutPlanCreateOrConnectWithoutTrainerInput[]
    createMany?: WorkoutPlanCreateManyTrainerInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput> | WorkoutPlanCreateWithoutPatientInput[] | WorkoutPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutPatientInput | WorkoutPlanCreateOrConnectWithoutPatientInput[]
    createMany?: WorkoutPlanCreateManyPatientInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput> | PhysicalAssessmentCreateWithoutPatientInput[] | PhysicalAssessmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutPatientInput | PhysicalAssessmentCreateOrConnectWithoutPatientInput[]
    createMany?: PhysicalAssessmentCreateManyPatientInputEnvelope
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
  }

  export type PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput> | PhysicalAssessmentCreateWithoutCreatedByInput[] | PhysicalAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutCreatedByInput | PhysicalAssessmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PhysicalAssessmentCreateManyCreatedByInputEnvelope
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
  }

  export type MealPlanUncheckedCreateNestedManyWithoutNutritionistInput = {
    create?: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput> | MealPlanCreateWithoutNutritionistInput[] | MealPlanUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutNutritionistInput | MealPlanCreateOrConnectWithoutNutritionistInput[]
    createMany?: MealPlanCreateManyNutritionistInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type MealPlanUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput> | MealPlanCreateWithoutPatientInput[] | MealPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutPatientInput | MealPlanCreateOrConnectWithoutPatientInput[]
    createMany?: MealPlanCreateManyPatientInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type WorkoutPlanUpdateManyWithoutTrainerNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput> | WorkoutPlanCreateWithoutTrainerInput[] | WorkoutPlanUncheckedCreateWithoutTrainerInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutTrainerInput | WorkoutPlanCreateOrConnectWithoutTrainerInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput | WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput[]
    createMany?: WorkoutPlanCreateManyTrainerInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput | WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutTrainerInput | WorkoutPlanUpdateManyWithWhereWithoutTrainerInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type WorkoutPlanUpdateManyWithoutPatientNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput> | WorkoutPlanCreateWithoutPatientInput[] | WorkoutPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutPatientInput | WorkoutPlanCreateOrConnectWithoutPatientInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput | WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: WorkoutPlanCreateManyPatientInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput | WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutPatientInput | WorkoutPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type PhysicalAssessmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput> | PhysicalAssessmentCreateWithoutPatientInput[] | PhysicalAssessmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutPatientInput | PhysicalAssessmentCreateOrConnectWithoutPatientInput[]
    upsert?: PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput | PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PhysicalAssessmentCreateManyPatientInputEnvelope
    set?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    disconnect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    delete?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    update?: PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput | PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput | PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
  }

  export type PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput> | PhysicalAssessmentCreateWithoutCreatedByInput[] | PhysicalAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutCreatedByInput | PhysicalAssessmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput | PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PhysicalAssessmentCreateManyCreatedByInputEnvelope
    set?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    disconnect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    delete?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    update?: PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput | PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput | PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
  }

  export type MealPlanUpdateManyWithoutNutritionistNestedInput = {
    create?: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput> | MealPlanCreateWithoutNutritionistInput[] | MealPlanUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutNutritionistInput | MealPlanCreateOrConnectWithoutNutritionistInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutNutritionistInput | MealPlanUpsertWithWhereUniqueWithoutNutritionistInput[]
    createMany?: MealPlanCreateManyNutritionistInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutNutritionistInput | MealPlanUpdateWithWhereUniqueWithoutNutritionistInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutNutritionistInput | MealPlanUpdateManyWithWhereWithoutNutritionistInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type MealPlanUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput> | MealPlanCreateWithoutPatientInput[] | MealPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutPatientInput | MealPlanCreateOrConnectWithoutPatientInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutPatientInput | MealPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MealPlanCreateManyPatientInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutPatientInput | MealPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutPatientInput | MealPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput> | WorkoutPlanCreateWithoutTrainerInput[] | WorkoutPlanUncheckedCreateWithoutTrainerInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutTrainerInput | WorkoutPlanCreateOrConnectWithoutTrainerInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput | WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput[]
    createMany?: WorkoutPlanCreateManyTrainerInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput | WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutTrainerInput | WorkoutPlanUpdateManyWithWhereWithoutTrainerInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput> | WorkoutPlanCreateWithoutPatientInput[] | WorkoutPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutPatientInput | WorkoutPlanCreateOrConnectWithoutPatientInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput | WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: WorkoutPlanCreateManyPatientInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput | WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutPatientInput | WorkoutPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput> | PhysicalAssessmentCreateWithoutPatientInput[] | PhysicalAssessmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutPatientInput | PhysicalAssessmentCreateOrConnectWithoutPatientInput[]
    upsert?: PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput | PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PhysicalAssessmentCreateManyPatientInputEnvelope
    set?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    disconnect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    delete?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    update?: PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput | PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput | PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
  }

  export type PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput> | PhysicalAssessmentCreateWithoutCreatedByInput[] | PhysicalAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutCreatedByInput | PhysicalAssessmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput | PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PhysicalAssessmentCreateManyCreatedByInputEnvelope
    set?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    disconnect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    delete?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    update?: PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput | PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput | PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
  }

  export type MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput = {
    create?: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput> | MealPlanCreateWithoutNutritionistInput[] | MealPlanUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutNutritionistInput | MealPlanCreateOrConnectWithoutNutritionistInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutNutritionistInput | MealPlanUpsertWithWhereUniqueWithoutNutritionistInput[]
    createMany?: MealPlanCreateManyNutritionistInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutNutritionistInput | MealPlanUpdateWithWhereUniqueWithoutNutritionistInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutNutritionistInput | MealPlanUpdateManyWithWhereWithoutNutritionistInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type MealPlanUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput> | MealPlanCreateWithoutPatientInput[] | MealPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutPatientInput | MealPlanCreateOrConnectWithoutPatientInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutPatientInput | MealPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MealPlanCreateManyPatientInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutPatientInput | MealPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutPatientInput | MealPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type UserCreateWithoutTrainerPlansInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
  }

  export type UserUncheckedCreateWithoutTrainerPlansInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
  }

  export type UserCreateOrConnectWithoutTrainerPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrainerPlansInput, UserUncheckedCreateWithoutTrainerPlansInput>
  }

  export type UserCreateWithoutPatientPlansInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
  }

  export type UserUncheckedCreateWithoutPatientPlansInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
  }

  export type UserCreateOrConnectWithoutPatientPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientPlansInput, UserUncheckedCreateWithoutPatientPlansInput>
  }

  export type UserUpsertWithoutTrainerPlansInput = {
    update: XOR<UserUpdateWithoutTrainerPlansInput, UserUncheckedUpdateWithoutTrainerPlansInput>
    create: XOR<UserCreateWithoutTrainerPlansInput, UserUncheckedCreateWithoutTrainerPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTrainerPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTrainerPlansInput, UserUncheckedUpdateWithoutTrainerPlansInput>
  }

  export type UserUpdateWithoutTrainerPlansInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
  }

  export type UserUncheckedUpdateWithoutTrainerPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutPatientPlansInput = {
    update: XOR<UserUpdateWithoutPatientPlansInput, UserUncheckedUpdateWithoutPatientPlansInput>
    create: XOR<UserCreateWithoutPatientPlansInput, UserUncheckedCreateWithoutPatientPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientPlansInput, UserUncheckedUpdateWithoutPatientPlansInput>
  }

  export type UserUpdateWithoutPatientPlansInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserCreateWithoutAssessmentsInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
  }

  export type UserUncheckedCreateWithoutAssessmentsInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
  }

  export type UserCreateOrConnectWithoutAssessmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssessmentsInput, UserUncheckedCreateWithoutAssessmentsInput>
  }

  export type UserCreateWithoutCreatedAssessmentsInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
  }

  export type UserUncheckedCreateWithoutCreatedAssessmentsInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
  }

  export type UserCreateOrConnectWithoutCreatedAssessmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
  }

  export type UserUpsertWithoutAssessmentsInput = {
    update: XOR<UserUpdateWithoutAssessmentsInput, UserUncheckedUpdateWithoutAssessmentsInput>
    create: XOR<UserCreateWithoutAssessmentsInput, UserUncheckedCreateWithoutAssessmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssessmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssessmentsInput, UserUncheckedUpdateWithoutAssessmentsInput>
  }

  export type UserUpdateWithoutAssessmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
  }

  export type UserUncheckedUpdateWithoutAssessmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutCreatedAssessmentsInput = {
    update: XOR<UserUpdateWithoutCreatedAssessmentsInput, UserUncheckedUpdateWithoutCreatedAssessmentsInput>
    create: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedAssessmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedAssessmentsInput, UserUncheckedUpdateWithoutCreatedAssessmentsInput>
  }

  export type UserUpdateWithoutCreatedAssessmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedAssessmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserCreateWithoutNutritionistPlansInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
  }

  export type UserUncheckedCreateWithoutNutritionistPlansInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
  }

  export type UserCreateOrConnectWithoutNutritionistPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNutritionistPlansInput, UserUncheckedCreateWithoutNutritionistPlansInput>
  }

  export type UserCreateWithoutMealPatientPlansInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
  }

  export type UserUncheckedCreateWithoutMealPatientPlansInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
  }

  export type UserCreateOrConnectWithoutMealPatientPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMealPatientPlansInput, UserUncheckedCreateWithoutMealPatientPlansInput>
  }

  export type UserUpsertWithoutNutritionistPlansInput = {
    update: XOR<UserUpdateWithoutNutritionistPlansInput, UserUncheckedUpdateWithoutNutritionistPlansInput>
    create: XOR<UserCreateWithoutNutritionistPlansInput, UserUncheckedCreateWithoutNutritionistPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNutritionistPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNutritionistPlansInput, UserUncheckedUpdateWithoutNutritionistPlansInput>
  }

  export type UserUpdateWithoutNutritionistPlansInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
  }

  export type UserUncheckedUpdateWithoutNutritionistPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutMealPatientPlansInput = {
    update: XOR<UserUpdateWithoutMealPatientPlansInput, UserUncheckedUpdateWithoutMealPatientPlansInput>
    create: XOR<UserCreateWithoutMealPatientPlansInput, UserUncheckedCreateWithoutMealPatientPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMealPatientPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMealPatientPlansInput, UserUncheckedUpdateWithoutMealPatientPlansInput>
  }

  export type UserUpdateWithoutMealPatientPlansInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
  }

  export type UserUncheckedUpdateWithoutMealPatientPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
  }

  export type WorkoutPlanCreateWithoutTrainerInput = {
    title: string
    description: string
    createdAt?: Date | string
    patient: UserCreateNestedOneWithoutPatientPlansInput
  }

  export type WorkoutPlanUncheckedCreateWithoutTrainerInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    patientId: number
  }

  export type WorkoutPlanCreateOrConnectWithoutTrainerInput = {
    where: WorkoutPlanWhereUniqueInput
    create: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput>
  }

  export type WorkoutPlanCreateManyTrainerInputEnvelope = {
    data: WorkoutPlanCreateManyTrainerInput | WorkoutPlanCreateManyTrainerInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutPlanCreateWithoutPatientInput = {
    title: string
    description: string
    createdAt?: Date | string
    trainer: UserCreateNestedOneWithoutTrainerPlansInput
  }

  export type WorkoutPlanUncheckedCreateWithoutPatientInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    trainerId: number
  }

  export type WorkoutPlanCreateOrConnectWithoutPatientInput = {
    where: WorkoutPlanWhereUniqueInput
    create: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput>
  }

  export type WorkoutPlanCreateManyPatientInputEnvelope = {
    data: WorkoutPlanCreateManyPatientInput | WorkoutPlanCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PhysicalAssessmentCreateWithoutPatientInput = {
    method: string
    date?: Date | string
    data: JsonNullValueInput | InputJsonValue
    createdBy: UserCreateNestedOneWithoutCreatedAssessmentsInput
  }

  export type PhysicalAssessmentUncheckedCreateWithoutPatientInput = {
    id?: number
    method: string
    date?: Date | string
    data: JsonNullValueInput | InputJsonValue
    createdById: number
  }

  export type PhysicalAssessmentCreateOrConnectWithoutPatientInput = {
    where: PhysicalAssessmentWhereUniqueInput
    create: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput>
  }

  export type PhysicalAssessmentCreateManyPatientInputEnvelope = {
    data: PhysicalAssessmentCreateManyPatientInput | PhysicalAssessmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PhysicalAssessmentCreateWithoutCreatedByInput = {
    method: string
    date?: Date | string
    data: JsonNullValueInput | InputJsonValue
    patient: UserCreateNestedOneWithoutAssessmentsInput
  }

  export type PhysicalAssessmentUncheckedCreateWithoutCreatedByInput = {
    id?: number
    method: string
    date?: Date | string
    data: JsonNullValueInput | InputJsonValue
    patientId: number
  }

  export type PhysicalAssessmentCreateOrConnectWithoutCreatedByInput = {
    where: PhysicalAssessmentWhereUniqueInput
    create: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput>
  }

  export type PhysicalAssessmentCreateManyCreatedByInputEnvelope = {
    data: PhysicalAssessmentCreateManyCreatedByInput | PhysicalAssessmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type MealPlanCreateWithoutNutritionistInput = {
    title: string
    description: string
    createdAt?: Date | string
    patient: UserCreateNestedOneWithoutMealPatientPlansInput
  }

  export type MealPlanUncheckedCreateWithoutNutritionistInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    patientId: number
  }

  export type MealPlanCreateOrConnectWithoutNutritionistInput = {
    where: MealPlanWhereUniqueInput
    create: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput>
  }

  export type MealPlanCreateManyNutritionistInputEnvelope = {
    data: MealPlanCreateManyNutritionistInput | MealPlanCreateManyNutritionistInput[]
    skipDuplicates?: boolean
  }

  export type MealPlanCreateWithoutPatientInput = {
    title: string
    description: string
    createdAt?: Date | string
    nutritionist: UserCreateNestedOneWithoutNutritionistPlansInput
  }

  export type MealPlanUncheckedCreateWithoutPatientInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    nutritionistId: number
  }

  export type MealPlanCreateOrConnectWithoutPatientInput = {
    where: MealPlanWhereUniqueInput
    create: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput>
  }

  export type MealPlanCreateManyPatientInputEnvelope = {
    data: MealPlanCreateManyPatientInput | MealPlanCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput = {
    where: WorkoutPlanWhereUniqueInput
    update: XOR<WorkoutPlanUpdateWithoutTrainerInput, WorkoutPlanUncheckedUpdateWithoutTrainerInput>
    create: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput>
  }

  export type WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput = {
    where: WorkoutPlanWhereUniqueInput
    data: XOR<WorkoutPlanUpdateWithoutTrainerInput, WorkoutPlanUncheckedUpdateWithoutTrainerInput>
  }

  export type WorkoutPlanUpdateManyWithWhereWithoutTrainerInput = {
    where: WorkoutPlanScalarWhereInput
    data: XOR<WorkoutPlanUpdateManyMutationInput, WorkoutPlanUncheckedUpdateManyWithoutTrainerInput>
  }

  export type WorkoutPlanScalarWhereInput = {
    AND?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
    OR?: WorkoutPlanScalarWhereInput[]
    NOT?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
    id?: IntFilter<"WorkoutPlan"> | number
    title?: StringFilter<"WorkoutPlan"> | string
    description?: StringFilter<"WorkoutPlan"> | string
    createdAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    trainerId?: IntFilter<"WorkoutPlan"> | number
    patientId?: IntFilter<"WorkoutPlan"> | number
  }

  export type WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput = {
    where: WorkoutPlanWhereUniqueInput
    update: XOR<WorkoutPlanUpdateWithoutPatientInput, WorkoutPlanUncheckedUpdateWithoutPatientInput>
    create: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput>
  }

  export type WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput = {
    where: WorkoutPlanWhereUniqueInput
    data: XOR<WorkoutPlanUpdateWithoutPatientInput, WorkoutPlanUncheckedUpdateWithoutPatientInput>
  }

  export type WorkoutPlanUpdateManyWithWhereWithoutPatientInput = {
    where: WorkoutPlanScalarWhereInput
    data: XOR<WorkoutPlanUpdateManyMutationInput, WorkoutPlanUncheckedUpdateManyWithoutPatientInput>
  }

  export type PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: PhysicalAssessmentWhereUniqueInput
    update: XOR<PhysicalAssessmentUpdateWithoutPatientInput, PhysicalAssessmentUncheckedUpdateWithoutPatientInput>
    create: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput>
  }

  export type PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: PhysicalAssessmentWhereUniqueInput
    data: XOR<PhysicalAssessmentUpdateWithoutPatientInput, PhysicalAssessmentUncheckedUpdateWithoutPatientInput>
  }

  export type PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput = {
    where: PhysicalAssessmentScalarWhereInput
    data: XOR<PhysicalAssessmentUpdateManyMutationInput, PhysicalAssessmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type PhysicalAssessmentScalarWhereInput = {
    AND?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
    OR?: PhysicalAssessmentScalarWhereInput[]
    NOT?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
    id?: IntFilter<"PhysicalAssessment"> | number
    method?: StringFilter<"PhysicalAssessment"> | string
    date?: DateTimeFilter<"PhysicalAssessment"> | Date | string
    data?: JsonFilter<"PhysicalAssessment">
    patientId?: IntFilter<"PhysicalAssessment"> | number
    createdById?: IntFilter<"PhysicalAssessment"> | number
  }

  export type PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PhysicalAssessmentWhereUniqueInput
    update: XOR<PhysicalAssessmentUpdateWithoutCreatedByInput, PhysicalAssessmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput>
  }

  export type PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PhysicalAssessmentWhereUniqueInput
    data: XOR<PhysicalAssessmentUpdateWithoutCreatedByInput, PhysicalAssessmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: PhysicalAssessmentScalarWhereInput
    data: XOR<PhysicalAssessmentUpdateManyMutationInput, PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type MealPlanUpsertWithWhereUniqueWithoutNutritionistInput = {
    where: MealPlanWhereUniqueInput
    update: XOR<MealPlanUpdateWithoutNutritionistInput, MealPlanUncheckedUpdateWithoutNutritionistInput>
    create: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput>
  }

  export type MealPlanUpdateWithWhereUniqueWithoutNutritionistInput = {
    where: MealPlanWhereUniqueInput
    data: XOR<MealPlanUpdateWithoutNutritionistInput, MealPlanUncheckedUpdateWithoutNutritionistInput>
  }

  export type MealPlanUpdateManyWithWhereWithoutNutritionistInput = {
    where: MealPlanScalarWhereInput
    data: XOR<MealPlanUpdateManyMutationInput, MealPlanUncheckedUpdateManyWithoutNutritionistInput>
  }

  export type MealPlanScalarWhereInput = {
    AND?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
    OR?: MealPlanScalarWhereInput[]
    NOT?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
    id?: IntFilter<"MealPlan"> | number
    title?: StringFilter<"MealPlan"> | string
    description?: StringFilter<"MealPlan"> | string
    createdAt?: DateTimeFilter<"MealPlan"> | Date | string
    nutritionistId?: IntFilter<"MealPlan"> | number
    patientId?: IntFilter<"MealPlan"> | number
  }

  export type MealPlanUpsertWithWhereUniqueWithoutPatientInput = {
    where: MealPlanWhereUniqueInput
    update: XOR<MealPlanUpdateWithoutPatientInput, MealPlanUncheckedUpdateWithoutPatientInput>
    create: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput>
  }

  export type MealPlanUpdateWithWhereUniqueWithoutPatientInput = {
    where: MealPlanWhereUniqueInput
    data: XOR<MealPlanUpdateWithoutPatientInput, MealPlanUncheckedUpdateWithoutPatientInput>
  }

  export type MealPlanUpdateManyWithWhereWithoutPatientInput = {
    where: MealPlanScalarWhereInput
    data: XOR<MealPlanUpdateManyMutationInput, MealPlanUncheckedUpdateManyWithoutPatientInput>
  }

  export type WorkoutPlanCreateManyTrainerInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    patientId: number
  }

  export type WorkoutPlanCreateManyPatientInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    trainerId: number
  }

  export type PhysicalAssessmentCreateManyPatientInput = {
    id?: number
    method: string
    date?: Date | string
    data: JsonNullValueInput | InputJsonValue
    createdById: number
  }

  export type PhysicalAssessmentCreateManyCreatedByInput = {
    id?: number
    method: string
    date?: Date | string
    data: JsonNullValueInput | InputJsonValue
    patientId: number
  }

  export type MealPlanCreateManyNutritionistInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    patientId: number
  }

  export type MealPlanCreateManyPatientInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    nutritionistId: number
  }

  export type WorkoutPlanUpdateWithoutTrainerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: UserUpdateOneRequiredWithoutPatientPlansNestedInput
  }

  export type WorkoutPlanUncheckedUpdateWithoutTrainerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutTrainerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutPlanUpdateWithoutPatientInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainer?: UserUpdateOneRequiredWithoutTrainerPlansNestedInput
  }

  export type WorkoutPlanUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerId?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentUpdateWithoutPatientInput = {
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    createdBy?: UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput
  }

  export type PhysicalAssessmentUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentUpdateWithoutCreatedByInput = {
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    patient?: UserUpdateOneRequiredWithoutAssessmentsNestedInput
  }

  export type PhysicalAssessmentUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanUpdateWithoutNutritionistInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: UserUpdateOneRequiredWithoutMealPatientPlansNestedInput
  }

  export type MealPlanUncheckedUpdateWithoutNutritionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanUncheckedUpdateManyWithoutNutritionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanUpdateWithoutPatientInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionist?: UserUpdateOneRequiredWithoutNutritionistPlansNestedInput
  }

  export type MealPlanUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionistId?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionistId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutPlanDefaultArgs instead
     */
    export type WorkoutPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PhysicalAssessmentDefaultArgs instead
     */
    export type PhysicalAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PhysicalAssessmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MealPlanDefaultArgs instead
     */
    export type MealPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MealPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}