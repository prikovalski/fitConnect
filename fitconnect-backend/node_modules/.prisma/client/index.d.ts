
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model WorkoutPlan
 * 
 */
export type WorkoutPlan = $Result.DefaultSelection<Prisma.$WorkoutPlanPayload>
/**
 * Model WorkoutDay
 * 
 */
export type WorkoutDay = $Result.DefaultSelection<Prisma.$WorkoutDayPayload>
/**
 * Model WorkoutExercise
 * 
 */
export type WorkoutExercise = $Result.DefaultSelection<Prisma.$WorkoutExercisePayload>
/**
 * Model WorkoutSet
 * 
 */
export type WorkoutSet = $Result.DefaultSelection<Prisma.$WorkoutSetPayload>
/**
 * Model WorkoutLog
 * 
 */
export type WorkoutLog = $Result.DefaultSelection<Prisma.$WorkoutLogPayload>
/**
 * Model MealPlan
 * 
 */
export type MealPlan = $Result.DefaultSelection<Prisma.$MealPlanPayload>
/**
 * Model Meal
 * 
 */
export type Meal = $Result.DefaultSelection<Prisma.$MealPayload>
/**
 * Model MealItem
 * 
 */
export type MealItem = $Result.DefaultSelection<Prisma.$MealItemPayload>
/**
 * Model PhysicalAssessment
 * 
 */
export type PhysicalAssessment = $Result.DefaultSelection<Prisma.$PhysicalAssessmentPayload>
/**
 * Model DataSharing
 * 
 */
export type DataSharing = $Result.DefaultSelection<Prisma.$DataSharingPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  PATIENT: 'PATIENT',
  TRAINER: 'TRAINER',
  NUTRITIONIST: 'NUTRITIONIST'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

export type Gender = (typeof Gender)[keyof typeof Gender]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.workoutPlan`: Exposes CRUD operations for the **WorkoutPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutPlans
    * const workoutPlans = await prisma.workoutPlan.findMany()
    * ```
    */
  get workoutPlan(): Prisma.WorkoutPlanDelegate<ExtArgs>;

  /**
   * `prisma.workoutDay`: Exposes CRUD operations for the **WorkoutDay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutDays
    * const workoutDays = await prisma.workoutDay.findMany()
    * ```
    */
  get workoutDay(): Prisma.WorkoutDayDelegate<ExtArgs>;

  /**
   * `prisma.workoutExercise`: Exposes CRUD operations for the **WorkoutExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutExercises
    * const workoutExercises = await prisma.workoutExercise.findMany()
    * ```
    */
  get workoutExercise(): Prisma.WorkoutExerciseDelegate<ExtArgs>;

  /**
   * `prisma.workoutSet`: Exposes CRUD operations for the **WorkoutSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutSets
    * const workoutSets = await prisma.workoutSet.findMany()
    * ```
    */
  get workoutSet(): Prisma.WorkoutSetDelegate<ExtArgs>;

  /**
   * `prisma.workoutLog`: Exposes CRUD operations for the **WorkoutLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutLogs
    * const workoutLogs = await prisma.workoutLog.findMany()
    * ```
    */
  get workoutLog(): Prisma.WorkoutLogDelegate<ExtArgs>;

  /**
   * `prisma.mealPlan`: Exposes CRUD operations for the **MealPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealPlans
    * const mealPlans = await prisma.mealPlan.findMany()
    * ```
    */
  get mealPlan(): Prisma.MealPlanDelegate<ExtArgs>;

  /**
   * `prisma.meal`: Exposes CRUD operations for the **Meal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meals
    * const meals = await prisma.meal.findMany()
    * ```
    */
  get meal(): Prisma.MealDelegate<ExtArgs>;

  /**
   * `prisma.mealItem`: Exposes CRUD operations for the **MealItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealItems
    * const mealItems = await prisma.mealItem.findMany()
    * ```
    */
  get mealItem(): Prisma.MealItemDelegate<ExtArgs>;

  /**
   * `prisma.physicalAssessment`: Exposes CRUD operations for the **PhysicalAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PhysicalAssessments
    * const physicalAssessments = await prisma.physicalAssessment.findMany()
    * ```
    */
  get physicalAssessment(): Prisma.PhysicalAssessmentDelegate<ExtArgs>;

  /**
   * `prisma.dataSharing`: Exposes CRUD operations for the **DataSharing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DataSharings
    * const dataSharings = await prisma.dataSharing.findMany()
    * ```
    */
  get dataSharing(): Prisma.DataSharingDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    WorkoutPlan: 'WorkoutPlan',
    WorkoutDay: 'WorkoutDay',
    WorkoutExercise: 'WorkoutExercise',
    WorkoutSet: 'WorkoutSet',
    WorkoutLog: 'WorkoutLog',
    MealPlan: 'MealPlan',
    Meal: 'Meal',
    MealItem: 'MealItem',
    PhysicalAssessment: 'PhysicalAssessment',
    DataSharing: 'DataSharing'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "workoutPlan" | "workoutDay" | "workoutExercise" | "workoutSet" | "workoutLog" | "mealPlan" | "meal" | "mealItem" | "physicalAssessment" | "dataSharing"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      WorkoutPlan: {
        payload: Prisma.$WorkoutPlanPayload<ExtArgs>
        fields: Prisma.WorkoutPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          findFirst: {
            args: Prisma.WorkoutPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          findMany: {
            args: Prisma.WorkoutPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>[]
          }
          create: {
            args: Prisma.WorkoutPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          createMany: {
            args: Prisma.WorkoutPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>[]
          }
          delete: {
            args: Prisma.WorkoutPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          update: {
            args: Prisma.WorkoutPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          aggregate: {
            args: Prisma.WorkoutPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutPlan>
          }
          groupBy: {
            args: Prisma.WorkoutPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutPlanCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutPlanCountAggregateOutputType> | number
          }
        }
      }
      WorkoutDay: {
        payload: Prisma.$WorkoutDayPayload<ExtArgs>
        fields: Prisma.WorkoutDayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutDayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutDayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload>
          }
          findFirst: {
            args: Prisma.WorkoutDayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutDayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload>
          }
          findMany: {
            args: Prisma.WorkoutDayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload>[]
          }
          create: {
            args: Prisma.WorkoutDayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload>
          }
          createMany: {
            args: Prisma.WorkoutDayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutDayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload>[]
          }
          delete: {
            args: Prisma.WorkoutDayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload>
          }
          update: {
            args: Prisma.WorkoutDayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutDayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutDayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutDayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutDayPayload>
          }
          aggregate: {
            args: Prisma.WorkoutDayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutDay>
          }
          groupBy: {
            args: Prisma.WorkoutDayGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutDayGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutDayCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutDayCountAggregateOutputType> | number
          }
        }
      }
      WorkoutExercise: {
        payload: Prisma.$WorkoutExercisePayload<ExtArgs>
        fields: Prisma.WorkoutExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          findFirst: {
            args: Prisma.WorkoutExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          findMany: {
            args: Prisma.WorkoutExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          create: {
            args: Prisma.WorkoutExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          createMany: {
            args: Prisma.WorkoutExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          delete: {
            args: Prisma.WorkoutExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          update: {
            args: Prisma.WorkoutExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          deleteMany: {
            args: Prisma.WorkoutExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          aggregate: {
            args: Prisma.WorkoutExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutExercise>
          }
          groupBy: {
            args: Prisma.WorkoutExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutExerciseCountAggregateOutputType> | number
          }
        }
      }
      WorkoutSet: {
        payload: Prisma.$WorkoutSetPayload<ExtArgs>
        fields: Prisma.WorkoutSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload>
          }
          findFirst: {
            args: Prisma.WorkoutSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload>
          }
          findMany: {
            args: Prisma.WorkoutSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload>[]
          }
          create: {
            args: Prisma.WorkoutSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload>
          }
          createMany: {
            args: Prisma.WorkoutSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload>[]
          }
          delete: {
            args: Prisma.WorkoutSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload>
          }
          update: {
            args: Prisma.WorkoutSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSetPayload>
          }
          aggregate: {
            args: Prisma.WorkoutSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutSet>
          }
          groupBy: {
            args: Prisma.WorkoutSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutSetCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutSetCountAggregateOutputType> | number
          }
        }
      }
      WorkoutLog: {
        payload: Prisma.$WorkoutLogPayload<ExtArgs>
        fields: Prisma.WorkoutLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload>
          }
          findFirst: {
            args: Prisma.WorkoutLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload>
          }
          findMany: {
            args: Prisma.WorkoutLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload>[]
          }
          create: {
            args: Prisma.WorkoutLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload>
          }
          createMany: {
            args: Prisma.WorkoutLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload>[]
          }
          delete: {
            args: Prisma.WorkoutLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload>
          }
          update: {
            args: Prisma.WorkoutLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutLogPayload>
          }
          aggregate: {
            args: Prisma.WorkoutLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutLog>
          }
          groupBy: {
            args: Prisma.WorkoutLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutLogCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutLogCountAggregateOutputType> | number
          }
        }
      }
      MealPlan: {
        payload: Prisma.$MealPlanPayload<ExtArgs>
        fields: Prisma.MealPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          findFirst: {
            args: Prisma.MealPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          findMany: {
            args: Prisma.MealPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>[]
          }
          create: {
            args: Prisma.MealPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          createMany: {
            args: Prisma.MealPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>[]
          }
          delete: {
            args: Prisma.MealPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          update: {
            args: Prisma.MealPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          deleteMany: {
            args: Prisma.MealPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MealPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          aggregate: {
            args: Prisma.MealPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealPlan>
          }
          groupBy: {
            args: Prisma.MealPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealPlanCountArgs<ExtArgs>
            result: $Utils.Optional<MealPlanCountAggregateOutputType> | number
          }
        }
      }
      Meal: {
        payload: Prisma.$MealPayload<ExtArgs>
        fields: Prisma.MealFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          findFirst: {
            args: Prisma.MealFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          findMany: {
            args: Prisma.MealFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>[]
          }
          create: {
            args: Prisma.MealCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          createMany: {
            args: Prisma.MealCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>[]
          }
          delete: {
            args: Prisma.MealDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          update: {
            args: Prisma.MealUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          deleteMany: {
            args: Prisma.MealDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MealUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          aggregate: {
            args: Prisma.MealAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeal>
          }
          groupBy: {
            args: Prisma.MealGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealCountArgs<ExtArgs>
            result: $Utils.Optional<MealCountAggregateOutputType> | number
          }
        }
      }
      MealItem: {
        payload: Prisma.$MealItemPayload<ExtArgs>
        fields: Prisma.MealItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload>
          }
          findFirst: {
            args: Prisma.MealItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload>
          }
          findMany: {
            args: Prisma.MealItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload>[]
          }
          create: {
            args: Prisma.MealItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload>
          }
          createMany: {
            args: Prisma.MealItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload>[]
          }
          delete: {
            args: Prisma.MealItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload>
          }
          update: {
            args: Prisma.MealItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload>
          }
          deleteMany: {
            args: Prisma.MealItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MealItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealItemPayload>
          }
          aggregate: {
            args: Prisma.MealItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealItem>
          }
          groupBy: {
            args: Prisma.MealItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealItemCountArgs<ExtArgs>
            result: $Utils.Optional<MealItemCountAggregateOutputType> | number
          }
        }
      }
      PhysicalAssessment: {
        payload: Prisma.$PhysicalAssessmentPayload<ExtArgs>
        fields: Prisma.PhysicalAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhysicalAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhysicalAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          findFirst: {
            args: Prisma.PhysicalAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhysicalAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          findMany: {
            args: Prisma.PhysicalAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>[]
          }
          create: {
            args: Prisma.PhysicalAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          createMany: {
            args: Prisma.PhysicalAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PhysicalAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>[]
          }
          delete: {
            args: Prisma.PhysicalAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          update: {
            args: Prisma.PhysicalAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.PhysicalAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhysicalAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PhysicalAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhysicalAssessmentPayload>
          }
          aggregate: {
            args: Prisma.PhysicalAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhysicalAssessment>
          }
          groupBy: {
            args: Prisma.PhysicalAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhysicalAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhysicalAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<PhysicalAssessmentCountAggregateOutputType> | number
          }
        }
      }
      DataSharing: {
        payload: Prisma.$DataSharingPayload<ExtArgs>
        fields: Prisma.DataSharingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DataSharingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DataSharingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload>
          }
          findFirst: {
            args: Prisma.DataSharingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DataSharingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload>
          }
          findMany: {
            args: Prisma.DataSharingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload>[]
          }
          create: {
            args: Prisma.DataSharingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload>
          }
          createMany: {
            args: Prisma.DataSharingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DataSharingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload>[]
          }
          delete: {
            args: Prisma.DataSharingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload>
          }
          update: {
            args: Prisma.DataSharingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload>
          }
          deleteMany: {
            args: Prisma.DataSharingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DataSharingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DataSharingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSharingPayload>
          }
          aggregate: {
            args: Prisma.DataSharingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDataSharing>
          }
          groupBy: {
            args: Prisma.DataSharingGroupByArgs<ExtArgs>
            result: $Utils.Optional<DataSharingGroupByOutputType>[]
          }
          count: {
            args: Prisma.DataSharingCountArgs<ExtArgs>
            result: $Utils.Optional<DataSharingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    trainerPlans: number
    patientPlans: number
    assessments: number
    createdAssessments: number
    nutritionistPlans: number
    mealPatientPlans: number
    patientDataSharing: number
    professionalDataSharing: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainerPlans?: boolean | UserCountOutputTypeCountTrainerPlansArgs
    patientPlans?: boolean | UserCountOutputTypeCountPatientPlansArgs
    assessments?: boolean | UserCountOutputTypeCountAssessmentsArgs
    createdAssessments?: boolean | UserCountOutputTypeCountCreatedAssessmentsArgs
    nutritionistPlans?: boolean | UserCountOutputTypeCountNutritionistPlansArgs
    mealPatientPlans?: boolean | UserCountOutputTypeCountMealPatientPlansArgs
    patientDataSharing?: boolean | UserCountOutputTypeCountPatientDataSharingArgs
    professionalDataSharing?: boolean | UserCountOutputTypeCountProfessionalDataSharingArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTrainerPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhysicalAssessmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhysicalAssessmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNutritionistPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMealPatientPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientDataSharingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataSharingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfessionalDataSharingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataSharingWhereInput
  }


  /**
   * Count Type WorkoutPlanCountOutputType
   */

  export type WorkoutPlanCountOutputType = {
    workoutDays: number
  }

  export type WorkoutPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutDays?: boolean | WorkoutPlanCountOutputTypeCountWorkoutDaysArgs
  }

  // Custom InputTypes
  /**
   * WorkoutPlanCountOutputType without action
   */
  export type WorkoutPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlanCountOutputType
     */
    select?: WorkoutPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutPlanCountOutputType without action
   */
  export type WorkoutPlanCountOutputTypeCountWorkoutDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutDayWhereInput
  }


  /**
   * Count Type WorkoutDayCountOutputType
   */

  export type WorkoutDayCountOutputType = {
    exercises: number
  }

  export type WorkoutDayCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | WorkoutDayCountOutputTypeCountExercisesArgs
  }

  // Custom InputTypes
  /**
   * WorkoutDayCountOutputType without action
   */
  export type WorkoutDayCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDayCountOutputType
     */
    select?: WorkoutDayCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutDayCountOutputType without action
   */
  export type WorkoutDayCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
  }


  /**
   * Count Type WorkoutExerciseCountOutputType
   */

  export type WorkoutExerciseCountOutputType = {
    sets: number
  }

  export type WorkoutExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sets?: boolean | WorkoutExerciseCountOutputTypeCountSetsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutExerciseCountOutputType without action
   */
  export type WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExerciseCountOutputType
     */
    select?: WorkoutExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutExerciseCountOutputType without action
   */
  export type WorkoutExerciseCountOutputTypeCountSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSetWhereInput
  }


  /**
   * Count Type WorkoutSetCountOutputType
   */

  export type WorkoutSetCountOutputType = {
    logs: number
  }

  export type WorkoutSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logs?: boolean | WorkoutSetCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutSetCountOutputType without action
   */
  export type WorkoutSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSetCountOutputType
     */
    select?: WorkoutSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutSetCountOutputType without action
   */
  export type WorkoutSetCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutLogWhereInput
  }


  /**
   * Count Type MealPlanCountOutputType
   */

  export type MealPlanCountOutputType = {
    meals: number
  }

  export type MealPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meals?: boolean | MealPlanCountOutputTypeCountMealsArgs
  }

  // Custom InputTypes
  /**
   * MealPlanCountOutputType without action
   */
  export type MealPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanCountOutputType
     */
    select?: MealPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MealPlanCountOutputType without action
   */
  export type MealPlanCountOutputTypeCountMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealWhereInput
  }


  /**
   * Count Type MealCountOutputType
   */

  export type MealCountOutputType = {
    items: number
  }

  export type MealCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | MealCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCountOutputType
     */
    select?: MealCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    peso: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    peso: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.Role | null
    birthDate: Date | null
    gender: $Enums.Gender | null
    peso: number | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.Role | null
    birthDate: Date | null
    gender: $Enums.Gender | null
    peso: number | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    birthDate: number
    gender: number
    peso: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    peso?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    peso?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    birthDate?: true
    gender?: true
    peso?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    birthDate?: true
    gender?: true
    peso?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    birthDate?: true
    gender?: true
    peso?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date
    gender: $Enums.Gender
    peso: number | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    birthDate?: boolean
    gender?: boolean
    peso?: boolean
    createdAt?: boolean
    trainerPlans?: boolean | User$trainerPlansArgs<ExtArgs>
    patientPlans?: boolean | User$patientPlansArgs<ExtArgs>
    assessments?: boolean | User$assessmentsArgs<ExtArgs>
    createdAssessments?: boolean | User$createdAssessmentsArgs<ExtArgs>
    nutritionistPlans?: boolean | User$nutritionistPlansArgs<ExtArgs>
    mealPatientPlans?: boolean | User$mealPatientPlansArgs<ExtArgs>
    patientDataSharing?: boolean | User$patientDataSharingArgs<ExtArgs>
    professionalDataSharing?: boolean | User$professionalDataSharingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    birthDate?: boolean
    gender?: boolean
    peso?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    birthDate?: boolean
    gender?: boolean
    peso?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainerPlans?: boolean | User$trainerPlansArgs<ExtArgs>
    patientPlans?: boolean | User$patientPlansArgs<ExtArgs>
    assessments?: boolean | User$assessmentsArgs<ExtArgs>
    createdAssessments?: boolean | User$createdAssessmentsArgs<ExtArgs>
    nutritionistPlans?: boolean | User$nutritionistPlansArgs<ExtArgs>
    mealPatientPlans?: boolean | User$mealPatientPlansArgs<ExtArgs>
    patientDataSharing?: boolean | User$patientDataSharingArgs<ExtArgs>
    professionalDataSharing?: boolean | User$professionalDataSharingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      trainerPlans: Prisma.$WorkoutPlanPayload<ExtArgs>[]
      patientPlans: Prisma.$WorkoutPlanPayload<ExtArgs>[]
      assessments: Prisma.$PhysicalAssessmentPayload<ExtArgs>[]
      createdAssessments: Prisma.$PhysicalAssessmentPayload<ExtArgs>[]
      nutritionistPlans: Prisma.$MealPlanPayload<ExtArgs>[]
      mealPatientPlans: Prisma.$MealPlanPayload<ExtArgs>[]
      patientDataSharing: Prisma.$DataSharingPayload<ExtArgs>[]
      professionalDataSharing: Prisma.$DataSharingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      role: $Enums.Role
      birthDate: Date
      gender: $Enums.Gender
      peso: number | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trainerPlans<T extends User$trainerPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$trainerPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findMany"> | Null>
    patientPlans<T extends User$patientPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$patientPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findMany"> | Null>
    assessments<T extends User$assessmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$assessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findMany"> | Null>
    createdAssessments<T extends User$createdAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findMany"> | Null>
    nutritionistPlans<T extends User$nutritionistPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$nutritionistPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findMany"> | Null>
    mealPatientPlans<T extends User$mealPatientPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$mealPatientPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findMany"> | Null>
    patientDataSharing<T extends User$patientDataSharingArgs<ExtArgs> = {}>(args?: Subset<T, User$patientDataSharingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "findMany"> | Null>
    professionalDataSharing<T extends User$professionalDataSharingArgs<ExtArgs> = {}>(args?: Subset<T, User$professionalDataSharingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly birthDate: FieldRef<"User", 'DateTime'>
    readonly gender: FieldRef<"User", 'Gender'>
    readonly peso: FieldRef<"User", 'Float'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.trainerPlans
   */
  export type User$trainerPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    where?: WorkoutPlanWhereInput
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    cursor?: WorkoutPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * User.patientPlans
   */
  export type User$patientPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    where?: WorkoutPlanWhereInput
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    cursor?: WorkoutPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * User.assessments
   */
  export type User$assessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    where?: PhysicalAssessmentWhereInput
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    cursor?: PhysicalAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * User.createdAssessments
   */
  export type User$createdAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    where?: PhysicalAssessmentWhereInput
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    cursor?: PhysicalAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * User.nutritionistPlans
   */
  export type User$nutritionistPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    where?: MealPlanWhereInput
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    cursor?: MealPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * User.mealPatientPlans
   */
  export type User$mealPatientPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    where?: MealPlanWhereInput
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    cursor?: MealPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * User.patientDataSharing
   */
  export type User$patientDataSharingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    where?: DataSharingWhereInput
    orderBy?: DataSharingOrderByWithRelationInput | DataSharingOrderByWithRelationInput[]
    cursor?: DataSharingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataSharingScalarFieldEnum | DataSharingScalarFieldEnum[]
  }

  /**
   * User.professionalDataSharing
   */
  export type User$professionalDataSharingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    where?: DataSharingWhereInput
    orderBy?: DataSharingOrderByWithRelationInput | DataSharingOrderByWithRelationInput[]
    cursor?: DataSharingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataSharingScalarFieldEnum | DataSharingScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutPlan
   */

  export type AggregateWorkoutPlan = {
    _count: WorkoutPlanCountAggregateOutputType | null
    _avg: WorkoutPlanAvgAggregateOutputType | null
    _sum: WorkoutPlanSumAggregateOutputType | null
    _min: WorkoutPlanMinAggregateOutputType | null
    _max: WorkoutPlanMaxAggregateOutputType | null
  }

  export type WorkoutPlanAvgAggregateOutputType = {
    id: number | null
    trainerId: number | null
    patientId: number | null
  }

  export type WorkoutPlanSumAggregateOutputType = {
    id: number | null
    trainerId: number | null
    patientId: number | null
  }

  export type WorkoutPlanMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    validFrom: Date | null
    validUntil: Date | null
    isActive: boolean | null
    createdAt: Date | null
    trainerId: number | null
    patientId: number | null
  }

  export type WorkoutPlanMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    validFrom: Date | null
    validUntil: Date | null
    isActive: boolean | null
    createdAt: Date | null
    trainerId: number | null
    patientId: number | null
  }

  export type WorkoutPlanCountAggregateOutputType = {
    id: number
    title: number
    description: number
    validFrom: number
    validUntil: number
    isActive: number
    createdAt: number
    trainerId: number
    patientId: number
    _all: number
  }


  export type WorkoutPlanAvgAggregateInputType = {
    id?: true
    trainerId?: true
    patientId?: true
  }

  export type WorkoutPlanSumAggregateInputType = {
    id?: true
    trainerId?: true
    patientId?: true
  }

  export type WorkoutPlanMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    validFrom?: true
    validUntil?: true
    isActive?: true
    createdAt?: true
    trainerId?: true
    patientId?: true
  }

  export type WorkoutPlanMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    validFrom?: true
    validUntil?: true
    isActive?: true
    createdAt?: true
    trainerId?: true
    patientId?: true
  }

  export type WorkoutPlanCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    validFrom?: true
    validUntil?: true
    isActive?: true
    createdAt?: true
    trainerId?: true
    patientId?: true
    _all?: true
  }

  export type WorkoutPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutPlan to aggregate.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutPlans
    **/
    _count?: true | WorkoutPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutPlanMaxAggregateInputType
  }

  export type GetWorkoutPlanAggregateType<T extends WorkoutPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutPlan[P]>
      : GetScalarType<T[P], AggregateWorkoutPlan[P]>
  }




  export type WorkoutPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutPlanWhereInput
    orderBy?: WorkoutPlanOrderByWithAggregationInput | WorkoutPlanOrderByWithAggregationInput[]
    by: WorkoutPlanScalarFieldEnum[] | WorkoutPlanScalarFieldEnum
    having?: WorkoutPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutPlanCountAggregateInputType | true
    _avg?: WorkoutPlanAvgAggregateInputType
    _sum?: WorkoutPlanSumAggregateInputType
    _min?: WorkoutPlanMinAggregateInputType
    _max?: WorkoutPlanMaxAggregateInputType
  }

  export type WorkoutPlanGroupByOutputType = {
    id: number
    title: string
    description: string
    validFrom: Date
    validUntil: Date
    isActive: boolean
    createdAt: Date
    trainerId: number
    patientId: number
    _count: WorkoutPlanCountAggregateOutputType | null
    _avg: WorkoutPlanAvgAggregateOutputType | null
    _sum: WorkoutPlanSumAggregateOutputType | null
    _min: WorkoutPlanMinAggregateOutputType | null
    _max: WorkoutPlanMaxAggregateOutputType | null
  }

  type GetWorkoutPlanGroupByPayload<T extends WorkoutPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutPlanGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutPlanGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    createdAt?: boolean
    trainerId?: boolean
    patientId?: boolean
    trainer?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
    workoutDays?: boolean | WorkoutPlan$workoutDaysArgs<ExtArgs>
    _count?: boolean | WorkoutPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutPlan"]>

  export type WorkoutPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    createdAt?: boolean
    trainerId?: boolean
    patientId?: boolean
    trainer?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutPlan"]>

  export type WorkoutPlanSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    createdAt?: boolean
    trainerId?: boolean
    patientId?: boolean
  }

  export type WorkoutPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainer?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
    workoutDays?: boolean | WorkoutPlan$workoutDaysArgs<ExtArgs>
    _count?: boolean | WorkoutPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainer?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkoutPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutPlan"
    objects: {
      trainer: Prisma.$UserPayload<ExtArgs>
      patient: Prisma.$UserPayload<ExtArgs>
      workoutDays: Prisma.$WorkoutDayPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      validFrom: Date
      validUntil: Date
      isActive: boolean
      createdAt: Date
      trainerId: number
      patientId: number
    }, ExtArgs["result"]["workoutPlan"]>
    composites: {}
  }

  type WorkoutPlanGetPayload<S extends boolean | null | undefined | WorkoutPlanDefaultArgs> = $Result.GetResult<Prisma.$WorkoutPlanPayload, S>

  type WorkoutPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutPlanCountAggregateInputType | true
    }

  export interface WorkoutPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutPlan'], meta: { name: 'WorkoutPlan' } }
    /**
     * Find zero or one WorkoutPlan that matches the filter.
     * @param {WorkoutPlanFindUniqueArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutPlanFindUniqueArgs>(args: SelectSubset<T, WorkoutPlanFindUniqueArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkoutPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutPlanFindUniqueOrThrowArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkoutPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanFindFirstArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutPlanFindFirstArgs>(args?: SelectSubset<T, WorkoutPlanFindFirstArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkoutPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanFindFirstOrThrowArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkoutPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutPlans
     * const workoutPlans = await prisma.workoutPlan.findMany()
     * 
     * // Get first 10 WorkoutPlans
     * const workoutPlans = await prisma.workoutPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutPlanWithIdOnly = await prisma.workoutPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutPlanFindManyArgs>(args?: SelectSubset<T, WorkoutPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkoutPlan.
     * @param {WorkoutPlanCreateArgs} args - Arguments to create a WorkoutPlan.
     * @example
     * // Create one WorkoutPlan
     * const WorkoutPlan = await prisma.workoutPlan.create({
     *   data: {
     *     // ... data to create a WorkoutPlan
     *   }
     * })
     * 
     */
    create<T extends WorkoutPlanCreateArgs>(args: SelectSubset<T, WorkoutPlanCreateArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkoutPlans.
     * @param {WorkoutPlanCreateManyArgs} args - Arguments to create many WorkoutPlans.
     * @example
     * // Create many WorkoutPlans
     * const workoutPlan = await prisma.workoutPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutPlanCreateManyArgs>(args?: SelectSubset<T, WorkoutPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutPlans and returns the data saved in the database.
     * @param {WorkoutPlanCreateManyAndReturnArgs} args - Arguments to create many WorkoutPlans.
     * @example
     * // Create many WorkoutPlans
     * const workoutPlan = await prisma.workoutPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutPlans and only return the `id`
     * const workoutPlanWithIdOnly = await prisma.workoutPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkoutPlan.
     * @param {WorkoutPlanDeleteArgs} args - Arguments to delete one WorkoutPlan.
     * @example
     * // Delete one WorkoutPlan
     * const WorkoutPlan = await prisma.workoutPlan.delete({
     *   where: {
     *     // ... filter to delete one WorkoutPlan
     *   }
     * })
     * 
     */
    delete<T extends WorkoutPlanDeleteArgs>(args: SelectSubset<T, WorkoutPlanDeleteArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkoutPlan.
     * @param {WorkoutPlanUpdateArgs} args - Arguments to update one WorkoutPlan.
     * @example
     * // Update one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutPlanUpdateArgs>(args: SelectSubset<T, WorkoutPlanUpdateArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkoutPlans.
     * @param {WorkoutPlanDeleteManyArgs} args - Arguments to filter WorkoutPlans to delete.
     * @example
     * // Delete a few WorkoutPlans
     * const { count } = await prisma.workoutPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutPlanDeleteManyArgs>(args?: SelectSubset<T, WorkoutPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutPlans
     * const workoutPlan = await prisma.workoutPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutPlanUpdateManyArgs>(args: SelectSubset<T, WorkoutPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutPlan.
     * @param {WorkoutPlanUpsertArgs} args - Arguments to update or create a WorkoutPlan.
     * @example
     * // Update or create a WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.upsert({
     *   create: {
     *     // ... data to create a WorkoutPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutPlan we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutPlanUpsertArgs>(args: SelectSubset<T, WorkoutPlanUpsertArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkoutPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanCountArgs} args - Arguments to filter WorkoutPlans to count.
     * @example
     * // Count the number of WorkoutPlans
     * const count = await prisma.workoutPlan.count({
     *   where: {
     *     // ... the filter for the WorkoutPlans we want to count
     *   }
     * })
    **/
    count<T extends WorkoutPlanCountArgs>(
      args?: Subset<T, WorkoutPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutPlanAggregateArgs>(args: Subset<T, WorkoutPlanAggregateArgs>): Prisma.PrismaPromise<GetWorkoutPlanAggregateType<T>>

    /**
     * Group by WorkoutPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutPlanGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutPlan model
   */
  readonly fields: WorkoutPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trainer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workoutDays<T extends WorkoutPlan$workoutDaysArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutPlan$workoutDaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutPlan model
   */ 
  interface WorkoutPlanFieldRefs {
    readonly id: FieldRef<"WorkoutPlan", 'Int'>
    readonly title: FieldRef<"WorkoutPlan", 'String'>
    readonly description: FieldRef<"WorkoutPlan", 'String'>
    readonly validFrom: FieldRef<"WorkoutPlan", 'DateTime'>
    readonly validUntil: FieldRef<"WorkoutPlan", 'DateTime'>
    readonly isActive: FieldRef<"WorkoutPlan", 'Boolean'>
    readonly createdAt: FieldRef<"WorkoutPlan", 'DateTime'>
    readonly trainerId: FieldRef<"WorkoutPlan", 'Int'>
    readonly patientId: FieldRef<"WorkoutPlan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutPlan findUnique
   */
  export type WorkoutPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan findUniqueOrThrow
   */
  export type WorkoutPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan findFirst
   */
  export type WorkoutPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutPlans.
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutPlans.
     */
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * WorkoutPlan findFirstOrThrow
   */
  export type WorkoutPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutPlans.
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutPlans.
     */
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * WorkoutPlan findMany
   */
  export type WorkoutPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlans to fetch.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutPlans.
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * WorkoutPlan create
   */
  export type WorkoutPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutPlan.
     */
    data: XOR<WorkoutPlanCreateInput, WorkoutPlanUncheckedCreateInput>
  }

  /**
   * WorkoutPlan createMany
   */
  export type WorkoutPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutPlans.
     */
    data: WorkoutPlanCreateManyInput | WorkoutPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutPlan createManyAndReturn
   */
  export type WorkoutPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkoutPlans.
     */
    data: WorkoutPlanCreateManyInput | WorkoutPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutPlan update
   */
  export type WorkoutPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutPlan.
     */
    data: XOR<WorkoutPlanUpdateInput, WorkoutPlanUncheckedUpdateInput>
    /**
     * Choose, which WorkoutPlan to update.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan updateMany
   */
  export type WorkoutPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutPlans.
     */
    data: XOR<WorkoutPlanUpdateManyMutationInput, WorkoutPlanUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutPlans to update
     */
    where?: WorkoutPlanWhereInput
  }

  /**
   * WorkoutPlan upsert
   */
  export type WorkoutPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutPlan to update in case it exists.
     */
    where: WorkoutPlanWhereUniqueInput
    /**
     * In case the WorkoutPlan found by the `where` argument doesn't exist, create a new WorkoutPlan with this data.
     */
    create: XOR<WorkoutPlanCreateInput, WorkoutPlanUncheckedCreateInput>
    /**
     * In case the WorkoutPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutPlanUpdateInput, WorkoutPlanUncheckedUpdateInput>
  }

  /**
   * WorkoutPlan delete
   */
  export type WorkoutPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter which WorkoutPlan to delete.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan deleteMany
   */
  export type WorkoutPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutPlans to delete
     */
    where?: WorkoutPlanWhereInput
  }

  /**
   * WorkoutPlan.workoutDays
   */
  export type WorkoutPlan$workoutDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    where?: WorkoutDayWhereInput
    orderBy?: WorkoutDayOrderByWithRelationInput | WorkoutDayOrderByWithRelationInput[]
    cursor?: WorkoutDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutDayScalarFieldEnum | WorkoutDayScalarFieldEnum[]
  }

  /**
   * WorkoutPlan without action
   */
  export type WorkoutPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutDay
   */

  export type AggregateWorkoutDay = {
    _count: WorkoutDayCountAggregateOutputType | null
    _avg: WorkoutDayAvgAggregateOutputType | null
    _sum: WorkoutDaySumAggregateOutputType | null
    _min: WorkoutDayMinAggregateOutputType | null
    _max: WorkoutDayMaxAggregateOutputType | null
  }

  export type WorkoutDayAvgAggregateOutputType = {
    id: number | null
    workoutPlanId: number | null
  }

  export type WorkoutDaySumAggregateOutputType = {
    id: number | null
    workoutPlanId: number | null
  }

  export type WorkoutDayMinAggregateOutputType = {
    id: number | null
    workoutPlanId: number | null
    dayOfWeek: string | null
    muscleGroup: string | null
  }

  export type WorkoutDayMaxAggregateOutputType = {
    id: number | null
    workoutPlanId: number | null
    dayOfWeek: string | null
    muscleGroup: string | null
  }

  export type WorkoutDayCountAggregateOutputType = {
    id: number
    workoutPlanId: number
    dayOfWeek: number
    muscleGroup: number
    _all: number
  }


  export type WorkoutDayAvgAggregateInputType = {
    id?: true
    workoutPlanId?: true
  }

  export type WorkoutDaySumAggregateInputType = {
    id?: true
    workoutPlanId?: true
  }

  export type WorkoutDayMinAggregateInputType = {
    id?: true
    workoutPlanId?: true
    dayOfWeek?: true
    muscleGroup?: true
  }

  export type WorkoutDayMaxAggregateInputType = {
    id?: true
    workoutPlanId?: true
    dayOfWeek?: true
    muscleGroup?: true
  }

  export type WorkoutDayCountAggregateInputType = {
    id?: true
    workoutPlanId?: true
    dayOfWeek?: true
    muscleGroup?: true
    _all?: true
  }

  export type WorkoutDayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutDay to aggregate.
     */
    where?: WorkoutDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutDays to fetch.
     */
    orderBy?: WorkoutDayOrderByWithRelationInput | WorkoutDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutDays
    **/
    _count?: true | WorkoutDayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutDayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutDaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutDayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutDayMaxAggregateInputType
  }

  export type GetWorkoutDayAggregateType<T extends WorkoutDayAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutDay[P]>
      : GetScalarType<T[P], AggregateWorkoutDay[P]>
  }




  export type WorkoutDayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutDayWhereInput
    orderBy?: WorkoutDayOrderByWithAggregationInput | WorkoutDayOrderByWithAggregationInput[]
    by: WorkoutDayScalarFieldEnum[] | WorkoutDayScalarFieldEnum
    having?: WorkoutDayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutDayCountAggregateInputType | true
    _avg?: WorkoutDayAvgAggregateInputType
    _sum?: WorkoutDaySumAggregateInputType
    _min?: WorkoutDayMinAggregateInputType
    _max?: WorkoutDayMaxAggregateInputType
  }

  export type WorkoutDayGroupByOutputType = {
    id: number
    workoutPlanId: number
    dayOfWeek: string
    muscleGroup: string
    _count: WorkoutDayCountAggregateOutputType | null
    _avg: WorkoutDayAvgAggregateOutputType | null
    _sum: WorkoutDaySumAggregateOutputType | null
    _min: WorkoutDayMinAggregateOutputType | null
    _max: WorkoutDayMaxAggregateOutputType | null
  }

  type GetWorkoutDayGroupByPayload<T extends WorkoutDayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutDayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutDayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutDayGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutDayGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutDaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutPlanId?: boolean
    dayOfWeek?: boolean
    muscleGroup?: boolean
    workoutPlan?: boolean | WorkoutPlanDefaultArgs<ExtArgs>
    exercises?: boolean | WorkoutDay$exercisesArgs<ExtArgs>
    _count?: boolean | WorkoutDayCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutDay"]>

  export type WorkoutDaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutPlanId?: boolean
    dayOfWeek?: boolean
    muscleGroup?: boolean
    workoutPlan?: boolean | WorkoutPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutDay"]>

  export type WorkoutDaySelectScalar = {
    id?: boolean
    workoutPlanId?: boolean
    dayOfWeek?: boolean
    muscleGroup?: boolean
  }

  export type WorkoutDayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutPlan?: boolean | WorkoutPlanDefaultArgs<ExtArgs>
    exercises?: boolean | WorkoutDay$exercisesArgs<ExtArgs>
    _count?: boolean | WorkoutDayCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutDayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutPlan?: boolean | WorkoutPlanDefaultArgs<ExtArgs>
  }

  export type $WorkoutDayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutDay"
    objects: {
      workoutPlan: Prisma.$WorkoutPlanPayload<ExtArgs>
      exercises: Prisma.$WorkoutExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workoutPlanId: number
      dayOfWeek: string
      muscleGroup: string
    }, ExtArgs["result"]["workoutDay"]>
    composites: {}
  }

  type WorkoutDayGetPayload<S extends boolean | null | undefined | WorkoutDayDefaultArgs> = $Result.GetResult<Prisma.$WorkoutDayPayload, S>

  type WorkoutDayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutDayFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutDayCountAggregateInputType | true
    }

  export interface WorkoutDayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutDay'], meta: { name: 'WorkoutDay' } }
    /**
     * Find zero or one WorkoutDay that matches the filter.
     * @param {WorkoutDayFindUniqueArgs} args - Arguments to find a WorkoutDay
     * @example
     * // Get one WorkoutDay
     * const workoutDay = await prisma.workoutDay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutDayFindUniqueArgs>(args: SelectSubset<T, WorkoutDayFindUniqueArgs<ExtArgs>>): Prisma__WorkoutDayClient<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkoutDay that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutDayFindUniqueOrThrowArgs} args - Arguments to find a WorkoutDay
     * @example
     * // Get one WorkoutDay
     * const workoutDay = await prisma.workoutDay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutDayFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutDayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutDayClient<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkoutDay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutDayFindFirstArgs} args - Arguments to find a WorkoutDay
     * @example
     * // Get one WorkoutDay
     * const workoutDay = await prisma.workoutDay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutDayFindFirstArgs>(args?: SelectSubset<T, WorkoutDayFindFirstArgs<ExtArgs>>): Prisma__WorkoutDayClient<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkoutDay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutDayFindFirstOrThrowArgs} args - Arguments to find a WorkoutDay
     * @example
     * // Get one WorkoutDay
     * const workoutDay = await prisma.workoutDay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutDayFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutDayFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutDayClient<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkoutDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutDayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutDays
     * const workoutDays = await prisma.workoutDay.findMany()
     * 
     * // Get first 10 WorkoutDays
     * const workoutDays = await prisma.workoutDay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutDayWithIdOnly = await prisma.workoutDay.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutDayFindManyArgs>(args?: SelectSubset<T, WorkoutDayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkoutDay.
     * @param {WorkoutDayCreateArgs} args - Arguments to create a WorkoutDay.
     * @example
     * // Create one WorkoutDay
     * const WorkoutDay = await prisma.workoutDay.create({
     *   data: {
     *     // ... data to create a WorkoutDay
     *   }
     * })
     * 
     */
    create<T extends WorkoutDayCreateArgs>(args: SelectSubset<T, WorkoutDayCreateArgs<ExtArgs>>): Prisma__WorkoutDayClient<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkoutDays.
     * @param {WorkoutDayCreateManyArgs} args - Arguments to create many WorkoutDays.
     * @example
     * // Create many WorkoutDays
     * const workoutDay = await prisma.workoutDay.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutDayCreateManyArgs>(args?: SelectSubset<T, WorkoutDayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutDays and returns the data saved in the database.
     * @param {WorkoutDayCreateManyAndReturnArgs} args - Arguments to create many WorkoutDays.
     * @example
     * // Create many WorkoutDays
     * const workoutDay = await prisma.workoutDay.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutDays and only return the `id`
     * const workoutDayWithIdOnly = await prisma.workoutDay.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutDayCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutDayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkoutDay.
     * @param {WorkoutDayDeleteArgs} args - Arguments to delete one WorkoutDay.
     * @example
     * // Delete one WorkoutDay
     * const WorkoutDay = await prisma.workoutDay.delete({
     *   where: {
     *     // ... filter to delete one WorkoutDay
     *   }
     * })
     * 
     */
    delete<T extends WorkoutDayDeleteArgs>(args: SelectSubset<T, WorkoutDayDeleteArgs<ExtArgs>>): Prisma__WorkoutDayClient<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkoutDay.
     * @param {WorkoutDayUpdateArgs} args - Arguments to update one WorkoutDay.
     * @example
     * // Update one WorkoutDay
     * const workoutDay = await prisma.workoutDay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutDayUpdateArgs>(args: SelectSubset<T, WorkoutDayUpdateArgs<ExtArgs>>): Prisma__WorkoutDayClient<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkoutDays.
     * @param {WorkoutDayDeleteManyArgs} args - Arguments to filter WorkoutDays to delete.
     * @example
     * // Delete a few WorkoutDays
     * const { count } = await prisma.workoutDay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutDayDeleteManyArgs>(args?: SelectSubset<T, WorkoutDayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutDayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutDays
     * const workoutDay = await prisma.workoutDay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutDayUpdateManyArgs>(args: SelectSubset<T, WorkoutDayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutDay.
     * @param {WorkoutDayUpsertArgs} args - Arguments to update or create a WorkoutDay.
     * @example
     * // Update or create a WorkoutDay
     * const workoutDay = await prisma.workoutDay.upsert({
     *   create: {
     *     // ... data to create a WorkoutDay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutDay we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutDayUpsertArgs>(args: SelectSubset<T, WorkoutDayUpsertArgs<ExtArgs>>): Prisma__WorkoutDayClient<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkoutDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutDayCountArgs} args - Arguments to filter WorkoutDays to count.
     * @example
     * // Count the number of WorkoutDays
     * const count = await prisma.workoutDay.count({
     *   where: {
     *     // ... the filter for the WorkoutDays we want to count
     *   }
     * })
    **/
    count<T extends WorkoutDayCountArgs>(
      args?: Subset<T, WorkoutDayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutDayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutDayAggregateArgs>(args: Subset<T, WorkoutDayAggregateArgs>): Prisma.PrismaPromise<GetWorkoutDayAggregateType<T>>

    /**
     * Group by WorkoutDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutDayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutDayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutDayGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutDayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutDay model
   */
  readonly fields: WorkoutDayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutDay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutDayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutPlan<T extends WorkoutPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutPlanDefaultArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    exercises<T extends WorkoutDay$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDay$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutDay model
   */ 
  interface WorkoutDayFieldRefs {
    readonly id: FieldRef<"WorkoutDay", 'Int'>
    readonly workoutPlanId: FieldRef<"WorkoutDay", 'Int'>
    readonly dayOfWeek: FieldRef<"WorkoutDay", 'String'>
    readonly muscleGroup: FieldRef<"WorkoutDay", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutDay findUnique
   */
  export type WorkoutDayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutDay to fetch.
     */
    where: WorkoutDayWhereUniqueInput
  }

  /**
   * WorkoutDay findUniqueOrThrow
   */
  export type WorkoutDayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutDay to fetch.
     */
    where: WorkoutDayWhereUniqueInput
  }

  /**
   * WorkoutDay findFirst
   */
  export type WorkoutDayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutDay to fetch.
     */
    where?: WorkoutDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutDays to fetch.
     */
    orderBy?: WorkoutDayOrderByWithRelationInput | WorkoutDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutDays.
     */
    cursor?: WorkoutDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutDays.
     */
    distinct?: WorkoutDayScalarFieldEnum | WorkoutDayScalarFieldEnum[]
  }

  /**
   * WorkoutDay findFirstOrThrow
   */
  export type WorkoutDayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutDay to fetch.
     */
    where?: WorkoutDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutDays to fetch.
     */
    orderBy?: WorkoutDayOrderByWithRelationInput | WorkoutDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutDays.
     */
    cursor?: WorkoutDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutDays.
     */
    distinct?: WorkoutDayScalarFieldEnum | WorkoutDayScalarFieldEnum[]
  }

  /**
   * WorkoutDay findMany
   */
  export type WorkoutDayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutDays to fetch.
     */
    where?: WorkoutDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutDays to fetch.
     */
    orderBy?: WorkoutDayOrderByWithRelationInput | WorkoutDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutDays.
     */
    cursor?: WorkoutDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutDays.
     */
    skip?: number
    distinct?: WorkoutDayScalarFieldEnum | WorkoutDayScalarFieldEnum[]
  }

  /**
   * WorkoutDay create
   */
  export type WorkoutDayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutDay.
     */
    data: XOR<WorkoutDayCreateInput, WorkoutDayUncheckedCreateInput>
  }

  /**
   * WorkoutDay createMany
   */
  export type WorkoutDayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutDays.
     */
    data: WorkoutDayCreateManyInput | WorkoutDayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutDay createManyAndReturn
   */
  export type WorkoutDayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkoutDays.
     */
    data: WorkoutDayCreateManyInput | WorkoutDayCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutDay update
   */
  export type WorkoutDayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutDay.
     */
    data: XOR<WorkoutDayUpdateInput, WorkoutDayUncheckedUpdateInput>
    /**
     * Choose, which WorkoutDay to update.
     */
    where: WorkoutDayWhereUniqueInput
  }

  /**
   * WorkoutDay updateMany
   */
  export type WorkoutDayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutDays.
     */
    data: XOR<WorkoutDayUpdateManyMutationInput, WorkoutDayUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutDays to update
     */
    where?: WorkoutDayWhereInput
  }

  /**
   * WorkoutDay upsert
   */
  export type WorkoutDayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutDay to update in case it exists.
     */
    where: WorkoutDayWhereUniqueInput
    /**
     * In case the WorkoutDay found by the `where` argument doesn't exist, create a new WorkoutDay with this data.
     */
    create: XOR<WorkoutDayCreateInput, WorkoutDayUncheckedCreateInput>
    /**
     * In case the WorkoutDay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutDayUpdateInput, WorkoutDayUncheckedUpdateInput>
  }

  /**
   * WorkoutDay delete
   */
  export type WorkoutDayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
    /**
     * Filter which WorkoutDay to delete.
     */
    where: WorkoutDayWhereUniqueInput
  }

  /**
   * WorkoutDay deleteMany
   */
  export type WorkoutDayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutDays to delete
     */
    where?: WorkoutDayWhereInput
  }

  /**
   * WorkoutDay.exercises
   */
  export type WorkoutDay$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    cursor?: WorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutDay without action
   */
  export type WorkoutDayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutDay
     */
    select?: WorkoutDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutDayInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutExercise
   */

  export type AggregateWorkoutExercise = {
    _count: WorkoutExerciseCountAggregateOutputType | null
    _avg: WorkoutExerciseAvgAggregateOutputType | null
    _sum: WorkoutExerciseSumAggregateOutputType | null
    _min: WorkoutExerciseMinAggregateOutputType | null
    _max: WorkoutExerciseMaxAggregateOutputType | null
  }

  export type WorkoutExerciseAvgAggregateOutputType = {
    id: number | null
    workoutDayId: number | null
    order: number | null
  }

  export type WorkoutExerciseSumAggregateOutputType = {
    id: number | null
    workoutDayId: number | null
    order: number | null
  }

  export type WorkoutExerciseMinAggregateOutputType = {
    id: number | null
    workoutDayId: number | null
    name: string | null
    order: number | null
  }

  export type WorkoutExerciseMaxAggregateOutputType = {
    id: number | null
    workoutDayId: number | null
    name: string | null
    order: number | null
  }

  export type WorkoutExerciseCountAggregateOutputType = {
    id: number
    workoutDayId: number
    name: number
    order: number
    _all: number
  }


  export type WorkoutExerciseAvgAggregateInputType = {
    id?: true
    workoutDayId?: true
    order?: true
  }

  export type WorkoutExerciseSumAggregateInputType = {
    id?: true
    workoutDayId?: true
    order?: true
  }

  export type WorkoutExerciseMinAggregateInputType = {
    id?: true
    workoutDayId?: true
    name?: true
    order?: true
  }

  export type WorkoutExerciseMaxAggregateInputType = {
    id?: true
    workoutDayId?: true
    name?: true
    order?: true
  }

  export type WorkoutExerciseCountAggregateInputType = {
    id?: true
    workoutDayId?: true
    name?: true
    order?: true
    _all?: true
  }

  export type WorkoutExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutExercise to aggregate.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutExercises
    **/
    _count?: true | WorkoutExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutExerciseMaxAggregateInputType
  }

  export type GetWorkoutExerciseAggregateType<T extends WorkoutExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutExercise[P]>
      : GetScalarType<T[P], AggregateWorkoutExercise[P]>
  }




  export type WorkoutExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithAggregationInput | WorkoutExerciseOrderByWithAggregationInput[]
    by: WorkoutExerciseScalarFieldEnum[] | WorkoutExerciseScalarFieldEnum
    having?: WorkoutExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutExerciseCountAggregateInputType | true
    _avg?: WorkoutExerciseAvgAggregateInputType
    _sum?: WorkoutExerciseSumAggregateInputType
    _min?: WorkoutExerciseMinAggregateInputType
    _max?: WorkoutExerciseMaxAggregateInputType
  }

  export type WorkoutExerciseGroupByOutputType = {
    id: number
    workoutDayId: number
    name: string
    order: number
    _count: WorkoutExerciseCountAggregateOutputType | null
    _avg: WorkoutExerciseAvgAggregateOutputType | null
    _sum: WorkoutExerciseSumAggregateOutputType | null
    _min: WorkoutExerciseMinAggregateOutputType | null
    _max: WorkoutExerciseMaxAggregateOutputType | null
  }

  type GetWorkoutExerciseGroupByPayload<T extends WorkoutExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutExerciseGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutDayId?: boolean
    name?: boolean
    order?: boolean
    workoutDay?: boolean | WorkoutDayDefaultArgs<ExtArgs>
    sets?: boolean | WorkoutExercise$setsArgs<ExtArgs>
    _count?: boolean | WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutDayId?: boolean
    name?: boolean
    order?: boolean
    workoutDay?: boolean | WorkoutDayDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectScalar = {
    id?: boolean
    workoutDayId?: boolean
    name?: boolean
    order?: boolean
  }

  export type WorkoutExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutDay?: boolean | WorkoutDayDefaultArgs<ExtArgs>
    sets?: boolean | WorkoutExercise$setsArgs<ExtArgs>
    _count?: boolean | WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutDay?: boolean | WorkoutDayDefaultArgs<ExtArgs>
  }

  export type $WorkoutExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutExercise"
    objects: {
      workoutDay: Prisma.$WorkoutDayPayload<ExtArgs>
      sets: Prisma.$WorkoutSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workoutDayId: number
      name: string
      order: number
    }, ExtArgs["result"]["workoutExercise"]>
    composites: {}
  }

  type WorkoutExerciseGetPayload<S extends boolean | null | undefined | WorkoutExerciseDefaultArgs> = $Result.GetResult<Prisma.$WorkoutExercisePayload, S>

  type WorkoutExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutExerciseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutExerciseCountAggregateInputType | true
    }

  export interface WorkoutExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutExercise'], meta: { name: 'WorkoutExercise' } }
    /**
     * Find zero or one WorkoutExercise that matches the filter.
     * @param {WorkoutExerciseFindUniqueArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutExerciseFindUniqueArgs>(args: SelectSubset<T, WorkoutExerciseFindUniqueArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkoutExercise that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutExerciseFindUniqueOrThrowArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkoutExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindFirstArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutExerciseFindFirstArgs>(args?: SelectSubset<T, WorkoutExerciseFindFirstArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkoutExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindFirstOrThrowArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkoutExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutExercises
     * const workoutExercises = await prisma.workoutExercise.findMany()
     * 
     * // Get first 10 WorkoutExercises
     * const workoutExercises = await prisma.workoutExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutExerciseFindManyArgs>(args?: SelectSubset<T, WorkoutExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkoutExercise.
     * @param {WorkoutExerciseCreateArgs} args - Arguments to create a WorkoutExercise.
     * @example
     * // Create one WorkoutExercise
     * const WorkoutExercise = await prisma.workoutExercise.create({
     *   data: {
     *     // ... data to create a WorkoutExercise
     *   }
     * })
     * 
     */
    create<T extends WorkoutExerciseCreateArgs>(args: SelectSubset<T, WorkoutExerciseCreateArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkoutExercises.
     * @param {WorkoutExerciseCreateManyArgs} args - Arguments to create many WorkoutExercises.
     * @example
     * // Create many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutExerciseCreateManyArgs>(args?: SelectSubset<T, WorkoutExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutExercises and returns the data saved in the database.
     * @param {WorkoutExerciseCreateManyAndReturnArgs} args - Arguments to create many WorkoutExercises.
     * @example
     * // Create many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutExercises and only return the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkoutExercise.
     * @param {WorkoutExerciseDeleteArgs} args - Arguments to delete one WorkoutExercise.
     * @example
     * // Delete one WorkoutExercise
     * const WorkoutExercise = await prisma.workoutExercise.delete({
     *   where: {
     *     // ... filter to delete one WorkoutExercise
     *   }
     * })
     * 
     */
    delete<T extends WorkoutExerciseDeleteArgs>(args: SelectSubset<T, WorkoutExerciseDeleteArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkoutExercise.
     * @param {WorkoutExerciseUpdateArgs} args - Arguments to update one WorkoutExercise.
     * @example
     * // Update one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutExerciseUpdateArgs>(args: SelectSubset<T, WorkoutExerciseUpdateArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkoutExercises.
     * @param {WorkoutExerciseDeleteManyArgs} args - Arguments to filter WorkoutExercises to delete.
     * @example
     * // Delete a few WorkoutExercises
     * const { count } = await prisma.workoutExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutExerciseDeleteManyArgs>(args?: SelectSubset<T, WorkoutExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutExerciseUpdateManyArgs>(args: SelectSubset<T, WorkoutExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutExercise.
     * @param {WorkoutExerciseUpsertArgs} args - Arguments to update or create a WorkoutExercise.
     * @example
     * // Update or create a WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.upsert({
     *   create: {
     *     // ... data to create a WorkoutExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutExercise we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutExerciseUpsertArgs>(args: SelectSubset<T, WorkoutExerciseUpsertArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseCountArgs} args - Arguments to filter WorkoutExercises to count.
     * @example
     * // Count the number of WorkoutExercises
     * const count = await prisma.workoutExercise.count({
     *   where: {
     *     // ... the filter for the WorkoutExercises we want to count
     *   }
     * })
    **/
    count<T extends WorkoutExerciseCountArgs>(
      args?: Subset<T, WorkoutExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutExerciseAggregateArgs>(args: Subset<T, WorkoutExerciseAggregateArgs>): Prisma.PrismaPromise<GetWorkoutExerciseAggregateType<T>>

    /**
     * Group by WorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutExerciseGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutExercise model
   */
  readonly fields: WorkoutExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutDay<T extends WorkoutDayDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDayDefaultArgs<ExtArgs>>): Prisma__WorkoutDayClient<$Result.GetResult<Prisma.$WorkoutDayPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sets<T extends WorkoutExercise$setsArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutExercise$setsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutExercise model
   */ 
  interface WorkoutExerciseFieldRefs {
    readonly id: FieldRef<"WorkoutExercise", 'Int'>
    readonly workoutDayId: FieldRef<"WorkoutExercise", 'Int'>
    readonly name: FieldRef<"WorkoutExercise", 'String'>
    readonly order: FieldRef<"WorkoutExercise", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutExercise findUnique
   */
  export type WorkoutExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise findUniqueOrThrow
   */
  export type WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise findFirst
   */
  export type WorkoutExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutExercises.
     */
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise findFirstOrThrow
   */
  export type WorkoutExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutExercises.
     */
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise findMany
   */
  export type WorkoutExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercises to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise create
   */
  export type WorkoutExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutExercise.
     */
    data: XOR<WorkoutExerciseCreateInput, WorkoutExerciseUncheckedCreateInput>
  }

  /**
   * WorkoutExercise createMany
   */
  export type WorkoutExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutExercises.
     */
    data: WorkoutExerciseCreateManyInput | WorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutExercise createManyAndReturn
   */
  export type WorkoutExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkoutExercises.
     */
    data: WorkoutExerciseCreateManyInput | WorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutExercise update
   */
  export type WorkoutExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutExercise.
     */
    data: XOR<WorkoutExerciseUpdateInput, WorkoutExerciseUncheckedUpdateInput>
    /**
     * Choose, which WorkoutExercise to update.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise updateMany
   */
  export type WorkoutExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutExercises.
     */
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutExercises to update
     */
    where?: WorkoutExerciseWhereInput
  }

  /**
   * WorkoutExercise upsert
   */
  export type WorkoutExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutExercise to update in case it exists.
     */
    where: WorkoutExerciseWhereUniqueInput
    /**
     * In case the WorkoutExercise found by the `where` argument doesn't exist, create a new WorkoutExercise with this data.
     */
    create: XOR<WorkoutExerciseCreateInput, WorkoutExerciseUncheckedCreateInput>
    /**
     * In case the WorkoutExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutExerciseUpdateInput, WorkoutExerciseUncheckedUpdateInput>
  }

  /**
   * WorkoutExercise delete
   */
  export type WorkoutExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter which WorkoutExercise to delete.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise deleteMany
   */
  export type WorkoutExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutExercises to delete
     */
    where?: WorkoutExerciseWhereInput
  }

  /**
   * WorkoutExercise.sets
   */
  export type WorkoutExercise$setsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    where?: WorkoutSetWhereInput
    orderBy?: WorkoutSetOrderByWithRelationInput | WorkoutSetOrderByWithRelationInput[]
    cursor?: WorkoutSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutSetScalarFieldEnum | WorkoutSetScalarFieldEnum[]
  }

  /**
   * WorkoutExercise without action
   */
  export type WorkoutExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutSet
   */

  export type AggregateWorkoutSet = {
    _count: WorkoutSetCountAggregateOutputType | null
    _avg: WorkoutSetAvgAggregateOutputType | null
    _sum: WorkoutSetSumAggregateOutputType | null
    _min: WorkoutSetMinAggregateOutputType | null
    _max: WorkoutSetMaxAggregateOutputType | null
  }

  export type WorkoutSetAvgAggregateOutputType = {
    id: number | null
    exerciseId: number | null
    setNumber: number | null
    targetReps: number | null
    targetLoad: number | null
  }

  export type WorkoutSetSumAggregateOutputType = {
    id: number | null
    exerciseId: number | null
    setNumber: number | null
    targetReps: number | null
    targetLoad: number | null
  }

  export type WorkoutSetMinAggregateOutputType = {
    id: number | null
    exerciseId: number | null
    setNumber: number | null
    targetReps: number | null
    targetLoad: number | null
  }

  export type WorkoutSetMaxAggregateOutputType = {
    id: number | null
    exerciseId: number | null
    setNumber: number | null
    targetReps: number | null
    targetLoad: number | null
  }

  export type WorkoutSetCountAggregateOutputType = {
    id: number
    exerciseId: number
    setNumber: number
    targetReps: number
    targetLoad: number
    _all: number
  }


  export type WorkoutSetAvgAggregateInputType = {
    id?: true
    exerciseId?: true
    setNumber?: true
    targetReps?: true
    targetLoad?: true
  }

  export type WorkoutSetSumAggregateInputType = {
    id?: true
    exerciseId?: true
    setNumber?: true
    targetReps?: true
    targetLoad?: true
  }

  export type WorkoutSetMinAggregateInputType = {
    id?: true
    exerciseId?: true
    setNumber?: true
    targetReps?: true
    targetLoad?: true
  }

  export type WorkoutSetMaxAggregateInputType = {
    id?: true
    exerciseId?: true
    setNumber?: true
    targetReps?: true
    targetLoad?: true
  }

  export type WorkoutSetCountAggregateInputType = {
    id?: true
    exerciseId?: true
    setNumber?: true
    targetReps?: true
    targetLoad?: true
    _all?: true
  }

  export type WorkoutSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutSet to aggregate.
     */
    where?: WorkoutSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSets to fetch.
     */
    orderBy?: WorkoutSetOrderByWithRelationInput | WorkoutSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutSets
    **/
    _count?: true | WorkoutSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutSetMaxAggregateInputType
  }

  export type GetWorkoutSetAggregateType<T extends WorkoutSetAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutSet[P]>
      : GetScalarType<T[P], AggregateWorkoutSet[P]>
  }




  export type WorkoutSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSetWhereInput
    orderBy?: WorkoutSetOrderByWithAggregationInput | WorkoutSetOrderByWithAggregationInput[]
    by: WorkoutSetScalarFieldEnum[] | WorkoutSetScalarFieldEnum
    having?: WorkoutSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutSetCountAggregateInputType | true
    _avg?: WorkoutSetAvgAggregateInputType
    _sum?: WorkoutSetSumAggregateInputType
    _min?: WorkoutSetMinAggregateInputType
    _max?: WorkoutSetMaxAggregateInputType
  }

  export type WorkoutSetGroupByOutputType = {
    id: number
    exerciseId: number
    setNumber: number
    targetReps: number
    targetLoad: number
    _count: WorkoutSetCountAggregateOutputType | null
    _avg: WorkoutSetAvgAggregateOutputType | null
    _sum: WorkoutSetSumAggregateOutputType | null
    _min: WorkoutSetMinAggregateOutputType | null
    _max: WorkoutSetMaxAggregateOutputType | null
  }

  type GetWorkoutSetGroupByPayload<T extends WorkoutSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutSetGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutSetGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exerciseId?: boolean
    setNumber?: boolean
    targetReps?: boolean
    targetLoad?: boolean
    exercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    logs?: boolean | WorkoutSet$logsArgs<ExtArgs>
    _count?: boolean | WorkoutSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSet"]>

  export type WorkoutSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exerciseId?: boolean
    setNumber?: boolean
    targetReps?: boolean
    targetLoad?: boolean
    exercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSet"]>

  export type WorkoutSetSelectScalar = {
    id?: boolean
    exerciseId?: boolean
    setNumber?: boolean
    targetReps?: boolean
    targetLoad?: boolean
  }

  export type WorkoutSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    logs?: boolean | WorkoutSet$logsArgs<ExtArgs>
    _count?: boolean | WorkoutSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
  }

  export type $WorkoutSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutSet"
    objects: {
      exercise: Prisma.$WorkoutExercisePayload<ExtArgs>
      logs: Prisma.$WorkoutLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      exerciseId: number
      setNumber: number
      targetReps: number
      targetLoad: number
    }, ExtArgs["result"]["workoutSet"]>
    composites: {}
  }

  type WorkoutSetGetPayload<S extends boolean | null | undefined | WorkoutSetDefaultArgs> = $Result.GetResult<Prisma.$WorkoutSetPayload, S>

  type WorkoutSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutSetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutSetCountAggregateInputType | true
    }

  export interface WorkoutSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutSet'], meta: { name: 'WorkoutSet' } }
    /**
     * Find zero or one WorkoutSet that matches the filter.
     * @param {WorkoutSetFindUniqueArgs} args - Arguments to find a WorkoutSet
     * @example
     * // Get one WorkoutSet
     * const workoutSet = await prisma.workoutSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutSetFindUniqueArgs>(args: SelectSubset<T, WorkoutSetFindUniqueArgs<ExtArgs>>): Prisma__WorkoutSetClient<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkoutSet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutSetFindUniqueOrThrowArgs} args - Arguments to find a WorkoutSet
     * @example
     * // Get one WorkoutSet
     * const workoutSet = await prisma.workoutSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutSetFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutSetClient<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkoutSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSetFindFirstArgs} args - Arguments to find a WorkoutSet
     * @example
     * // Get one WorkoutSet
     * const workoutSet = await prisma.workoutSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutSetFindFirstArgs>(args?: SelectSubset<T, WorkoutSetFindFirstArgs<ExtArgs>>): Prisma__WorkoutSetClient<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkoutSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSetFindFirstOrThrowArgs} args - Arguments to find a WorkoutSet
     * @example
     * // Get one WorkoutSet
     * const workoutSet = await prisma.workoutSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutSetFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutSetClient<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkoutSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutSets
     * const workoutSets = await prisma.workoutSet.findMany()
     * 
     * // Get first 10 WorkoutSets
     * const workoutSets = await prisma.workoutSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutSetWithIdOnly = await prisma.workoutSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutSetFindManyArgs>(args?: SelectSubset<T, WorkoutSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkoutSet.
     * @param {WorkoutSetCreateArgs} args - Arguments to create a WorkoutSet.
     * @example
     * // Create one WorkoutSet
     * const WorkoutSet = await prisma.workoutSet.create({
     *   data: {
     *     // ... data to create a WorkoutSet
     *   }
     * })
     * 
     */
    create<T extends WorkoutSetCreateArgs>(args: SelectSubset<T, WorkoutSetCreateArgs<ExtArgs>>): Prisma__WorkoutSetClient<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkoutSets.
     * @param {WorkoutSetCreateManyArgs} args - Arguments to create many WorkoutSets.
     * @example
     * // Create many WorkoutSets
     * const workoutSet = await prisma.workoutSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutSetCreateManyArgs>(args?: SelectSubset<T, WorkoutSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutSets and returns the data saved in the database.
     * @param {WorkoutSetCreateManyAndReturnArgs} args - Arguments to create many WorkoutSets.
     * @example
     * // Create many WorkoutSets
     * const workoutSet = await prisma.workoutSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutSets and only return the `id`
     * const workoutSetWithIdOnly = await prisma.workoutSet.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutSetCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkoutSet.
     * @param {WorkoutSetDeleteArgs} args - Arguments to delete one WorkoutSet.
     * @example
     * // Delete one WorkoutSet
     * const WorkoutSet = await prisma.workoutSet.delete({
     *   where: {
     *     // ... filter to delete one WorkoutSet
     *   }
     * })
     * 
     */
    delete<T extends WorkoutSetDeleteArgs>(args: SelectSubset<T, WorkoutSetDeleteArgs<ExtArgs>>): Prisma__WorkoutSetClient<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkoutSet.
     * @param {WorkoutSetUpdateArgs} args - Arguments to update one WorkoutSet.
     * @example
     * // Update one WorkoutSet
     * const workoutSet = await prisma.workoutSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutSetUpdateArgs>(args: SelectSubset<T, WorkoutSetUpdateArgs<ExtArgs>>): Prisma__WorkoutSetClient<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkoutSets.
     * @param {WorkoutSetDeleteManyArgs} args - Arguments to filter WorkoutSets to delete.
     * @example
     * // Delete a few WorkoutSets
     * const { count } = await prisma.workoutSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutSetDeleteManyArgs>(args?: SelectSubset<T, WorkoutSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutSets
     * const workoutSet = await prisma.workoutSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutSetUpdateManyArgs>(args: SelectSubset<T, WorkoutSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutSet.
     * @param {WorkoutSetUpsertArgs} args - Arguments to update or create a WorkoutSet.
     * @example
     * // Update or create a WorkoutSet
     * const workoutSet = await prisma.workoutSet.upsert({
     *   create: {
     *     // ... data to create a WorkoutSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutSet we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutSetUpsertArgs>(args: SelectSubset<T, WorkoutSetUpsertArgs<ExtArgs>>): Prisma__WorkoutSetClient<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkoutSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSetCountArgs} args - Arguments to filter WorkoutSets to count.
     * @example
     * // Count the number of WorkoutSets
     * const count = await prisma.workoutSet.count({
     *   where: {
     *     // ... the filter for the WorkoutSets we want to count
     *   }
     * })
    **/
    count<T extends WorkoutSetCountArgs>(
      args?: Subset<T, WorkoutSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutSetAggregateArgs>(args: Subset<T, WorkoutSetAggregateArgs>): Prisma.PrismaPromise<GetWorkoutSetAggregateType<T>>

    /**
     * Group by WorkoutSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutSetGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutSet model
   */
  readonly fields: WorkoutSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends WorkoutExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutExerciseDefaultArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    logs<T extends WorkoutSet$logsArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutSet$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutSet model
   */ 
  interface WorkoutSetFieldRefs {
    readonly id: FieldRef<"WorkoutSet", 'Int'>
    readonly exerciseId: FieldRef<"WorkoutSet", 'Int'>
    readonly setNumber: FieldRef<"WorkoutSet", 'Int'>
    readonly targetReps: FieldRef<"WorkoutSet", 'Int'>
    readonly targetLoad: FieldRef<"WorkoutSet", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutSet findUnique
   */
  export type WorkoutSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSet to fetch.
     */
    where: WorkoutSetWhereUniqueInput
  }

  /**
   * WorkoutSet findUniqueOrThrow
   */
  export type WorkoutSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSet to fetch.
     */
    where: WorkoutSetWhereUniqueInput
  }

  /**
   * WorkoutSet findFirst
   */
  export type WorkoutSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSet to fetch.
     */
    where?: WorkoutSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSets to fetch.
     */
    orderBy?: WorkoutSetOrderByWithRelationInput | WorkoutSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutSets.
     */
    cursor?: WorkoutSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutSets.
     */
    distinct?: WorkoutSetScalarFieldEnum | WorkoutSetScalarFieldEnum[]
  }

  /**
   * WorkoutSet findFirstOrThrow
   */
  export type WorkoutSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSet to fetch.
     */
    where?: WorkoutSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSets to fetch.
     */
    orderBy?: WorkoutSetOrderByWithRelationInput | WorkoutSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutSets.
     */
    cursor?: WorkoutSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutSets.
     */
    distinct?: WorkoutSetScalarFieldEnum | WorkoutSetScalarFieldEnum[]
  }

  /**
   * WorkoutSet findMany
   */
  export type WorkoutSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSets to fetch.
     */
    where?: WorkoutSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSets to fetch.
     */
    orderBy?: WorkoutSetOrderByWithRelationInput | WorkoutSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutSets.
     */
    cursor?: WorkoutSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSets.
     */
    skip?: number
    distinct?: WorkoutSetScalarFieldEnum | WorkoutSetScalarFieldEnum[]
  }

  /**
   * WorkoutSet create
   */
  export type WorkoutSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutSet.
     */
    data: XOR<WorkoutSetCreateInput, WorkoutSetUncheckedCreateInput>
  }

  /**
   * WorkoutSet createMany
   */
  export type WorkoutSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutSets.
     */
    data: WorkoutSetCreateManyInput | WorkoutSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutSet createManyAndReturn
   */
  export type WorkoutSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkoutSets.
     */
    data: WorkoutSetCreateManyInput | WorkoutSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutSet update
   */
  export type WorkoutSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutSet.
     */
    data: XOR<WorkoutSetUpdateInput, WorkoutSetUncheckedUpdateInput>
    /**
     * Choose, which WorkoutSet to update.
     */
    where: WorkoutSetWhereUniqueInput
  }

  /**
   * WorkoutSet updateMany
   */
  export type WorkoutSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutSets.
     */
    data: XOR<WorkoutSetUpdateManyMutationInput, WorkoutSetUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutSets to update
     */
    where?: WorkoutSetWhereInput
  }

  /**
   * WorkoutSet upsert
   */
  export type WorkoutSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutSet to update in case it exists.
     */
    where: WorkoutSetWhereUniqueInput
    /**
     * In case the WorkoutSet found by the `where` argument doesn't exist, create a new WorkoutSet with this data.
     */
    create: XOR<WorkoutSetCreateInput, WorkoutSetUncheckedCreateInput>
    /**
     * In case the WorkoutSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutSetUpdateInput, WorkoutSetUncheckedUpdateInput>
  }

  /**
   * WorkoutSet delete
   */
  export type WorkoutSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
    /**
     * Filter which WorkoutSet to delete.
     */
    where: WorkoutSetWhereUniqueInput
  }

  /**
   * WorkoutSet deleteMany
   */
  export type WorkoutSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutSets to delete
     */
    where?: WorkoutSetWhereInput
  }

  /**
   * WorkoutSet.logs
   */
  export type WorkoutSet$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    where?: WorkoutLogWhereInput
    orderBy?: WorkoutLogOrderByWithRelationInput | WorkoutLogOrderByWithRelationInput[]
    cursor?: WorkoutLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutLogScalarFieldEnum | WorkoutLogScalarFieldEnum[]
  }

  /**
   * WorkoutSet without action
   */
  export type WorkoutSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSet
     */
    select?: WorkoutSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSetInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutLog
   */

  export type AggregateWorkoutLog = {
    _count: WorkoutLogCountAggregateOutputType | null
    _avg: WorkoutLogAvgAggregateOutputType | null
    _sum: WorkoutLogSumAggregateOutputType | null
    _min: WorkoutLogMinAggregateOutputType | null
    _max: WorkoutLogMaxAggregateOutputType | null
  }

  export type WorkoutLogAvgAggregateOutputType = {
    id: number | null
    workoutSetId: number | null
    actualReps: number | null
    actualLoad: number | null
  }

  export type WorkoutLogSumAggregateOutputType = {
    id: number | null
    workoutSetId: number | null
    actualReps: number | null
    actualLoad: number | null
  }

  export type WorkoutLogMinAggregateOutputType = {
    id: number | null
    workoutSetId: number | null
    date: Date | null
    actualReps: number | null
    actualLoad: number | null
  }

  export type WorkoutLogMaxAggregateOutputType = {
    id: number | null
    workoutSetId: number | null
    date: Date | null
    actualReps: number | null
    actualLoad: number | null
  }

  export type WorkoutLogCountAggregateOutputType = {
    id: number
    workoutSetId: number
    date: number
    actualReps: number
    actualLoad: number
    _all: number
  }


  export type WorkoutLogAvgAggregateInputType = {
    id?: true
    workoutSetId?: true
    actualReps?: true
    actualLoad?: true
  }

  export type WorkoutLogSumAggregateInputType = {
    id?: true
    workoutSetId?: true
    actualReps?: true
    actualLoad?: true
  }

  export type WorkoutLogMinAggregateInputType = {
    id?: true
    workoutSetId?: true
    date?: true
    actualReps?: true
    actualLoad?: true
  }

  export type WorkoutLogMaxAggregateInputType = {
    id?: true
    workoutSetId?: true
    date?: true
    actualReps?: true
    actualLoad?: true
  }

  export type WorkoutLogCountAggregateInputType = {
    id?: true
    workoutSetId?: true
    date?: true
    actualReps?: true
    actualLoad?: true
    _all?: true
  }

  export type WorkoutLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutLog to aggregate.
     */
    where?: WorkoutLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutLogs to fetch.
     */
    orderBy?: WorkoutLogOrderByWithRelationInput | WorkoutLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutLogs
    **/
    _count?: true | WorkoutLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutLogMaxAggregateInputType
  }

  export type GetWorkoutLogAggregateType<T extends WorkoutLogAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutLog[P]>
      : GetScalarType<T[P], AggregateWorkoutLog[P]>
  }




  export type WorkoutLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutLogWhereInput
    orderBy?: WorkoutLogOrderByWithAggregationInput | WorkoutLogOrderByWithAggregationInput[]
    by: WorkoutLogScalarFieldEnum[] | WorkoutLogScalarFieldEnum
    having?: WorkoutLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutLogCountAggregateInputType | true
    _avg?: WorkoutLogAvgAggregateInputType
    _sum?: WorkoutLogSumAggregateInputType
    _min?: WorkoutLogMinAggregateInputType
    _max?: WorkoutLogMaxAggregateInputType
  }

  export type WorkoutLogGroupByOutputType = {
    id: number
    workoutSetId: number
    date: Date
    actualReps: number
    actualLoad: number
    _count: WorkoutLogCountAggregateOutputType | null
    _avg: WorkoutLogAvgAggregateOutputType | null
    _sum: WorkoutLogSumAggregateOutputType | null
    _min: WorkoutLogMinAggregateOutputType | null
    _max: WorkoutLogMaxAggregateOutputType | null
  }

  type GetWorkoutLogGroupByPayload<T extends WorkoutLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutLogGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutLogGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutSetId?: boolean
    date?: boolean
    actualReps?: boolean
    actualLoad?: boolean
    workoutSet?: boolean | WorkoutSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutLog"]>

  export type WorkoutLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutSetId?: boolean
    date?: boolean
    actualReps?: boolean
    actualLoad?: boolean
    workoutSet?: boolean | WorkoutSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutLog"]>

  export type WorkoutLogSelectScalar = {
    id?: boolean
    workoutSetId?: boolean
    date?: boolean
    actualReps?: boolean
    actualLoad?: boolean
  }

  export type WorkoutLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutSet?: boolean | WorkoutSetDefaultArgs<ExtArgs>
  }
  export type WorkoutLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutSet?: boolean | WorkoutSetDefaultArgs<ExtArgs>
  }

  export type $WorkoutLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutLog"
    objects: {
      workoutSet: Prisma.$WorkoutSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workoutSetId: number
      date: Date
      actualReps: number
      actualLoad: number
    }, ExtArgs["result"]["workoutLog"]>
    composites: {}
  }

  type WorkoutLogGetPayload<S extends boolean | null | undefined | WorkoutLogDefaultArgs> = $Result.GetResult<Prisma.$WorkoutLogPayload, S>

  type WorkoutLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutLogCountAggregateInputType | true
    }

  export interface WorkoutLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutLog'], meta: { name: 'WorkoutLog' } }
    /**
     * Find zero or one WorkoutLog that matches the filter.
     * @param {WorkoutLogFindUniqueArgs} args - Arguments to find a WorkoutLog
     * @example
     * // Get one WorkoutLog
     * const workoutLog = await prisma.workoutLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutLogFindUniqueArgs>(args: SelectSubset<T, WorkoutLogFindUniqueArgs<ExtArgs>>): Prisma__WorkoutLogClient<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkoutLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutLogFindUniqueOrThrowArgs} args - Arguments to find a WorkoutLog
     * @example
     * // Get one WorkoutLog
     * const workoutLog = await prisma.workoutLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutLogFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutLogClient<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkoutLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutLogFindFirstArgs} args - Arguments to find a WorkoutLog
     * @example
     * // Get one WorkoutLog
     * const workoutLog = await prisma.workoutLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutLogFindFirstArgs>(args?: SelectSubset<T, WorkoutLogFindFirstArgs<ExtArgs>>): Prisma__WorkoutLogClient<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkoutLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutLogFindFirstOrThrowArgs} args - Arguments to find a WorkoutLog
     * @example
     * // Get one WorkoutLog
     * const workoutLog = await prisma.workoutLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutLogFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutLogClient<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkoutLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutLogs
     * const workoutLogs = await prisma.workoutLog.findMany()
     * 
     * // Get first 10 WorkoutLogs
     * const workoutLogs = await prisma.workoutLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutLogWithIdOnly = await prisma.workoutLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutLogFindManyArgs>(args?: SelectSubset<T, WorkoutLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkoutLog.
     * @param {WorkoutLogCreateArgs} args - Arguments to create a WorkoutLog.
     * @example
     * // Create one WorkoutLog
     * const WorkoutLog = await prisma.workoutLog.create({
     *   data: {
     *     // ... data to create a WorkoutLog
     *   }
     * })
     * 
     */
    create<T extends WorkoutLogCreateArgs>(args: SelectSubset<T, WorkoutLogCreateArgs<ExtArgs>>): Prisma__WorkoutLogClient<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkoutLogs.
     * @param {WorkoutLogCreateManyArgs} args - Arguments to create many WorkoutLogs.
     * @example
     * // Create many WorkoutLogs
     * const workoutLog = await prisma.workoutLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutLogCreateManyArgs>(args?: SelectSubset<T, WorkoutLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutLogs and returns the data saved in the database.
     * @param {WorkoutLogCreateManyAndReturnArgs} args - Arguments to create many WorkoutLogs.
     * @example
     * // Create many WorkoutLogs
     * const workoutLog = await prisma.workoutLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutLogs and only return the `id`
     * const workoutLogWithIdOnly = await prisma.workoutLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutLogCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkoutLog.
     * @param {WorkoutLogDeleteArgs} args - Arguments to delete one WorkoutLog.
     * @example
     * // Delete one WorkoutLog
     * const WorkoutLog = await prisma.workoutLog.delete({
     *   where: {
     *     // ... filter to delete one WorkoutLog
     *   }
     * })
     * 
     */
    delete<T extends WorkoutLogDeleteArgs>(args: SelectSubset<T, WorkoutLogDeleteArgs<ExtArgs>>): Prisma__WorkoutLogClient<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkoutLog.
     * @param {WorkoutLogUpdateArgs} args - Arguments to update one WorkoutLog.
     * @example
     * // Update one WorkoutLog
     * const workoutLog = await prisma.workoutLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutLogUpdateArgs>(args: SelectSubset<T, WorkoutLogUpdateArgs<ExtArgs>>): Prisma__WorkoutLogClient<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkoutLogs.
     * @param {WorkoutLogDeleteManyArgs} args - Arguments to filter WorkoutLogs to delete.
     * @example
     * // Delete a few WorkoutLogs
     * const { count } = await prisma.workoutLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutLogDeleteManyArgs>(args?: SelectSubset<T, WorkoutLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutLogs
     * const workoutLog = await prisma.workoutLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutLogUpdateManyArgs>(args: SelectSubset<T, WorkoutLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutLog.
     * @param {WorkoutLogUpsertArgs} args - Arguments to update or create a WorkoutLog.
     * @example
     * // Update or create a WorkoutLog
     * const workoutLog = await prisma.workoutLog.upsert({
     *   create: {
     *     // ... data to create a WorkoutLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutLog we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutLogUpsertArgs>(args: SelectSubset<T, WorkoutLogUpsertArgs<ExtArgs>>): Prisma__WorkoutLogClient<$Result.GetResult<Prisma.$WorkoutLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkoutLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutLogCountArgs} args - Arguments to filter WorkoutLogs to count.
     * @example
     * // Count the number of WorkoutLogs
     * const count = await prisma.workoutLog.count({
     *   where: {
     *     // ... the filter for the WorkoutLogs we want to count
     *   }
     * })
    **/
    count<T extends WorkoutLogCountArgs>(
      args?: Subset<T, WorkoutLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutLogAggregateArgs>(args: Subset<T, WorkoutLogAggregateArgs>): Prisma.PrismaPromise<GetWorkoutLogAggregateType<T>>

    /**
     * Group by WorkoutLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutLogGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutLog model
   */
  readonly fields: WorkoutLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutSet<T extends WorkoutSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutSetDefaultArgs<ExtArgs>>): Prisma__WorkoutSetClient<$Result.GetResult<Prisma.$WorkoutSetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutLog model
   */ 
  interface WorkoutLogFieldRefs {
    readonly id: FieldRef<"WorkoutLog", 'Int'>
    readonly workoutSetId: FieldRef<"WorkoutLog", 'Int'>
    readonly date: FieldRef<"WorkoutLog", 'DateTime'>
    readonly actualReps: FieldRef<"WorkoutLog", 'Int'>
    readonly actualLoad: FieldRef<"WorkoutLog", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutLog findUnique
   */
  export type WorkoutLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutLog to fetch.
     */
    where: WorkoutLogWhereUniqueInput
  }

  /**
   * WorkoutLog findUniqueOrThrow
   */
  export type WorkoutLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutLog to fetch.
     */
    where: WorkoutLogWhereUniqueInput
  }

  /**
   * WorkoutLog findFirst
   */
  export type WorkoutLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutLog to fetch.
     */
    where?: WorkoutLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutLogs to fetch.
     */
    orderBy?: WorkoutLogOrderByWithRelationInput | WorkoutLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutLogs.
     */
    cursor?: WorkoutLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutLogs.
     */
    distinct?: WorkoutLogScalarFieldEnum | WorkoutLogScalarFieldEnum[]
  }

  /**
   * WorkoutLog findFirstOrThrow
   */
  export type WorkoutLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutLog to fetch.
     */
    where?: WorkoutLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutLogs to fetch.
     */
    orderBy?: WorkoutLogOrderByWithRelationInput | WorkoutLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutLogs.
     */
    cursor?: WorkoutLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutLogs.
     */
    distinct?: WorkoutLogScalarFieldEnum | WorkoutLogScalarFieldEnum[]
  }

  /**
   * WorkoutLog findMany
   */
  export type WorkoutLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutLogs to fetch.
     */
    where?: WorkoutLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutLogs to fetch.
     */
    orderBy?: WorkoutLogOrderByWithRelationInput | WorkoutLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutLogs.
     */
    cursor?: WorkoutLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutLogs.
     */
    skip?: number
    distinct?: WorkoutLogScalarFieldEnum | WorkoutLogScalarFieldEnum[]
  }

  /**
   * WorkoutLog create
   */
  export type WorkoutLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutLog.
     */
    data: XOR<WorkoutLogCreateInput, WorkoutLogUncheckedCreateInput>
  }

  /**
   * WorkoutLog createMany
   */
  export type WorkoutLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutLogs.
     */
    data: WorkoutLogCreateManyInput | WorkoutLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutLog createManyAndReturn
   */
  export type WorkoutLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkoutLogs.
     */
    data: WorkoutLogCreateManyInput | WorkoutLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutLog update
   */
  export type WorkoutLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutLog.
     */
    data: XOR<WorkoutLogUpdateInput, WorkoutLogUncheckedUpdateInput>
    /**
     * Choose, which WorkoutLog to update.
     */
    where: WorkoutLogWhereUniqueInput
  }

  /**
   * WorkoutLog updateMany
   */
  export type WorkoutLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutLogs.
     */
    data: XOR<WorkoutLogUpdateManyMutationInput, WorkoutLogUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutLogs to update
     */
    where?: WorkoutLogWhereInput
  }

  /**
   * WorkoutLog upsert
   */
  export type WorkoutLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutLog to update in case it exists.
     */
    where: WorkoutLogWhereUniqueInput
    /**
     * In case the WorkoutLog found by the `where` argument doesn't exist, create a new WorkoutLog with this data.
     */
    create: XOR<WorkoutLogCreateInput, WorkoutLogUncheckedCreateInput>
    /**
     * In case the WorkoutLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutLogUpdateInput, WorkoutLogUncheckedUpdateInput>
  }

  /**
   * WorkoutLog delete
   */
  export type WorkoutLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
    /**
     * Filter which WorkoutLog to delete.
     */
    where: WorkoutLogWhereUniqueInput
  }

  /**
   * WorkoutLog deleteMany
   */
  export type WorkoutLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutLogs to delete
     */
    where?: WorkoutLogWhereInput
  }

  /**
   * WorkoutLog without action
   */
  export type WorkoutLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutLog
     */
    select?: WorkoutLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutLogInclude<ExtArgs> | null
  }


  /**
   * Model MealPlan
   */

  export type AggregateMealPlan = {
    _count: MealPlanCountAggregateOutputType | null
    _avg: MealPlanAvgAggregateOutputType | null
    _sum: MealPlanSumAggregateOutputType | null
    _min: MealPlanMinAggregateOutputType | null
    _max: MealPlanMaxAggregateOutputType | null
  }

  export type MealPlanAvgAggregateOutputType = {
    id: number | null
    nutritionistId: number | null
    patientId: number | null
  }

  export type MealPlanSumAggregateOutputType = {
    id: number | null
    nutritionistId: number | null
    patientId: number | null
  }

  export type MealPlanMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    observations: string | null
    validFrom: Date | null
    validUntil: Date | null
    isActive: boolean | null
    createdAt: Date | null
    nutritionistId: number | null
    patientId: number | null
  }

  export type MealPlanMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    observations: string | null
    validFrom: Date | null
    validUntil: Date | null
    isActive: boolean | null
    createdAt: Date | null
    nutritionistId: number | null
    patientId: number | null
  }

  export type MealPlanCountAggregateOutputType = {
    id: number
    title: number
    description: number
    observations: number
    validFrom: number
    validUntil: number
    isActive: number
    createdAt: number
    nutritionistId: number
    patientId: number
    _all: number
  }


  export type MealPlanAvgAggregateInputType = {
    id?: true
    nutritionistId?: true
    patientId?: true
  }

  export type MealPlanSumAggregateInputType = {
    id?: true
    nutritionistId?: true
    patientId?: true
  }

  export type MealPlanMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    observations?: true
    validFrom?: true
    validUntil?: true
    isActive?: true
    createdAt?: true
    nutritionistId?: true
    patientId?: true
  }

  export type MealPlanMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    observations?: true
    validFrom?: true
    validUntil?: true
    isActive?: true
    createdAt?: true
    nutritionistId?: true
    patientId?: true
  }

  export type MealPlanCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    observations?: true
    validFrom?: true
    validUntil?: true
    isActive?: true
    createdAt?: true
    nutritionistId?: true
    patientId?: true
    _all?: true
  }

  export type MealPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealPlan to aggregate.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealPlans
    **/
    _count?: true | MealPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MealPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MealPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealPlanMaxAggregateInputType
  }

  export type GetMealPlanAggregateType<T extends MealPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateMealPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealPlan[P]>
      : GetScalarType<T[P], AggregateMealPlan[P]>
  }




  export type MealPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanWhereInput
    orderBy?: MealPlanOrderByWithAggregationInput | MealPlanOrderByWithAggregationInput[]
    by: MealPlanScalarFieldEnum[] | MealPlanScalarFieldEnum
    having?: MealPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealPlanCountAggregateInputType | true
    _avg?: MealPlanAvgAggregateInputType
    _sum?: MealPlanSumAggregateInputType
    _min?: MealPlanMinAggregateInputType
    _max?: MealPlanMaxAggregateInputType
  }

  export type MealPlanGroupByOutputType = {
    id: number
    title: string
    description: string
    observations: string | null
    validFrom: Date
    validUntil: Date
    isActive: boolean
    createdAt: Date
    nutritionistId: number
    patientId: number
    _count: MealPlanCountAggregateOutputType | null
    _avg: MealPlanAvgAggregateOutputType | null
    _sum: MealPlanSumAggregateOutputType | null
    _min: MealPlanMinAggregateOutputType | null
    _max: MealPlanMaxAggregateOutputType | null
  }

  type GetMealPlanGroupByPayload<T extends MealPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealPlanGroupByOutputType[P]>
            : GetScalarType<T[P], MealPlanGroupByOutputType[P]>
        }
      >
    >


  export type MealPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    observations?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    createdAt?: boolean
    nutritionistId?: boolean
    patientId?: boolean
    nutritionist?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
    meals?: boolean | MealPlan$mealsArgs<ExtArgs>
    _count?: boolean | MealPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlan"]>

  export type MealPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    observations?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    createdAt?: boolean
    nutritionistId?: boolean
    patientId?: boolean
    nutritionist?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlan"]>

  export type MealPlanSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    observations?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    createdAt?: boolean
    nutritionistId?: boolean
    patientId?: boolean
  }

  export type MealPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nutritionist?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
    meals?: boolean | MealPlan$mealsArgs<ExtArgs>
    _count?: boolean | MealPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MealPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nutritionist?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MealPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealPlan"
    objects: {
      nutritionist: Prisma.$UserPayload<ExtArgs>
      patient: Prisma.$UserPayload<ExtArgs>
      meals: Prisma.$MealPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      observations: string | null
      validFrom: Date
      validUntil: Date
      isActive: boolean
      createdAt: Date
      nutritionistId: number
      patientId: number
    }, ExtArgs["result"]["mealPlan"]>
    composites: {}
  }

  type MealPlanGetPayload<S extends boolean | null | undefined | MealPlanDefaultArgs> = $Result.GetResult<Prisma.$MealPlanPayload, S>

  type MealPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealPlanCountAggregateInputType | true
    }

  export interface MealPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealPlan'], meta: { name: 'MealPlan' } }
    /**
     * Find zero or one MealPlan that matches the filter.
     * @param {MealPlanFindUniqueArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealPlanFindUniqueArgs>(args: SelectSubset<T, MealPlanFindUniqueArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MealPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealPlanFindUniqueOrThrowArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, MealPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MealPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanFindFirstArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealPlanFindFirstArgs>(args?: SelectSubset<T, MealPlanFindFirstArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MealPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanFindFirstOrThrowArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, MealPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MealPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealPlans
     * const mealPlans = await prisma.mealPlan.findMany()
     * 
     * // Get first 10 MealPlans
     * const mealPlans = await prisma.mealPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealPlanWithIdOnly = await prisma.mealPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealPlanFindManyArgs>(args?: SelectSubset<T, MealPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MealPlan.
     * @param {MealPlanCreateArgs} args - Arguments to create a MealPlan.
     * @example
     * // Create one MealPlan
     * const MealPlan = await prisma.mealPlan.create({
     *   data: {
     *     // ... data to create a MealPlan
     *   }
     * })
     * 
     */
    create<T extends MealPlanCreateArgs>(args: SelectSubset<T, MealPlanCreateArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MealPlans.
     * @param {MealPlanCreateManyArgs} args - Arguments to create many MealPlans.
     * @example
     * // Create many MealPlans
     * const mealPlan = await prisma.mealPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealPlanCreateManyArgs>(args?: SelectSubset<T, MealPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealPlans and returns the data saved in the database.
     * @param {MealPlanCreateManyAndReturnArgs} args - Arguments to create many MealPlans.
     * @example
     * // Create many MealPlans
     * const mealPlan = await prisma.mealPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealPlans and only return the `id`
     * const mealPlanWithIdOnly = await prisma.mealPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, MealPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MealPlan.
     * @param {MealPlanDeleteArgs} args - Arguments to delete one MealPlan.
     * @example
     * // Delete one MealPlan
     * const MealPlan = await prisma.mealPlan.delete({
     *   where: {
     *     // ... filter to delete one MealPlan
     *   }
     * })
     * 
     */
    delete<T extends MealPlanDeleteArgs>(args: SelectSubset<T, MealPlanDeleteArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MealPlan.
     * @param {MealPlanUpdateArgs} args - Arguments to update one MealPlan.
     * @example
     * // Update one MealPlan
     * const mealPlan = await prisma.mealPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealPlanUpdateArgs>(args: SelectSubset<T, MealPlanUpdateArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MealPlans.
     * @param {MealPlanDeleteManyArgs} args - Arguments to filter MealPlans to delete.
     * @example
     * // Delete a few MealPlans
     * const { count } = await prisma.mealPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealPlanDeleteManyArgs>(args?: SelectSubset<T, MealPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealPlans
     * const mealPlan = await prisma.mealPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealPlanUpdateManyArgs>(args: SelectSubset<T, MealPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MealPlan.
     * @param {MealPlanUpsertArgs} args - Arguments to update or create a MealPlan.
     * @example
     * // Update or create a MealPlan
     * const mealPlan = await prisma.mealPlan.upsert({
     *   create: {
     *     // ... data to create a MealPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealPlan we want to update
     *   }
     * })
     */
    upsert<T extends MealPlanUpsertArgs>(args: SelectSubset<T, MealPlanUpsertArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MealPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanCountArgs} args - Arguments to filter MealPlans to count.
     * @example
     * // Count the number of MealPlans
     * const count = await prisma.mealPlan.count({
     *   where: {
     *     // ... the filter for the MealPlans we want to count
     *   }
     * })
    **/
    count<T extends MealPlanCountArgs>(
      args?: Subset<T, MealPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealPlanAggregateArgs>(args: Subset<T, MealPlanAggregateArgs>): Prisma.PrismaPromise<GetMealPlanAggregateType<T>>

    /**
     * Group by MealPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealPlanGroupByArgs['orderBy'] }
        : { orderBy?: MealPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealPlan model
   */
  readonly fields: MealPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nutritionist<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    meals<T extends MealPlan$mealsArgs<ExtArgs> = {}>(args?: Subset<T, MealPlan$mealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealPlan model
   */ 
  interface MealPlanFieldRefs {
    readonly id: FieldRef<"MealPlan", 'Int'>
    readonly title: FieldRef<"MealPlan", 'String'>
    readonly description: FieldRef<"MealPlan", 'String'>
    readonly observations: FieldRef<"MealPlan", 'String'>
    readonly validFrom: FieldRef<"MealPlan", 'DateTime'>
    readonly validUntil: FieldRef<"MealPlan", 'DateTime'>
    readonly isActive: FieldRef<"MealPlan", 'Boolean'>
    readonly createdAt: FieldRef<"MealPlan", 'DateTime'>
    readonly nutritionistId: FieldRef<"MealPlan", 'Int'>
    readonly patientId: FieldRef<"MealPlan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MealPlan findUnique
   */
  export type MealPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan findUniqueOrThrow
   */
  export type MealPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan findFirst
   */
  export type MealPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealPlans.
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealPlans.
     */
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * MealPlan findFirstOrThrow
   */
  export type MealPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealPlans.
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealPlans.
     */
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * MealPlan findMany
   */
  export type MealPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlans to fetch.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealPlans.
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * MealPlan create
   */
  export type MealPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a MealPlan.
     */
    data: XOR<MealPlanCreateInput, MealPlanUncheckedCreateInput>
  }

  /**
   * MealPlan createMany
   */
  export type MealPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealPlans.
     */
    data: MealPlanCreateManyInput | MealPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealPlan createManyAndReturn
   */
  export type MealPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MealPlans.
     */
    data: MealPlanCreateManyInput | MealPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealPlan update
   */
  export type MealPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a MealPlan.
     */
    data: XOR<MealPlanUpdateInput, MealPlanUncheckedUpdateInput>
    /**
     * Choose, which MealPlan to update.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan updateMany
   */
  export type MealPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealPlans.
     */
    data: XOR<MealPlanUpdateManyMutationInput, MealPlanUncheckedUpdateManyInput>
    /**
     * Filter which MealPlans to update
     */
    where?: MealPlanWhereInput
  }

  /**
   * MealPlan upsert
   */
  export type MealPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the MealPlan to update in case it exists.
     */
    where: MealPlanWhereUniqueInput
    /**
     * In case the MealPlan found by the `where` argument doesn't exist, create a new MealPlan with this data.
     */
    create: XOR<MealPlanCreateInput, MealPlanUncheckedCreateInput>
    /**
     * In case the MealPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealPlanUpdateInput, MealPlanUncheckedUpdateInput>
  }

  /**
   * MealPlan delete
   */
  export type MealPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter which MealPlan to delete.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan deleteMany
   */
  export type MealPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealPlans to delete
     */
    where?: MealPlanWhereInput
  }

  /**
   * MealPlan.meals
   */
  export type MealPlan$mealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    where?: MealWhereInput
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    cursor?: MealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
  }

  /**
   * MealPlan without action
   */
  export type MealPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
  }


  /**
   * Model Meal
   */

  export type AggregateMeal = {
    _count: MealCountAggregateOutputType | null
    _avg: MealAvgAggregateOutputType | null
    _sum: MealSumAggregateOutputType | null
    _min: MealMinAggregateOutputType | null
    _max: MealMaxAggregateOutputType | null
  }

  export type MealAvgAggregateOutputType = {
    id: number | null
    mealPlanId: number | null
    order: number | null
  }

  export type MealSumAggregateOutputType = {
    id: number | null
    mealPlanId: number | null
    order: number | null
  }

  export type MealMinAggregateOutputType = {
    id: number | null
    mealPlanId: number | null
    name: string | null
    order: number | null
  }

  export type MealMaxAggregateOutputType = {
    id: number | null
    mealPlanId: number | null
    name: string | null
    order: number | null
  }

  export type MealCountAggregateOutputType = {
    id: number
    mealPlanId: number
    name: number
    order: number
    _all: number
  }


  export type MealAvgAggregateInputType = {
    id?: true
    mealPlanId?: true
    order?: true
  }

  export type MealSumAggregateInputType = {
    id?: true
    mealPlanId?: true
    order?: true
  }

  export type MealMinAggregateInputType = {
    id?: true
    mealPlanId?: true
    name?: true
    order?: true
  }

  export type MealMaxAggregateInputType = {
    id?: true
    mealPlanId?: true
    name?: true
    order?: true
  }

  export type MealCountAggregateInputType = {
    id?: true
    mealPlanId?: true
    name?: true
    order?: true
    _all?: true
  }

  export type MealAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meal to aggregate.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meals
    **/
    _count?: true | MealCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MealAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MealSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealMaxAggregateInputType
  }

  export type GetMealAggregateType<T extends MealAggregateArgs> = {
        [P in keyof T & keyof AggregateMeal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeal[P]>
      : GetScalarType<T[P], AggregateMeal[P]>
  }




  export type MealGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealWhereInput
    orderBy?: MealOrderByWithAggregationInput | MealOrderByWithAggregationInput[]
    by: MealScalarFieldEnum[] | MealScalarFieldEnum
    having?: MealScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealCountAggregateInputType | true
    _avg?: MealAvgAggregateInputType
    _sum?: MealSumAggregateInputType
    _min?: MealMinAggregateInputType
    _max?: MealMaxAggregateInputType
  }

  export type MealGroupByOutputType = {
    id: number
    mealPlanId: number
    name: string
    order: number
    _count: MealCountAggregateOutputType | null
    _avg: MealAvgAggregateOutputType | null
    _sum: MealSumAggregateOutputType | null
    _min: MealMinAggregateOutputType | null
    _max: MealMaxAggregateOutputType | null
  }

  type GetMealGroupByPayload<T extends MealGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealGroupByOutputType[P]>
            : GetScalarType<T[P], MealGroupByOutputType[P]>
        }
      >
    >


  export type MealSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealPlanId?: boolean
    name?: boolean
    order?: boolean
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
    items?: boolean | Meal$itemsArgs<ExtArgs>
    _count?: boolean | MealCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meal"]>

  export type MealSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealPlanId?: boolean
    name?: boolean
    order?: boolean
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meal"]>

  export type MealSelectScalar = {
    id?: boolean
    mealPlanId?: boolean
    name?: boolean
    order?: boolean
  }

  export type MealInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
    items?: boolean | Meal$itemsArgs<ExtArgs>
    _count?: boolean | MealCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MealIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
  }

  export type $MealPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Meal"
    objects: {
      mealPlan: Prisma.$MealPlanPayload<ExtArgs>
      items: Prisma.$MealItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      mealPlanId: number
      name: string
      order: number
    }, ExtArgs["result"]["meal"]>
    composites: {}
  }

  type MealGetPayload<S extends boolean | null | undefined | MealDefaultArgs> = $Result.GetResult<Prisma.$MealPayload, S>

  type MealCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealCountAggregateInputType | true
    }

  export interface MealDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meal'], meta: { name: 'Meal' } }
    /**
     * Find zero or one Meal that matches the filter.
     * @param {MealFindUniqueArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealFindUniqueArgs>(args: SelectSubset<T, MealFindUniqueArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Meal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealFindUniqueOrThrowArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealFindUniqueOrThrowArgs>(args: SelectSubset<T, MealFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Meal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFindFirstArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealFindFirstArgs>(args?: SelectSubset<T, MealFindFirstArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Meal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFindFirstOrThrowArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealFindFirstOrThrowArgs>(args?: SelectSubset<T, MealFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Meals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meals
     * const meals = await prisma.meal.findMany()
     * 
     * // Get first 10 Meals
     * const meals = await prisma.meal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealWithIdOnly = await prisma.meal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealFindManyArgs>(args?: SelectSubset<T, MealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Meal.
     * @param {MealCreateArgs} args - Arguments to create a Meal.
     * @example
     * // Create one Meal
     * const Meal = await prisma.meal.create({
     *   data: {
     *     // ... data to create a Meal
     *   }
     * })
     * 
     */
    create<T extends MealCreateArgs>(args: SelectSubset<T, MealCreateArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Meals.
     * @param {MealCreateManyArgs} args - Arguments to create many Meals.
     * @example
     * // Create many Meals
     * const meal = await prisma.meal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealCreateManyArgs>(args?: SelectSubset<T, MealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Meals and returns the data saved in the database.
     * @param {MealCreateManyAndReturnArgs} args - Arguments to create many Meals.
     * @example
     * // Create many Meals
     * const meal = await prisma.meal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Meals and only return the `id`
     * const mealWithIdOnly = await prisma.meal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealCreateManyAndReturnArgs>(args?: SelectSubset<T, MealCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Meal.
     * @param {MealDeleteArgs} args - Arguments to delete one Meal.
     * @example
     * // Delete one Meal
     * const Meal = await prisma.meal.delete({
     *   where: {
     *     // ... filter to delete one Meal
     *   }
     * })
     * 
     */
    delete<T extends MealDeleteArgs>(args: SelectSubset<T, MealDeleteArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Meal.
     * @param {MealUpdateArgs} args - Arguments to update one Meal.
     * @example
     * // Update one Meal
     * const meal = await prisma.meal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealUpdateArgs>(args: SelectSubset<T, MealUpdateArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Meals.
     * @param {MealDeleteManyArgs} args - Arguments to filter Meals to delete.
     * @example
     * // Delete a few Meals
     * const { count } = await prisma.meal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealDeleteManyArgs>(args?: SelectSubset<T, MealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meals
     * const meal = await prisma.meal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealUpdateManyArgs>(args: SelectSubset<T, MealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Meal.
     * @param {MealUpsertArgs} args - Arguments to update or create a Meal.
     * @example
     * // Update or create a Meal
     * const meal = await prisma.meal.upsert({
     *   create: {
     *     // ... data to create a Meal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meal we want to update
     *   }
     * })
     */
    upsert<T extends MealUpsertArgs>(args: SelectSubset<T, MealUpsertArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Meals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCountArgs} args - Arguments to filter Meals to count.
     * @example
     * // Count the number of Meals
     * const count = await prisma.meal.count({
     *   where: {
     *     // ... the filter for the Meals we want to count
     *   }
     * })
    **/
    count<T extends MealCountArgs>(
      args?: Subset<T, MealCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealAggregateArgs>(args: Subset<T, MealAggregateArgs>): Prisma.PrismaPromise<GetMealAggregateType<T>>

    /**
     * Group by Meal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealGroupByArgs['orderBy'] }
        : { orderBy?: MealGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meal model
   */
  readonly fields: MealFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mealPlan<T extends MealPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealPlanDefaultArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends Meal$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Meal$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Meal model
   */ 
  interface MealFieldRefs {
    readonly id: FieldRef<"Meal", 'Int'>
    readonly mealPlanId: FieldRef<"Meal", 'Int'>
    readonly name: FieldRef<"Meal", 'String'>
    readonly order: FieldRef<"Meal", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Meal findUnique
   */
  export type MealFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where: MealWhereUniqueInput
  }

  /**
   * Meal findUniqueOrThrow
   */
  export type MealFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where: MealWhereUniqueInput
  }

  /**
   * Meal findFirst
   */
  export type MealFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meals.
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meals.
     */
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
  }

  /**
   * Meal findFirstOrThrow
   */
  export type MealFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meals.
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meals.
     */
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
  }

  /**
   * Meal findMany
   */
  export type MealFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meals to fetch.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meals.
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
  }

  /**
   * Meal create
   */
  export type MealCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * The data needed to create a Meal.
     */
    data: XOR<MealCreateInput, MealUncheckedCreateInput>
  }

  /**
   * Meal createMany
   */
  export type MealCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Meals.
     */
    data: MealCreateManyInput | MealCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Meal createManyAndReturn
   */
  export type MealCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Meals.
     */
    data: MealCreateManyInput | MealCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meal update
   */
  export type MealUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * The data needed to update a Meal.
     */
    data: XOR<MealUpdateInput, MealUncheckedUpdateInput>
    /**
     * Choose, which Meal to update.
     */
    where: MealWhereUniqueInput
  }

  /**
   * Meal updateMany
   */
  export type MealUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Meals.
     */
    data: XOR<MealUpdateManyMutationInput, MealUncheckedUpdateManyInput>
    /**
     * Filter which Meals to update
     */
    where?: MealWhereInput
  }

  /**
   * Meal upsert
   */
  export type MealUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * The filter to search for the Meal to update in case it exists.
     */
    where: MealWhereUniqueInput
    /**
     * In case the Meal found by the `where` argument doesn't exist, create a new Meal with this data.
     */
    create: XOR<MealCreateInput, MealUncheckedCreateInput>
    /**
     * In case the Meal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealUpdateInput, MealUncheckedUpdateInput>
  }

  /**
   * Meal delete
   */
  export type MealDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter which Meal to delete.
     */
    where: MealWhereUniqueInput
  }

  /**
   * Meal deleteMany
   */
  export type MealDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meals to delete
     */
    where?: MealWhereInput
  }

  /**
   * Meal.items
   */
  export type Meal$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    where?: MealItemWhereInput
    orderBy?: MealItemOrderByWithRelationInput | MealItemOrderByWithRelationInput[]
    cursor?: MealItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealItemScalarFieldEnum | MealItemScalarFieldEnum[]
  }

  /**
   * Meal without action
   */
  export type MealDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
  }


  /**
   * Model MealItem
   */

  export type AggregateMealItem = {
    _count: MealItemCountAggregateOutputType | null
    _avg: MealItemAvgAggregateOutputType | null
    _sum: MealItemSumAggregateOutputType | null
    _min: MealItemMinAggregateOutputType | null
    _max: MealItemMaxAggregateOutputType | null
  }

  export type MealItemAvgAggregateOutputType = {
    id: number | null
    mealId: number | null
  }

  export type MealItemSumAggregateOutputType = {
    id: number | null
    mealId: number | null
  }

  export type MealItemMinAggregateOutputType = {
    id: number | null
    mealId: number | null
    foodName: string | null
    quantity: string | null
    notes: string | null
  }

  export type MealItemMaxAggregateOutputType = {
    id: number | null
    mealId: number | null
    foodName: string | null
    quantity: string | null
    notes: string | null
  }

  export type MealItemCountAggregateOutputType = {
    id: number
    mealId: number
    foodName: number
    quantity: number
    notes: number
    _all: number
  }


  export type MealItemAvgAggregateInputType = {
    id?: true
    mealId?: true
  }

  export type MealItemSumAggregateInputType = {
    id?: true
    mealId?: true
  }

  export type MealItemMinAggregateInputType = {
    id?: true
    mealId?: true
    foodName?: true
    quantity?: true
    notes?: true
  }

  export type MealItemMaxAggregateInputType = {
    id?: true
    mealId?: true
    foodName?: true
    quantity?: true
    notes?: true
  }

  export type MealItemCountAggregateInputType = {
    id?: true
    mealId?: true
    foodName?: true
    quantity?: true
    notes?: true
    _all?: true
  }

  export type MealItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealItem to aggregate.
     */
    where?: MealItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealItems to fetch.
     */
    orderBy?: MealItemOrderByWithRelationInput | MealItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealItems
    **/
    _count?: true | MealItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MealItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MealItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealItemMaxAggregateInputType
  }

  export type GetMealItemAggregateType<T extends MealItemAggregateArgs> = {
        [P in keyof T & keyof AggregateMealItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealItem[P]>
      : GetScalarType<T[P], AggregateMealItem[P]>
  }




  export type MealItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealItemWhereInput
    orderBy?: MealItemOrderByWithAggregationInput | MealItemOrderByWithAggregationInput[]
    by: MealItemScalarFieldEnum[] | MealItemScalarFieldEnum
    having?: MealItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealItemCountAggregateInputType | true
    _avg?: MealItemAvgAggregateInputType
    _sum?: MealItemSumAggregateInputType
    _min?: MealItemMinAggregateInputType
    _max?: MealItemMaxAggregateInputType
  }

  export type MealItemGroupByOutputType = {
    id: number
    mealId: number
    foodName: string
    quantity: string
    notes: string | null
    _count: MealItemCountAggregateOutputType | null
    _avg: MealItemAvgAggregateOutputType | null
    _sum: MealItemSumAggregateOutputType | null
    _min: MealItemMinAggregateOutputType | null
    _max: MealItemMaxAggregateOutputType | null
  }

  type GetMealItemGroupByPayload<T extends MealItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealItemGroupByOutputType[P]>
            : GetScalarType<T[P], MealItemGroupByOutputType[P]>
        }
      >
    >


  export type MealItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    foodName?: boolean
    quantity?: boolean
    notes?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealItem"]>

  export type MealItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    foodName?: boolean
    quantity?: boolean
    notes?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealItem"]>

  export type MealItemSelectScalar = {
    id?: boolean
    mealId?: boolean
    foodName?: boolean
    quantity?: boolean
    notes?: boolean
  }

  export type MealItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }
  export type MealItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }

  export type $MealItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealItem"
    objects: {
      meal: Prisma.$MealPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      mealId: number
      foodName: string
      quantity: string
      notes: string | null
    }, ExtArgs["result"]["mealItem"]>
    composites: {}
  }

  type MealItemGetPayload<S extends boolean | null | undefined | MealItemDefaultArgs> = $Result.GetResult<Prisma.$MealItemPayload, S>

  type MealItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealItemCountAggregateInputType | true
    }

  export interface MealItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealItem'], meta: { name: 'MealItem' } }
    /**
     * Find zero or one MealItem that matches the filter.
     * @param {MealItemFindUniqueArgs} args - Arguments to find a MealItem
     * @example
     * // Get one MealItem
     * const mealItem = await prisma.mealItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealItemFindUniqueArgs>(args: SelectSubset<T, MealItemFindUniqueArgs<ExtArgs>>): Prisma__MealItemClient<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MealItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealItemFindUniqueOrThrowArgs} args - Arguments to find a MealItem
     * @example
     * // Get one MealItem
     * const mealItem = await prisma.mealItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealItemFindUniqueOrThrowArgs>(args: SelectSubset<T, MealItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealItemClient<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MealItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealItemFindFirstArgs} args - Arguments to find a MealItem
     * @example
     * // Get one MealItem
     * const mealItem = await prisma.mealItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealItemFindFirstArgs>(args?: SelectSubset<T, MealItemFindFirstArgs<ExtArgs>>): Prisma__MealItemClient<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MealItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealItemFindFirstOrThrowArgs} args - Arguments to find a MealItem
     * @example
     * // Get one MealItem
     * const mealItem = await prisma.mealItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealItemFindFirstOrThrowArgs>(args?: SelectSubset<T, MealItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealItemClient<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MealItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealItems
     * const mealItems = await prisma.mealItem.findMany()
     * 
     * // Get first 10 MealItems
     * const mealItems = await prisma.mealItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealItemWithIdOnly = await prisma.mealItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealItemFindManyArgs>(args?: SelectSubset<T, MealItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MealItem.
     * @param {MealItemCreateArgs} args - Arguments to create a MealItem.
     * @example
     * // Create one MealItem
     * const MealItem = await prisma.mealItem.create({
     *   data: {
     *     // ... data to create a MealItem
     *   }
     * })
     * 
     */
    create<T extends MealItemCreateArgs>(args: SelectSubset<T, MealItemCreateArgs<ExtArgs>>): Prisma__MealItemClient<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MealItems.
     * @param {MealItemCreateManyArgs} args - Arguments to create many MealItems.
     * @example
     * // Create many MealItems
     * const mealItem = await prisma.mealItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealItemCreateManyArgs>(args?: SelectSubset<T, MealItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealItems and returns the data saved in the database.
     * @param {MealItemCreateManyAndReturnArgs} args - Arguments to create many MealItems.
     * @example
     * // Create many MealItems
     * const mealItem = await prisma.mealItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealItems and only return the `id`
     * const mealItemWithIdOnly = await prisma.mealItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealItemCreateManyAndReturnArgs>(args?: SelectSubset<T, MealItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MealItem.
     * @param {MealItemDeleteArgs} args - Arguments to delete one MealItem.
     * @example
     * // Delete one MealItem
     * const MealItem = await prisma.mealItem.delete({
     *   where: {
     *     // ... filter to delete one MealItem
     *   }
     * })
     * 
     */
    delete<T extends MealItemDeleteArgs>(args: SelectSubset<T, MealItemDeleteArgs<ExtArgs>>): Prisma__MealItemClient<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MealItem.
     * @param {MealItemUpdateArgs} args - Arguments to update one MealItem.
     * @example
     * // Update one MealItem
     * const mealItem = await prisma.mealItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealItemUpdateArgs>(args: SelectSubset<T, MealItemUpdateArgs<ExtArgs>>): Prisma__MealItemClient<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MealItems.
     * @param {MealItemDeleteManyArgs} args - Arguments to filter MealItems to delete.
     * @example
     * // Delete a few MealItems
     * const { count } = await prisma.mealItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealItemDeleteManyArgs>(args?: SelectSubset<T, MealItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealItems
     * const mealItem = await prisma.mealItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealItemUpdateManyArgs>(args: SelectSubset<T, MealItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MealItem.
     * @param {MealItemUpsertArgs} args - Arguments to update or create a MealItem.
     * @example
     * // Update or create a MealItem
     * const mealItem = await prisma.mealItem.upsert({
     *   create: {
     *     // ... data to create a MealItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealItem we want to update
     *   }
     * })
     */
    upsert<T extends MealItemUpsertArgs>(args: SelectSubset<T, MealItemUpsertArgs<ExtArgs>>): Prisma__MealItemClient<$Result.GetResult<Prisma.$MealItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MealItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealItemCountArgs} args - Arguments to filter MealItems to count.
     * @example
     * // Count the number of MealItems
     * const count = await prisma.mealItem.count({
     *   where: {
     *     // ... the filter for the MealItems we want to count
     *   }
     * })
    **/
    count<T extends MealItemCountArgs>(
      args?: Subset<T, MealItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealItemAggregateArgs>(args: Subset<T, MealItemAggregateArgs>): Prisma.PrismaPromise<GetMealItemAggregateType<T>>

    /**
     * Group by MealItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealItemGroupByArgs['orderBy'] }
        : { orderBy?: MealItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealItem model
   */
  readonly fields: MealItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meal<T extends MealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealDefaultArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealItem model
   */ 
  interface MealItemFieldRefs {
    readonly id: FieldRef<"MealItem", 'Int'>
    readonly mealId: FieldRef<"MealItem", 'Int'>
    readonly foodName: FieldRef<"MealItem", 'String'>
    readonly quantity: FieldRef<"MealItem", 'String'>
    readonly notes: FieldRef<"MealItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MealItem findUnique
   */
  export type MealItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    /**
     * Filter, which MealItem to fetch.
     */
    where: MealItemWhereUniqueInput
  }

  /**
   * MealItem findUniqueOrThrow
   */
  export type MealItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    /**
     * Filter, which MealItem to fetch.
     */
    where: MealItemWhereUniqueInput
  }

  /**
   * MealItem findFirst
   */
  export type MealItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    /**
     * Filter, which MealItem to fetch.
     */
    where?: MealItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealItems to fetch.
     */
    orderBy?: MealItemOrderByWithRelationInput | MealItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealItems.
     */
    cursor?: MealItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealItems.
     */
    distinct?: MealItemScalarFieldEnum | MealItemScalarFieldEnum[]
  }

  /**
   * MealItem findFirstOrThrow
   */
  export type MealItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    /**
     * Filter, which MealItem to fetch.
     */
    where?: MealItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealItems to fetch.
     */
    orderBy?: MealItemOrderByWithRelationInput | MealItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealItems.
     */
    cursor?: MealItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealItems.
     */
    distinct?: MealItemScalarFieldEnum | MealItemScalarFieldEnum[]
  }

  /**
   * MealItem findMany
   */
  export type MealItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    /**
     * Filter, which MealItems to fetch.
     */
    where?: MealItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealItems to fetch.
     */
    orderBy?: MealItemOrderByWithRelationInput | MealItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealItems.
     */
    cursor?: MealItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealItems.
     */
    skip?: number
    distinct?: MealItemScalarFieldEnum | MealItemScalarFieldEnum[]
  }

  /**
   * MealItem create
   */
  export type MealItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    /**
     * The data needed to create a MealItem.
     */
    data: XOR<MealItemCreateInput, MealItemUncheckedCreateInput>
  }

  /**
   * MealItem createMany
   */
  export type MealItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealItems.
     */
    data: MealItemCreateManyInput | MealItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealItem createManyAndReturn
   */
  export type MealItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MealItems.
     */
    data: MealItemCreateManyInput | MealItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealItem update
   */
  export type MealItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    /**
     * The data needed to update a MealItem.
     */
    data: XOR<MealItemUpdateInput, MealItemUncheckedUpdateInput>
    /**
     * Choose, which MealItem to update.
     */
    where: MealItemWhereUniqueInput
  }

  /**
   * MealItem updateMany
   */
  export type MealItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealItems.
     */
    data: XOR<MealItemUpdateManyMutationInput, MealItemUncheckedUpdateManyInput>
    /**
     * Filter which MealItems to update
     */
    where?: MealItemWhereInput
  }

  /**
   * MealItem upsert
   */
  export type MealItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    /**
     * The filter to search for the MealItem to update in case it exists.
     */
    where: MealItemWhereUniqueInput
    /**
     * In case the MealItem found by the `where` argument doesn't exist, create a new MealItem with this data.
     */
    create: XOR<MealItemCreateInput, MealItemUncheckedCreateInput>
    /**
     * In case the MealItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealItemUpdateInput, MealItemUncheckedUpdateInput>
  }

  /**
   * MealItem delete
   */
  export type MealItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
    /**
     * Filter which MealItem to delete.
     */
    where: MealItemWhereUniqueInput
  }

  /**
   * MealItem deleteMany
   */
  export type MealItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealItems to delete
     */
    where?: MealItemWhereInput
  }

  /**
   * MealItem without action
   */
  export type MealItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealItem
     */
    select?: MealItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealItemInclude<ExtArgs> | null
  }


  /**
   * Model PhysicalAssessment
   */

  export type AggregatePhysicalAssessment = {
    _count: PhysicalAssessmentCountAggregateOutputType | null
    _avg: PhysicalAssessmentAvgAggregateOutputType | null
    _sum: PhysicalAssessmentSumAggregateOutputType | null
    _min: PhysicalAssessmentMinAggregateOutputType | null
    _max: PhysicalAssessmentMaxAggregateOutputType | null
  }

  export type PhysicalAssessmentAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    createdById: number | null
  }

  export type PhysicalAssessmentSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    createdById: number | null
  }

  export type PhysicalAssessmentMinAggregateOutputType = {
    id: number | null
    method: string | null
    date: Date | null
    nextAssessment: Date | null
    patientId: number | null
    createdById: number | null
  }

  export type PhysicalAssessmentMaxAggregateOutputType = {
    id: number | null
    method: string | null
    date: Date | null
    nextAssessment: Date | null
    patientId: number | null
    createdById: number | null
  }

  export type PhysicalAssessmentCountAggregateOutputType = {
    id: number
    method: number
    date: number
    nextAssessment: number
    data: number
    patientId: number
    createdById: number
    _all: number
  }


  export type PhysicalAssessmentAvgAggregateInputType = {
    id?: true
    patientId?: true
    createdById?: true
  }

  export type PhysicalAssessmentSumAggregateInputType = {
    id?: true
    patientId?: true
    createdById?: true
  }

  export type PhysicalAssessmentMinAggregateInputType = {
    id?: true
    method?: true
    date?: true
    nextAssessment?: true
    patientId?: true
    createdById?: true
  }

  export type PhysicalAssessmentMaxAggregateInputType = {
    id?: true
    method?: true
    date?: true
    nextAssessment?: true
    patientId?: true
    createdById?: true
  }

  export type PhysicalAssessmentCountAggregateInputType = {
    id?: true
    method?: true
    date?: true
    nextAssessment?: true
    data?: true
    patientId?: true
    createdById?: true
    _all?: true
  }

  export type PhysicalAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhysicalAssessment to aggregate.
     */
    where?: PhysicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhysicalAssessments to fetch.
     */
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhysicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhysicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhysicalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PhysicalAssessments
    **/
    _count?: true | PhysicalAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhysicalAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhysicalAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhysicalAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhysicalAssessmentMaxAggregateInputType
  }

  export type GetPhysicalAssessmentAggregateType<T extends PhysicalAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePhysicalAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhysicalAssessment[P]>
      : GetScalarType<T[P], AggregatePhysicalAssessment[P]>
  }




  export type PhysicalAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhysicalAssessmentWhereInput
    orderBy?: PhysicalAssessmentOrderByWithAggregationInput | PhysicalAssessmentOrderByWithAggregationInput[]
    by: PhysicalAssessmentScalarFieldEnum[] | PhysicalAssessmentScalarFieldEnum
    having?: PhysicalAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhysicalAssessmentCountAggregateInputType | true
    _avg?: PhysicalAssessmentAvgAggregateInputType
    _sum?: PhysicalAssessmentSumAggregateInputType
    _min?: PhysicalAssessmentMinAggregateInputType
    _max?: PhysicalAssessmentMaxAggregateInputType
  }

  export type PhysicalAssessmentGroupByOutputType = {
    id: number
    method: string
    date: Date
    nextAssessment: Date | null
    data: JsonValue
    patientId: number
    createdById: number
    _count: PhysicalAssessmentCountAggregateOutputType | null
    _avg: PhysicalAssessmentAvgAggregateOutputType | null
    _sum: PhysicalAssessmentSumAggregateOutputType | null
    _min: PhysicalAssessmentMinAggregateOutputType | null
    _max: PhysicalAssessmentMaxAggregateOutputType | null
  }

  type GetPhysicalAssessmentGroupByPayload<T extends PhysicalAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhysicalAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhysicalAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhysicalAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], PhysicalAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type PhysicalAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    date?: boolean
    nextAssessment?: boolean
    data?: boolean
    patientId?: boolean
    createdById?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["physicalAssessment"]>

  export type PhysicalAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    date?: boolean
    nextAssessment?: boolean
    data?: boolean
    patientId?: boolean
    createdById?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["physicalAssessment"]>

  export type PhysicalAssessmentSelectScalar = {
    id?: boolean
    method?: boolean
    date?: boolean
    nextAssessment?: boolean
    data?: boolean
    patientId?: boolean
    createdById?: boolean
  }

  export type PhysicalAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PhysicalAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PhysicalAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PhysicalAssessment"
    objects: {
      patient: Prisma.$UserPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      method: string
      date: Date
      nextAssessment: Date | null
      data: Prisma.JsonValue
      patientId: number
      createdById: number
    }, ExtArgs["result"]["physicalAssessment"]>
    composites: {}
  }

  type PhysicalAssessmentGetPayload<S extends boolean | null | undefined | PhysicalAssessmentDefaultArgs> = $Result.GetResult<Prisma.$PhysicalAssessmentPayload, S>

  type PhysicalAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PhysicalAssessmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PhysicalAssessmentCountAggregateInputType | true
    }

  export interface PhysicalAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PhysicalAssessment'], meta: { name: 'PhysicalAssessment' } }
    /**
     * Find zero or one PhysicalAssessment that matches the filter.
     * @param {PhysicalAssessmentFindUniqueArgs} args - Arguments to find a PhysicalAssessment
     * @example
     * // Get one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhysicalAssessmentFindUniqueArgs>(args: SelectSubset<T, PhysicalAssessmentFindUniqueArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PhysicalAssessment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PhysicalAssessmentFindUniqueOrThrowArgs} args - Arguments to find a PhysicalAssessment
     * @example
     * // Get one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhysicalAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PhysicalAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PhysicalAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentFindFirstArgs} args - Arguments to find a PhysicalAssessment
     * @example
     * // Get one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhysicalAssessmentFindFirstArgs>(args?: SelectSubset<T, PhysicalAssessmentFindFirstArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PhysicalAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentFindFirstOrThrowArgs} args - Arguments to find a PhysicalAssessment
     * @example
     * // Get one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhysicalAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PhysicalAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PhysicalAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PhysicalAssessments
     * const physicalAssessments = await prisma.physicalAssessment.findMany()
     * 
     * // Get first 10 PhysicalAssessments
     * const physicalAssessments = await prisma.physicalAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const physicalAssessmentWithIdOnly = await prisma.physicalAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhysicalAssessmentFindManyArgs>(args?: SelectSubset<T, PhysicalAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PhysicalAssessment.
     * @param {PhysicalAssessmentCreateArgs} args - Arguments to create a PhysicalAssessment.
     * @example
     * // Create one PhysicalAssessment
     * const PhysicalAssessment = await prisma.physicalAssessment.create({
     *   data: {
     *     // ... data to create a PhysicalAssessment
     *   }
     * })
     * 
     */
    create<T extends PhysicalAssessmentCreateArgs>(args: SelectSubset<T, PhysicalAssessmentCreateArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PhysicalAssessments.
     * @param {PhysicalAssessmentCreateManyArgs} args - Arguments to create many PhysicalAssessments.
     * @example
     * // Create many PhysicalAssessments
     * const physicalAssessment = await prisma.physicalAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhysicalAssessmentCreateManyArgs>(args?: SelectSubset<T, PhysicalAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PhysicalAssessments and returns the data saved in the database.
     * @param {PhysicalAssessmentCreateManyAndReturnArgs} args - Arguments to create many PhysicalAssessments.
     * @example
     * // Create many PhysicalAssessments
     * const physicalAssessment = await prisma.physicalAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PhysicalAssessments and only return the `id`
     * const physicalAssessmentWithIdOnly = await prisma.physicalAssessment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PhysicalAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PhysicalAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PhysicalAssessment.
     * @param {PhysicalAssessmentDeleteArgs} args - Arguments to delete one PhysicalAssessment.
     * @example
     * // Delete one PhysicalAssessment
     * const PhysicalAssessment = await prisma.physicalAssessment.delete({
     *   where: {
     *     // ... filter to delete one PhysicalAssessment
     *   }
     * })
     * 
     */
    delete<T extends PhysicalAssessmentDeleteArgs>(args: SelectSubset<T, PhysicalAssessmentDeleteArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PhysicalAssessment.
     * @param {PhysicalAssessmentUpdateArgs} args - Arguments to update one PhysicalAssessment.
     * @example
     * // Update one PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhysicalAssessmentUpdateArgs>(args: SelectSubset<T, PhysicalAssessmentUpdateArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PhysicalAssessments.
     * @param {PhysicalAssessmentDeleteManyArgs} args - Arguments to filter PhysicalAssessments to delete.
     * @example
     * // Delete a few PhysicalAssessments
     * const { count } = await prisma.physicalAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhysicalAssessmentDeleteManyArgs>(args?: SelectSubset<T, PhysicalAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PhysicalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PhysicalAssessments
     * const physicalAssessment = await prisma.physicalAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhysicalAssessmentUpdateManyArgs>(args: SelectSubset<T, PhysicalAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PhysicalAssessment.
     * @param {PhysicalAssessmentUpsertArgs} args - Arguments to update or create a PhysicalAssessment.
     * @example
     * // Update or create a PhysicalAssessment
     * const physicalAssessment = await prisma.physicalAssessment.upsert({
     *   create: {
     *     // ... data to create a PhysicalAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PhysicalAssessment we want to update
     *   }
     * })
     */
    upsert<T extends PhysicalAssessmentUpsertArgs>(args: SelectSubset<T, PhysicalAssessmentUpsertArgs<ExtArgs>>): Prisma__PhysicalAssessmentClient<$Result.GetResult<Prisma.$PhysicalAssessmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PhysicalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentCountArgs} args - Arguments to filter PhysicalAssessments to count.
     * @example
     * // Count the number of PhysicalAssessments
     * const count = await prisma.physicalAssessment.count({
     *   where: {
     *     // ... the filter for the PhysicalAssessments we want to count
     *   }
     * })
    **/
    count<T extends PhysicalAssessmentCountArgs>(
      args?: Subset<T, PhysicalAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhysicalAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PhysicalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhysicalAssessmentAggregateArgs>(args: Subset<T, PhysicalAssessmentAggregateArgs>): Prisma.PrismaPromise<GetPhysicalAssessmentAggregateType<T>>

    /**
     * Group by PhysicalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhysicalAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhysicalAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhysicalAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: PhysicalAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhysicalAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhysicalAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PhysicalAssessment model
   */
  readonly fields: PhysicalAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PhysicalAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhysicalAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PhysicalAssessment model
   */ 
  interface PhysicalAssessmentFieldRefs {
    readonly id: FieldRef<"PhysicalAssessment", 'Int'>
    readonly method: FieldRef<"PhysicalAssessment", 'String'>
    readonly date: FieldRef<"PhysicalAssessment", 'DateTime'>
    readonly nextAssessment: FieldRef<"PhysicalAssessment", 'DateTime'>
    readonly data: FieldRef<"PhysicalAssessment", 'Json'>
    readonly patientId: FieldRef<"PhysicalAssessment", 'Int'>
    readonly createdById: FieldRef<"PhysicalAssessment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PhysicalAssessment findUnique
   */
  export type PhysicalAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessment to fetch.
     */
    where: PhysicalAssessmentWhereUniqueInput
  }

  /**
   * PhysicalAssessment findUniqueOrThrow
   */
  export type PhysicalAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessment to fetch.
     */
    where: PhysicalAssessmentWhereUniqueInput
  }

  /**
   * PhysicalAssessment findFirst
   */
  export type PhysicalAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessment to fetch.
     */
    where?: PhysicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhysicalAssessments to fetch.
     */
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhysicalAssessments.
     */
    cursor?: PhysicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhysicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhysicalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhysicalAssessments.
     */
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * PhysicalAssessment findFirstOrThrow
   */
  export type PhysicalAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessment to fetch.
     */
    where?: PhysicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhysicalAssessments to fetch.
     */
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhysicalAssessments.
     */
    cursor?: PhysicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhysicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhysicalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhysicalAssessments.
     */
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * PhysicalAssessment findMany
   */
  export type PhysicalAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PhysicalAssessments to fetch.
     */
    where?: PhysicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhysicalAssessments to fetch.
     */
    orderBy?: PhysicalAssessmentOrderByWithRelationInput | PhysicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PhysicalAssessments.
     */
    cursor?: PhysicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhysicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhysicalAssessments.
     */
    skip?: number
    distinct?: PhysicalAssessmentScalarFieldEnum | PhysicalAssessmentScalarFieldEnum[]
  }

  /**
   * PhysicalAssessment create
   */
  export type PhysicalAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PhysicalAssessment.
     */
    data: XOR<PhysicalAssessmentCreateInput, PhysicalAssessmentUncheckedCreateInput>
  }

  /**
   * PhysicalAssessment createMany
   */
  export type PhysicalAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PhysicalAssessments.
     */
    data: PhysicalAssessmentCreateManyInput | PhysicalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PhysicalAssessment createManyAndReturn
   */
  export type PhysicalAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PhysicalAssessments.
     */
    data: PhysicalAssessmentCreateManyInput | PhysicalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PhysicalAssessment update
   */
  export type PhysicalAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PhysicalAssessment.
     */
    data: XOR<PhysicalAssessmentUpdateInput, PhysicalAssessmentUncheckedUpdateInput>
    /**
     * Choose, which PhysicalAssessment to update.
     */
    where: PhysicalAssessmentWhereUniqueInput
  }

  /**
   * PhysicalAssessment updateMany
   */
  export type PhysicalAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PhysicalAssessments.
     */
    data: XOR<PhysicalAssessmentUpdateManyMutationInput, PhysicalAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which PhysicalAssessments to update
     */
    where?: PhysicalAssessmentWhereInput
  }

  /**
   * PhysicalAssessment upsert
   */
  export type PhysicalAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PhysicalAssessment to update in case it exists.
     */
    where: PhysicalAssessmentWhereUniqueInput
    /**
     * In case the PhysicalAssessment found by the `where` argument doesn't exist, create a new PhysicalAssessment with this data.
     */
    create: XOR<PhysicalAssessmentCreateInput, PhysicalAssessmentUncheckedCreateInput>
    /**
     * In case the PhysicalAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhysicalAssessmentUpdateInput, PhysicalAssessmentUncheckedUpdateInput>
  }

  /**
   * PhysicalAssessment delete
   */
  export type PhysicalAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter which PhysicalAssessment to delete.
     */
    where: PhysicalAssessmentWhereUniqueInput
  }

  /**
   * PhysicalAssessment deleteMany
   */
  export type PhysicalAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhysicalAssessments to delete
     */
    where?: PhysicalAssessmentWhereInput
  }

  /**
   * PhysicalAssessment without action
   */
  export type PhysicalAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhysicalAssessment
     */
    select?: PhysicalAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhysicalAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model DataSharing
   */

  export type AggregateDataSharing = {
    _count: DataSharingCountAggregateOutputType | null
    _avg: DataSharingAvgAggregateOutputType | null
    _sum: DataSharingSumAggregateOutputType | null
    _min: DataSharingMinAggregateOutputType | null
    _max: DataSharingMaxAggregateOutputType | null
  }

  export type DataSharingAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    professionalId: number | null
  }

  export type DataSharingSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    professionalId: number | null
  }

  export type DataSharingMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    professionalId: number | null
    role: $Enums.Role | null
    shareWorkoutWith: boolean | null
    shareMealWith: boolean | null
  }

  export type DataSharingMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    professionalId: number | null
    role: $Enums.Role | null
    shareWorkoutWith: boolean | null
    shareMealWith: boolean | null
  }

  export type DataSharingCountAggregateOutputType = {
    id: number
    patientId: number
    professionalId: number
    role: number
    shareWorkoutWith: number
    shareMealWith: number
    _all: number
  }


  export type DataSharingAvgAggregateInputType = {
    id?: true
    patientId?: true
    professionalId?: true
  }

  export type DataSharingSumAggregateInputType = {
    id?: true
    patientId?: true
    professionalId?: true
  }

  export type DataSharingMinAggregateInputType = {
    id?: true
    patientId?: true
    professionalId?: true
    role?: true
    shareWorkoutWith?: true
    shareMealWith?: true
  }

  export type DataSharingMaxAggregateInputType = {
    id?: true
    patientId?: true
    professionalId?: true
    role?: true
    shareWorkoutWith?: true
    shareMealWith?: true
  }

  export type DataSharingCountAggregateInputType = {
    id?: true
    patientId?: true
    professionalId?: true
    role?: true
    shareWorkoutWith?: true
    shareMealWith?: true
    _all?: true
  }

  export type DataSharingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataSharing to aggregate.
     */
    where?: DataSharingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataSharings to fetch.
     */
    orderBy?: DataSharingOrderByWithRelationInput | DataSharingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DataSharingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataSharings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataSharings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DataSharings
    **/
    _count?: true | DataSharingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DataSharingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DataSharingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DataSharingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DataSharingMaxAggregateInputType
  }

  export type GetDataSharingAggregateType<T extends DataSharingAggregateArgs> = {
        [P in keyof T & keyof AggregateDataSharing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDataSharing[P]>
      : GetScalarType<T[P], AggregateDataSharing[P]>
  }




  export type DataSharingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataSharingWhereInput
    orderBy?: DataSharingOrderByWithAggregationInput | DataSharingOrderByWithAggregationInput[]
    by: DataSharingScalarFieldEnum[] | DataSharingScalarFieldEnum
    having?: DataSharingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DataSharingCountAggregateInputType | true
    _avg?: DataSharingAvgAggregateInputType
    _sum?: DataSharingSumAggregateInputType
    _min?: DataSharingMinAggregateInputType
    _max?: DataSharingMaxAggregateInputType
  }

  export type DataSharingGroupByOutputType = {
    id: number
    patientId: number
    professionalId: number
    role: $Enums.Role
    shareWorkoutWith: boolean
    shareMealWith: boolean
    _count: DataSharingCountAggregateOutputType | null
    _avg: DataSharingAvgAggregateOutputType | null
    _sum: DataSharingSumAggregateOutputType | null
    _min: DataSharingMinAggregateOutputType | null
    _max: DataSharingMaxAggregateOutputType | null
  }

  type GetDataSharingGroupByPayload<T extends DataSharingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DataSharingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DataSharingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DataSharingGroupByOutputType[P]>
            : GetScalarType<T[P], DataSharingGroupByOutputType[P]>
        }
      >
    >


  export type DataSharingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    professionalId?: boolean
    role?: boolean
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    professional?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dataSharing"]>

  export type DataSharingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    professionalId?: boolean
    role?: boolean
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    professional?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dataSharing"]>

  export type DataSharingSelectScalar = {
    id?: boolean
    patientId?: boolean
    professionalId?: boolean
    role?: boolean
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
  }

  export type DataSharingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    professional?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DataSharingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    professional?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DataSharingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DataSharing"
    objects: {
      patient: Prisma.$UserPayload<ExtArgs>
      professional: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientId: number
      professionalId: number
      role: $Enums.Role
      shareWorkoutWith: boolean
      shareMealWith: boolean
    }, ExtArgs["result"]["dataSharing"]>
    composites: {}
  }

  type DataSharingGetPayload<S extends boolean | null | undefined | DataSharingDefaultArgs> = $Result.GetResult<Prisma.$DataSharingPayload, S>

  type DataSharingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DataSharingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DataSharingCountAggregateInputType | true
    }

  export interface DataSharingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DataSharing'], meta: { name: 'DataSharing' } }
    /**
     * Find zero or one DataSharing that matches the filter.
     * @param {DataSharingFindUniqueArgs} args - Arguments to find a DataSharing
     * @example
     * // Get one DataSharing
     * const dataSharing = await prisma.dataSharing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DataSharingFindUniqueArgs>(args: SelectSubset<T, DataSharingFindUniqueArgs<ExtArgs>>): Prisma__DataSharingClient<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DataSharing that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DataSharingFindUniqueOrThrowArgs} args - Arguments to find a DataSharing
     * @example
     * // Get one DataSharing
     * const dataSharing = await prisma.dataSharing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DataSharingFindUniqueOrThrowArgs>(args: SelectSubset<T, DataSharingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DataSharingClient<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DataSharing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSharingFindFirstArgs} args - Arguments to find a DataSharing
     * @example
     * // Get one DataSharing
     * const dataSharing = await prisma.dataSharing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DataSharingFindFirstArgs>(args?: SelectSubset<T, DataSharingFindFirstArgs<ExtArgs>>): Prisma__DataSharingClient<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DataSharing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSharingFindFirstOrThrowArgs} args - Arguments to find a DataSharing
     * @example
     * // Get one DataSharing
     * const dataSharing = await prisma.dataSharing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DataSharingFindFirstOrThrowArgs>(args?: SelectSubset<T, DataSharingFindFirstOrThrowArgs<ExtArgs>>): Prisma__DataSharingClient<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DataSharings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSharingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DataSharings
     * const dataSharings = await prisma.dataSharing.findMany()
     * 
     * // Get first 10 DataSharings
     * const dataSharings = await prisma.dataSharing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dataSharingWithIdOnly = await prisma.dataSharing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DataSharingFindManyArgs>(args?: SelectSubset<T, DataSharingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DataSharing.
     * @param {DataSharingCreateArgs} args - Arguments to create a DataSharing.
     * @example
     * // Create one DataSharing
     * const DataSharing = await prisma.dataSharing.create({
     *   data: {
     *     // ... data to create a DataSharing
     *   }
     * })
     * 
     */
    create<T extends DataSharingCreateArgs>(args: SelectSubset<T, DataSharingCreateArgs<ExtArgs>>): Prisma__DataSharingClient<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DataSharings.
     * @param {DataSharingCreateManyArgs} args - Arguments to create many DataSharings.
     * @example
     * // Create many DataSharings
     * const dataSharing = await prisma.dataSharing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DataSharingCreateManyArgs>(args?: SelectSubset<T, DataSharingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DataSharings and returns the data saved in the database.
     * @param {DataSharingCreateManyAndReturnArgs} args - Arguments to create many DataSharings.
     * @example
     * // Create many DataSharings
     * const dataSharing = await prisma.dataSharing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DataSharings and only return the `id`
     * const dataSharingWithIdOnly = await prisma.dataSharing.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DataSharingCreateManyAndReturnArgs>(args?: SelectSubset<T, DataSharingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DataSharing.
     * @param {DataSharingDeleteArgs} args - Arguments to delete one DataSharing.
     * @example
     * // Delete one DataSharing
     * const DataSharing = await prisma.dataSharing.delete({
     *   where: {
     *     // ... filter to delete one DataSharing
     *   }
     * })
     * 
     */
    delete<T extends DataSharingDeleteArgs>(args: SelectSubset<T, DataSharingDeleteArgs<ExtArgs>>): Prisma__DataSharingClient<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DataSharing.
     * @param {DataSharingUpdateArgs} args - Arguments to update one DataSharing.
     * @example
     * // Update one DataSharing
     * const dataSharing = await prisma.dataSharing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DataSharingUpdateArgs>(args: SelectSubset<T, DataSharingUpdateArgs<ExtArgs>>): Prisma__DataSharingClient<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DataSharings.
     * @param {DataSharingDeleteManyArgs} args - Arguments to filter DataSharings to delete.
     * @example
     * // Delete a few DataSharings
     * const { count } = await prisma.dataSharing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DataSharingDeleteManyArgs>(args?: SelectSubset<T, DataSharingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataSharings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSharingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DataSharings
     * const dataSharing = await prisma.dataSharing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DataSharingUpdateManyArgs>(args: SelectSubset<T, DataSharingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DataSharing.
     * @param {DataSharingUpsertArgs} args - Arguments to update or create a DataSharing.
     * @example
     * // Update or create a DataSharing
     * const dataSharing = await prisma.dataSharing.upsert({
     *   create: {
     *     // ... data to create a DataSharing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DataSharing we want to update
     *   }
     * })
     */
    upsert<T extends DataSharingUpsertArgs>(args: SelectSubset<T, DataSharingUpsertArgs<ExtArgs>>): Prisma__DataSharingClient<$Result.GetResult<Prisma.$DataSharingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DataSharings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSharingCountArgs} args - Arguments to filter DataSharings to count.
     * @example
     * // Count the number of DataSharings
     * const count = await prisma.dataSharing.count({
     *   where: {
     *     // ... the filter for the DataSharings we want to count
     *   }
     * })
    **/
    count<T extends DataSharingCountArgs>(
      args?: Subset<T, DataSharingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DataSharingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DataSharing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSharingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DataSharingAggregateArgs>(args: Subset<T, DataSharingAggregateArgs>): Prisma.PrismaPromise<GetDataSharingAggregateType<T>>

    /**
     * Group by DataSharing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSharingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DataSharingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DataSharingGroupByArgs['orderBy'] }
        : { orderBy?: DataSharingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DataSharingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDataSharingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DataSharing model
   */
  readonly fields: DataSharingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DataSharing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DataSharingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    professional<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DataSharing model
   */ 
  interface DataSharingFieldRefs {
    readonly id: FieldRef<"DataSharing", 'Int'>
    readonly patientId: FieldRef<"DataSharing", 'Int'>
    readonly professionalId: FieldRef<"DataSharing", 'Int'>
    readonly role: FieldRef<"DataSharing", 'Role'>
    readonly shareWorkoutWith: FieldRef<"DataSharing", 'Boolean'>
    readonly shareMealWith: FieldRef<"DataSharing", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * DataSharing findUnique
   */
  export type DataSharingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    /**
     * Filter, which DataSharing to fetch.
     */
    where: DataSharingWhereUniqueInput
  }

  /**
   * DataSharing findUniqueOrThrow
   */
  export type DataSharingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    /**
     * Filter, which DataSharing to fetch.
     */
    where: DataSharingWhereUniqueInput
  }

  /**
   * DataSharing findFirst
   */
  export type DataSharingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    /**
     * Filter, which DataSharing to fetch.
     */
    where?: DataSharingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataSharings to fetch.
     */
    orderBy?: DataSharingOrderByWithRelationInput | DataSharingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataSharings.
     */
    cursor?: DataSharingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataSharings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataSharings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataSharings.
     */
    distinct?: DataSharingScalarFieldEnum | DataSharingScalarFieldEnum[]
  }

  /**
   * DataSharing findFirstOrThrow
   */
  export type DataSharingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    /**
     * Filter, which DataSharing to fetch.
     */
    where?: DataSharingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataSharings to fetch.
     */
    orderBy?: DataSharingOrderByWithRelationInput | DataSharingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataSharings.
     */
    cursor?: DataSharingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataSharings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataSharings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataSharings.
     */
    distinct?: DataSharingScalarFieldEnum | DataSharingScalarFieldEnum[]
  }

  /**
   * DataSharing findMany
   */
  export type DataSharingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    /**
     * Filter, which DataSharings to fetch.
     */
    where?: DataSharingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataSharings to fetch.
     */
    orderBy?: DataSharingOrderByWithRelationInput | DataSharingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DataSharings.
     */
    cursor?: DataSharingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataSharings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataSharings.
     */
    skip?: number
    distinct?: DataSharingScalarFieldEnum | DataSharingScalarFieldEnum[]
  }

  /**
   * DataSharing create
   */
  export type DataSharingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    /**
     * The data needed to create a DataSharing.
     */
    data: XOR<DataSharingCreateInput, DataSharingUncheckedCreateInput>
  }

  /**
   * DataSharing createMany
   */
  export type DataSharingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DataSharings.
     */
    data: DataSharingCreateManyInput | DataSharingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DataSharing createManyAndReturn
   */
  export type DataSharingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DataSharings.
     */
    data: DataSharingCreateManyInput | DataSharingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DataSharing update
   */
  export type DataSharingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    /**
     * The data needed to update a DataSharing.
     */
    data: XOR<DataSharingUpdateInput, DataSharingUncheckedUpdateInput>
    /**
     * Choose, which DataSharing to update.
     */
    where: DataSharingWhereUniqueInput
  }

  /**
   * DataSharing updateMany
   */
  export type DataSharingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DataSharings.
     */
    data: XOR<DataSharingUpdateManyMutationInput, DataSharingUncheckedUpdateManyInput>
    /**
     * Filter which DataSharings to update
     */
    where?: DataSharingWhereInput
  }

  /**
   * DataSharing upsert
   */
  export type DataSharingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    /**
     * The filter to search for the DataSharing to update in case it exists.
     */
    where: DataSharingWhereUniqueInput
    /**
     * In case the DataSharing found by the `where` argument doesn't exist, create a new DataSharing with this data.
     */
    create: XOR<DataSharingCreateInput, DataSharingUncheckedCreateInput>
    /**
     * In case the DataSharing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DataSharingUpdateInput, DataSharingUncheckedUpdateInput>
  }

  /**
   * DataSharing delete
   */
  export type DataSharingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
    /**
     * Filter which DataSharing to delete.
     */
    where: DataSharingWhereUniqueInput
  }

  /**
   * DataSharing deleteMany
   */
  export type DataSharingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataSharings to delete
     */
    where?: DataSharingWhereInput
  }

  /**
   * DataSharing without action
   */
  export type DataSharingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSharing
     */
    select?: DataSharingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSharingInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    birthDate: 'birthDate',
    gender: 'gender',
    peso: 'peso',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WorkoutPlanScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    validFrom: 'validFrom',
    validUntil: 'validUntil',
    isActive: 'isActive',
    createdAt: 'createdAt',
    trainerId: 'trainerId',
    patientId: 'patientId'
  };

  export type WorkoutPlanScalarFieldEnum = (typeof WorkoutPlanScalarFieldEnum)[keyof typeof WorkoutPlanScalarFieldEnum]


  export const WorkoutDayScalarFieldEnum: {
    id: 'id',
    workoutPlanId: 'workoutPlanId',
    dayOfWeek: 'dayOfWeek',
    muscleGroup: 'muscleGroup'
  };

  export type WorkoutDayScalarFieldEnum = (typeof WorkoutDayScalarFieldEnum)[keyof typeof WorkoutDayScalarFieldEnum]


  export const WorkoutExerciseScalarFieldEnum: {
    id: 'id',
    workoutDayId: 'workoutDayId',
    name: 'name',
    order: 'order'
  };

  export type WorkoutExerciseScalarFieldEnum = (typeof WorkoutExerciseScalarFieldEnum)[keyof typeof WorkoutExerciseScalarFieldEnum]


  export const WorkoutSetScalarFieldEnum: {
    id: 'id',
    exerciseId: 'exerciseId',
    setNumber: 'setNumber',
    targetReps: 'targetReps',
    targetLoad: 'targetLoad'
  };

  export type WorkoutSetScalarFieldEnum = (typeof WorkoutSetScalarFieldEnum)[keyof typeof WorkoutSetScalarFieldEnum]


  export const WorkoutLogScalarFieldEnum: {
    id: 'id',
    workoutSetId: 'workoutSetId',
    date: 'date',
    actualReps: 'actualReps',
    actualLoad: 'actualLoad'
  };

  export type WorkoutLogScalarFieldEnum = (typeof WorkoutLogScalarFieldEnum)[keyof typeof WorkoutLogScalarFieldEnum]


  export const MealPlanScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    observations: 'observations',
    validFrom: 'validFrom',
    validUntil: 'validUntil',
    isActive: 'isActive',
    createdAt: 'createdAt',
    nutritionistId: 'nutritionistId',
    patientId: 'patientId'
  };

  export type MealPlanScalarFieldEnum = (typeof MealPlanScalarFieldEnum)[keyof typeof MealPlanScalarFieldEnum]


  export const MealScalarFieldEnum: {
    id: 'id',
    mealPlanId: 'mealPlanId',
    name: 'name',
    order: 'order'
  };

  export type MealScalarFieldEnum = (typeof MealScalarFieldEnum)[keyof typeof MealScalarFieldEnum]


  export const MealItemScalarFieldEnum: {
    id: 'id',
    mealId: 'mealId',
    foodName: 'foodName',
    quantity: 'quantity',
    notes: 'notes'
  };

  export type MealItemScalarFieldEnum = (typeof MealItemScalarFieldEnum)[keyof typeof MealItemScalarFieldEnum]


  export const PhysicalAssessmentScalarFieldEnum: {
    id: 'id',
    method: 'method',
    date: 'date',
    nextAssessment: 'nextAssessment',
    data: 'data',
    patientId: 'patientId',
    createdById: 'createdById'
  };

  export type PhysicalAssessmentScalarFieldEnum = (typeof PhysicalAssessmentScalarFieldEnum)[keyof typeof PhysicalAssessmentScalarFieldEnum]


  export const DataSharingScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    professionalId: 'professionalId',
    role: 'role',
    shareWorkoutWith: 'shareWorkoutWith',
    shareMealWith: 'shareMealWith'
  };

  export type DataSharingScalarFieldEnum = (typeof DataSharingScalarFieldEnum)[keyof typeof DataSharingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    birthDate?: DateTimeFilter<"User"> | Date | string
    gender?: EnumGenderFilter<"User"> | $Enums.Gender
    peso?: FloatNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    trainerPlans?: WorkoutPlanListRelationFilter
    patientPlans?: WorkoutPlanListRelationFilter
    assessments?: PhysicalAssessmentListRelationFilter
    createdAssessments?: PhysicalAssessmentListRelationFilter
    nutritionistPlans?: MealPlanListRelationFilter
    mealPatientPlans?: MealPlanListRelationFilter
    patientDataSharing?: DataSharingListRelationFilter
    professionalDataSharing?: DataSharingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    peso?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    trainerPlans?: WorkoutPlanOrderByRelationAggregateInput
    patientPlans?: WorkoutPlanOrderByRelationAggregateInput
    assessments?: PhysicalAssessmentOrderByRelationAggregateInput
    createdAssessments?: PhysicalAssessmentOrderByRelationAggregateInput
    nutritionistPlans?: MealPlanOrderByRelationAggregateInput
    mealPatientPlans?: MealPlanOrderByRelationAggregateInput
    patientDataSharing?: DataSharingOrderByRelationAggregateInput
    professionalDataSharing?: DataSharingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    birthDate?: DateTimeFilter<"User"> | Date | string
    gender?: EnumGenderFilter<"User"> | $Enums.Gender
    peso?: FloatNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    trainerPlans?: WorkoutPlanListRelationFilter
    patientPlans?: WorkoutPlanListRelationFilter
    assessments?: PhysicalAssessmentListRelationFilter
    createdAssessments?: PhysicalAssessmentListRelationFilter
    nutritionistPlans?: MealPlanListRelationFilter
    mealPatientPlans?: MealPlanListRelationFilter
    patientDataSharing?: DataSharingListRelationFilter
    professionalDataSharing?: DataSharingListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    peso?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    birthDate?: DateTimeWithAggregatesFilter<"User"> | Date | string
    gender?: EnumGenderWithAggregatesFilter<"User"> | $Enums.Gender
    peso?: FloatNullableWithAggregatesFilter<"User"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WorkoutPlanWhereInput = {
    AND?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    OR?: WorkoutPlanWhereInput[]
    NOT?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    id?: IntFilter<"WorkoutPlan"> | number
    title?: StringFilter<"WorkoutPlan"> | string
    description?: StringFilter<"WorkoutPlan"> | string
    validFrom?: DateTimeFilter<"WorkoutPlan"> | Date | string
    validUntil?: DateTimeFilter<"WorkoutPlan"> | Date | string
    isActive?: BoolFilter<"WorkoutPlan"> | boolean
    createdAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    trainerId?: IntFilter<"WorkoutPlan"> | number
    patientId?: IntFilter<"WorkoutPlan"> | number
    trainer?: XOR<UserRelationFilter, UserWhereInput>
    patient?: XOR<UserRelationFilter, UserWhereInput>
    workoutDays?: WorkoutDayListRelationFilter
  }

  export type WorkoutPlanOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
    trainer?: UserOrderByWithRelationInput
    patient?: UserOrderByWithRelationInput
    workoutDays?: WorkoutDayOrderByRelationAggregateInput
  }

  export type WorkoutPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    OR?: WorkoutPlanWhereInput[]
    NOT?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    title?: StringFilter<"WorkoutPlan"> | string
    description?: StringFilter<"WorkoutPlan"> | string
    validFrom?: DateTimeFilter<"WorkoutPlan"> | Date | string
    validUntil?: DateTimeFilter<"WorkoutPlan"> | Date | string
    isActive?: BoolFilter<"WorkoutPlan"> | boolean
    createdAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    trainerId?: IntFilter<"WorkoutPlan"> | number
    patientId?: IntFilter<"WorkoutPlan"> | number
    trainer?: XOR<UserRelationFilter, UserWhereInput>
    patient?: XOR<UserRelationFilter, UserWhereInput>
    workoutDays?: WorkoutDayListRelationFilter
  }, "id">

  export type WorkoutPlanOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
    _count?: WorkoutPlanCountOrderByAggregateInput
    _avg?: WorkoutPlanAvgOrderByAggregateInput
    _max?: WorkoutPlanMaxOrderByAggregateInput
    _min?: WorkoutPlanMinOrderByAggregateInput
    _sum?: WorkoutPlanSumOrderByAggregateInput
  }

  export type WorkoutPlanScalarWhereWithAggregatesInput = {
    AND?: WorkoutPlanScalarWhereWithAggregatesInput | WorkoutPlanScalarWhereWithAggregatesInput[]
    OR?: WorkoutPlanScalarWhereWithAggregatesInput[]
    NOT?: WorkoutPlanScalarWhereWithAggregatesInput | WorkoutPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkoutPlan"> | number
    title?: StringWithAggregatesFilter<"WorkoutPlan"> | string
    description?: StringWithAggregatesFilter<"WorkoutPlan"> | string
    validFrom?: DateTimeWithAggregatesFilter<"WorkoutPlan"> | Date | string
    validUntil?: DateTimeWithAggregatesFilter<"WorkoutPlan"> | Date | string
    isActive?: BoolWithAggregatesFilter<"WorkoutPlan"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutPlan"> | Date | string
    trainerId?: IntWithAggregatesFilter<"WorkoutPlan"> | number
    patientId?: IntWithAggregatesFilter<"WorkoutPlan"> | number
  }

  export type WorkoutDayWhereInput = {
    AND?: WorkoutDayWhereInput | WorkoutDayWhereInput[]
    OR?: WorkoutDayWhereInput[]
    NOT?: WorkoutDayWhereInput | WorkoutDayWhereInput[]
    id?: IntFilter<"WorkoutDay"> | number
    workoutPlanId?: IntFilter<"WorkoutDay"> | number
    dayOfWeek?: StringFilter<"WorkoutDay"> | string
    muscleGroup?: StringFilter<"WorkoutDay"> | string
    workoutPlan?: XOR<WorkoutPlanRelationFilter, WorkoutPlanWhereInput>
    exercises?: WorkoutExerciseListRelationFilter
  }

  export type WorkoutDayOrderByWithRelationInput = {
    id?: SortOrder
    workoutPlanId?: SortOrder
    dayOfWeek?: SortOrder
    muscleGroup?: SortOrder
    workoutPlan?: WorkoutPlanOrderByWithRelationInput
    exercises?: WorkoutExerciseOrderByRelationAggregateInput
  }

  export type WorkoutDayWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkoutDayWhereInput | WorkoutDayWhereInput[]
    OR?: WorkoutDayWhereInput[]
    NOT?: WorkoutDayWhereInput | WorkoutDayWhereInput[]
    workoutPlanId?: IntFilter<"WorkoutDay"> | number
    dayOfWeek?: StringFilter<"WorkoutDay"> | string
    muscleGroup?: StringFilter<"WorkoutDay"> | string
    workoutPlan?: XOR<WorkoutPlanRelationFilter, WorkoutPlanWhereInput>
    exercises?: WorkoutExerciseListRelationFilter
  }, "id">

  export type WorkoutDayOrderByWithAggregationInput = {
    id?: SortOrder
    workoutPlanId?: SortOrder
    dayOfWeek?: SortOrder
    muscleGroup?: SortOrder
    _count?: WorkoutDayCountOrderByAggregateInput
    _avg?: WorkoutDayAvgOrderByAggregateInput
    _max?: WorkoutDayMaxOrderByAggregateInput
    _min?: WorkoutDayMinOrderByAggregateInput
    _sum?: WorkoutDaySumOrderByAggregateInput
  }

  export type WorkoutDayScalarWhereWithAggregatesInput = {
    AND?: WorkoutDayScalarWhereWithAggregatesInput | WorkoutDayScalarWhereWithAggregatesInput[]
    OR?: WorkoutDayScalarWhereWithAggregatesInput[]
    NOT?: WorkoutDayScalarWhereWithAggregatesInput | WorkoutDayScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkoutDay"> | number
    workoutPlanId?: IntWithAggregatesFilter<"WorkoutDay"> | number
    dayOfWeek?: StringWithAggregatesFilter<"WorkoutDay"> | string
    muscleGroup?: StringWithAggregatesFilter<"WorkoutDay"> | string
  }

  export type WorkoutExerciseWhereInput = {
    AND?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    OR?: WorkoutExerciseWhereInput[]
    NOT?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    id?: IntFilter<"WorkoutExercise"> | number
    workoutDayId?: IntFilter<"WorkoutExercise"> | number
    name?: StringFilter<"WorkoutExercise"> | string
    order?: IntFilter<"WorkoutExercise"> | number
    workoutDay?: XOR<WorkoutDayRelationFilter, WorkoutDayWhereInput>
    sets?: WorkoutSetListRelationFilter
  }

  export type WorkoutExerciseOrderByWithRelationInput = {
    id?: SortOrder
    workoutDayId?: SortOrder
    name?: SortOrder
    order?: SortOrder
    workoutDay?: WorkoutDayOrderByWithRelationInput
    sets?: WorkoutSetOrderByRelationAggregateInput
  }

  export type WorkoutExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    OR?: WorkoutExerciseWhereInput[]
    NOT?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    workoutDayId?: IntFilter<"WorkoutExercise"> | number
    name?: StringFilter<"WorkoutExercise"> | string
    order?: IntFilter<"WorkoutExercise"> | number
    workoutDay?: XOR<WorkoutDayRelationFilter, WorkoutDayWhereInput>
    sets?: WorkoutSetListRelationFilter
  }, "id">

  export type WorkoutExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    workoutDayId?: SortOrder
    name?: SortOrder
    order?: SortOrder
    _count?: WorkoutExerciseCountOrderByAggregateInput
    _avg?: WorkoutExerciseAvgOrderByAggregateInput
    _max?: WorkoutExerciseMaxOrderByAggregateInput
    _min?: WorkoutExerciseMinOrderByAggregateInput
    _sum?: WorkoutExerciseSumOrderByAggregateInput
  }

  export type WorkoutExerciseScalarWhereWithAggregatesInput = {
    AND?: WorkoutExerciseScalarWhereWithAggregatesInput | WorkoutExerciseScalarWhereWithAggregatesInput[]
    OR?: WorkoutExerciseScalarWhereWithAggregatesInput[]
    NOT?: WorkoutExerciseScalarWhereWithAggregatesInput | WorkoutExerciseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkoutExercise"> | number
    workoutDayId?: IntWithAggregatesFilter<"WorkoutExercise"> | number
    name?: StringWithAggregatesFilter<"WorkoutExercise"> | string
    order?: IntWithAggregatesFilter<"WorkoutExercise"> | number
  }

  export type WorkoutSetWhereInput = {
    AND?: WorkoutSetWhereInput | WorkoutSetWhereInput[]
    OR?: WorkoutSetWhereInput[]
    NOT?: WorkoutSetWhereInput | WorkoutSetWhereInput[]
    id?: IntFilter<"WorkoutSet"> | number
    exerciseId?: IntFilter<"WorkoutSet"> | number
    setNumber?: IntFilter<"WorkoutSet"> | number
    targetReps?: IntFilter<"WorkoutSet"> | number
    targetLoad?: FloatFilter<"WorkoutSet"> | number
    exercise?: XOR<WorkoutExerciseRelationFilter, WorkoutExerciseWhereInput>
    logs?: WorkoutLogListRelationFilter
  }

  export type WorkoutSetOrderByWithRelationInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    setNumber?: SortOrder
    targetReps?: SortOrder
    targetLoad?: SortOrder
    exercise?: WorkoutExerciseOrderByWithRelationInput
    logs?: WorkoutLogOrderByRelationAggregateInput
  }

  export type WorkoutSetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkoutSetWhereInput | WorkoutSetWhereInput[]
    OR?: WorkoutSetWhereInput[]
    NOT?: WorkoutSetWhereInput | WorkoutSetWhereInput[]
    exerciseId?: IntFilter<"WorkoutSet"> | number
    setNumber?: IntFilter<"WorkoutSet"> | number
    targetReps?: IntFilter<"WorkoutSet"> | number
    targetLoad?: FloatFilter<"WorkoutSet"> | number
    exercise?: XOR<WorkoutExerciseRelationFilter, WorkoutExerciseWhereInput>
    logs?: WorkoutLogListRelationFilter
  }, "id">

  export type WorkoutSetOrderByWithAggregationInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    setNumber?: SortOrder
    targetReps?: SortOrder
    targetLoad?: SortOrder
    _count?: WorkoutSetCountOrderByAggregateInput
    _avg?: WorkoutSetAvgOrderByAggregateInput
    _max?: WorkoutSetMaxOrderByAggregateInput
    _min?: WorkoutSetMinOrderByAggregateInput
    _sum?: WorkoutSetSumOrderByAggregateInput
  }

  export type WorkoutSetScalarWhereWithAggregatesInput = {
    AND?: WorkoutSetScalarWhereWithAggregatesInput | WorkoutSetScalarWhereWithAggregatesInput[]
    OR?: WorkoutSetScalarWhereWithAggregatesInput[]
    NOT?: WorkoutSetScalarWhereWithAggregatesInput | WorkoutSetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkoutSet"> | number
    exerciseId?: IntWithAggregatesFilter<"WorkoutSet"> | number
    setNumber?: IntWithAggregatesFilter<"WorkoutSet"> | number
    targetReps?: IntWithAggregatesFilter<"WorkoutSet"> | number
    targetLoad?: FloatWithAggregatesFilter<"WorkoutSet"> | number
  }

  export type WorkoutLogWhereInput = {
    AND?: WorkoutLogWhereInput | WorkoutLogWhereInput[]
    OR?: WorkoutLogWhereInput[]
    NOT?: WorkoutLogWhereInput | WorkoutLogWhereInput[]
    id?: IntFilter<"WorkoutLog"> | number
    workoutSetId?: IntFilter<"WorkoutLog"> | number
    date?: DateTimeFilter<"WorkoutLog"> | Date | string
    actualReps?: IntFilter<"WorkoutLog"> | number
    actualLoad?: FloatFilter<"WorkoutLog"> | number
    workoutSet?: XOR<WorkoutSetRelationFilter, WorkoutSetWhereInput>
  }

  export type WorkoutLogOrderByWithRelationInput = {
    id?: SortOrder
    workoutSetId?: SortOrder
    date?: SortOrder
    actualReps?: SortOrder
    actualLoad?: SortOrder
    workoutSet?: WorkoutSetOrderByWithRelationInput
  }

  export type WorkoutLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkoutLogWhereInput | WorkoutLogWhereInput[]
    OR?: WorkoutLogWhereInput[]
    NOT?: WorkoutLogWhereInput | WorkoutLogWhereInput[]
    workoutSetId?: IntFilter<"WorkoutLog"> | number
    date?: DateTimeFilter<"WorkoutLog"> | Date | string
    actualReps?: IntFilter<"WorkoutLog"> | number
    actualLoad?: FloatFilter<"WorkoutLog"> | number
    workoutSet?: XOR<WorkoutSetRelationFilter, WorkoutSetWhereInput>
  }, "id">

  export type WorkoutLogOrderByWithAggregationInput = {
    id?: SortOrder
    workoutSetId?: SortOrder
    date?: SortOrder
    actualReps?: SortOrder
    actualLoad?: SortOrder
    _count?: WorkoutLogCountOrderByAggregateInput
    _avg?: WorkoutLogAvgOrderByAggregateInput
    _max?: WorkoutLogMaxOrderByAggregateInput
    _min?: WorkoutLogMinOrderByAggregateInput
    _sum?: WorkoutLogSumOrderByAggregateInput
  }

  export type WorkoutLogScalarWhereWithAggregatesInput = {
    AND?: WorkoutLogScalarWhereWithAggregatesInput | WorkoutLogScalarWhereWithAggregatesInput[]
    OR?: WorkoutLogScalarWhereWithAggregatesInput[]
    NOT?: WorkoutLogScalarWhereWithAggregatesInput | WorkoutLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkoutLog"> | number
    workoutSetId?: IntWithAggregatesFilter<"WorkoutLog"> | number
    date?: DateTimeWithAggregatesFilter<"WorkoutLog"> | Date | string
    actualReps?: IntWithAggregatesFilter<"WorkoutLog"> | number
    actualLoad?: FloatWithAggregatesFilter<"WorkoutLog"> | number
  }

  export type MealPlanWhereInput = {
    AND?: MealPlanWhereInput | MealPlanWhereInput[]
    OR?: MealPlanWhereInput[]
    NOT?: MealPlanWhereInput | MealPlanWhereInput[]
    id?: IntFilter<"MealPlan"> | number
    title?: StringFilter<"MealPlan"> | string
    description?: StringFilter<"MealPlan"> | string
    observations?: StringNullableFilter<"MealPlan"> | string | null
    validFrom?: DateTimeFilter<"MealPlan"> | Date | string
    validUntil?: DateTimeFilter<"MealPlan"> | Date | string
    isActive?: BoolFilter<"MealPlan"> | boolean
    createdAt?: DateTimeFilter<"MealPlan"> | Date | string
    nutritionistId?: IntFilter<"MealPlan"> | number
    patientId?: IntFilter<"MealPlan"> | number
    nutritionist?: XOR<UserRelationFilter, UserWhereInput>
    patient?: XOR<UserRelationFilter, UserWhereInput>
    meals?: MealListRelationFilter
  }

  export type MealPlanOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    observations?: SortOrderInput | SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
    nutritionist?: UserOrderByWithRelationInput
    patient?: UserOrderByWithRelationInput
    meals?: MealOrderByRelationAggregateInput
  }

  export type MealPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MealPlanWhereInput | MealPlanWhereInput[]
    OR?: MealPlanWhereInput[]
    NOT?: MealPlanWhereInput | MealPlanWhereInput[]
    title?: StringFilter<"MealPlan"> | string
    description?: StringFilter<"MealPlan"> | string
    observations?: StringNullableFilter<"MealPlan"> | string | null
    validFrom?: DateTimeFilter<"MealPlan"> | Date | string
    validUntil?: DateTimeFilter<"MealPlan"> | Date | string
    isActive?: BoolFilter<"MealPlan"> | boolean
    createdAt?: DateTimeFilter<"MealPlan"> | Date | string
    nutritionistId?: IntFilter<"MealPlan"> | number
    patientId?: IntFilter<"MealPlan"> | number
    nutritionist?: XOR<UserRelationFilter, UserWhereInput>
    patient?: XOR<UserRelationFilter, UserWhereInput>
    meals?: MealListRelationFilter
  }, "id">

  export type MealPlanOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    observations?: SortOrderInput | SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
    _count?: MealPlanCountOrderByAggregateInput
    _avg?: MealPlanAvgOrderByAggregateInput
    _max?: MealPlanMaxOrderByAggregateInput
    _min?: MealPlanMinOrderByAggregateInput
    _sum?: MealPlanSumOrderByAggregateInput
  }

  export type MealPlanScalarWhereWithAggregatesInput = {
    AND?: MealPlanScalarWhereWithAggregatesInput | MealPlanScalarWhereWithAggregatesInput[]
    OR?: MealPlanScalarWhereWithAggregatesInput[]
    NOT?: MealPlanScalarWhereWithAggregatesInput | MealPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MealPlan"> | number
    title?: StringWithAggregatesFilter<"MealPlan"> | string
    description?: StringWithAggregatesFilter<"MealPlan"> | string
    observations?: StringNullableWithAggregatesFilter<"MealPlan"> | string | null
    validFrom?: DateTimeWithAggregatesFilter<"MealPlan"> | Date | string
    validUntil?: DateTimeWithAggregatesFilter<"MealPlan"> | Date | string
    isActive?: BoolWithAggregatesFilter<"MealPlan"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MealPlan"> | Date | string
    nutritionistId?: IntWithAggregatesFilter<"MealPlan"> | number
    patientId?: IntWithAggregatesFilter<"MealPlan"> | number
  }

  export type MealWhereInput = {
    AND?: MealWhereInput | MealWhereInput[]
    OR?: MealWhereInput[]
    NOT?: MealWhereInput | MealWhereInput[]
    id?: IntFilter<"Meal"> | number
    mealPlanId?: IntFilter<"Meal"> | number
    name?: StringFilter<"Meal"> | string
    order?: IntFilter<"Meal"> | number
    mealPlan?: XOR<MealPlanRelationFilter, MealPlanWhereInput>
    items?: MealItemListRelationFilter
  }

  export type MealOrderByWithRelationInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    name?: SortOrder
    order?: SortOrder
    mealPlan?: MealPlanOrderByWithRelationInput
    items?: MealItemOrderByRelationAggregateInput
  }

  export type MealWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MealWhereInput | MealWhereInput[]
    OR?: MealWhereInput[]
    NOT?: MealWhereInput | MealWhereInput[]
    mealPlanId?: IntFilter<"Meal"> | number
    name?: StringFilter<"Meal"> | string
    order?: IntFilter<"Meal"> | number
    mealPlan?: XOR<MealPlanRelationFilter, MealPlanWhereInput>
    items?: MealItemListRelationFilter
  }, "id">

  export type MealOrderByWithAggregationInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    name?: SortOrder
    order?: SortOrder
    _count?: MealCountOrderByAggregateInput
    _avg?: MealAvgOrderByAggregateInput
    _max?: MealMaxOrderByAggregateInput
    _min?: MealMinOrderByAggregateInput
    _sum?: MealSumOrderByAggregateInput
  }

  export type MealScalarWhereWithAggregatesInput = {
    AND?: MealScalarWhereWithAggregatesInput | MealScalarWhereWithAggregatesInput[]
    OR?: MealScalarWhereWithAggregatesInput[]
    NOT?: MealScalarWhereWithAggregatesInput | MealScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Meal"> | number
    mealPlanId?: IntWithAggregatesFilter<"Meal"> | number
    name?: StringWithAggregatesFilter<"Meal"> | string
    order?: IntWithAggregatesFilter<"Meal"> | number
  }

  export type MealItemWhereInput = {
    AND?: MealItemWhereInput | MealItemWhereInput[]
    OR?: MealItemWhereInput[]
    NOT?: MealItemWhereInput | MealItemWhereInput[]
    id?: IntFilter<"MealItem"> | number
    mealId?: IntFilter<"MealItem"> | number
    foodName?: StringFilter<"MealItem"> | string
    quantity?: StringFilter<"MealItem"> | string
    notes?: StringNullableFilter<"MealItem"> | string | null
    meal?: XOR<MealRelationFilter, MealWhereInput>
  }

  export type MealItemOrderByWithRelationInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodName?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    meal?: MealOrderByWithRelationInput
  }

  export type MealItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MealItemWhereInput | MealItemWhereInput[]
    OR?: MealItemWhereInput[]
    NOT?: MealItemWhereInput | MealItemWhereInput[]
    mealId?: IntFilter<"MealItem"> | number
    foodName?: StringFilter<"MealItem"> | string
    quantity?: StringFilter<"MealItem"> | string
    notes?: StringNullableFilter<"MealItem"> | string | null
    meal?: XOR<MealRelationFilter, MealWhereInput>
  }, "id">

  export type MealItemOrderByWithAggregationInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodName?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: MealItemCountOrderByAggregateInput
    _avg?: MealItemAvgOrderByAggregateInput
    _max?: MealItemMaxOrderByAggregateInput
    _min?: MealItemMinOrderByAggregateInput
    _sum?: MealItemSumOrderByAggregateInput
  }

  export type MealItemScalarWhereWithAggregatesInput = {
    AND?: MealItemScalarWhereWithAggregatesInput | MealItemScalarWhereWithAggregatesInput[]
    OR?: MealItemScalarWhereWithAggregatesInput[]
    NOT?: MealItemScalarWhereWithAggregatesInput | MealItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MealItem"> | number
    mealId?: IntWithAggregatesFilter<"MealItem"> | number
    foodName?: StringWithAggregatesFilter<"MealItem"> | string
    quantity?: StringWithAggregatesFilter<"MealItem"> | string
    notes?: StringNullableWithAggregatesFilter<"MealItem"> | string | null
  }

  export type PhysicalAssessmentWhereInput = {
    AND?: PhysicalAssessmentWhereInput | PhysicalAssessmentWhereInput[]
    OR?: PhysicalAssessmentWhereInput[]
    NOT?: PhysicalAssessmentWhereInput | PhysicalAssessmentWhereInput[]
    id?: IntFilter<"PhysicalAssessment"> | number
    method?: StringFilter<"PhysicalAssessment"> | string
    date?: DateTimeFilter<"PhysicalAssessment"> | Date | string
    nextAssessment?: DateTimeNullableFilter<"PhysicalAssessment"> | Date | string | null
    data?: JsonFilter<"PhysicalAssessment">
    patientId?: IntFilter<"PhysicalAssessment"> | number
    createdById?: IntFilter<"PhysicalAssessment"> | number
    patient?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PhysicalAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    nextAssessment?: SortOrderInput | SortOrder
    data?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
    patient?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type PhysicalAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PhysicalAssessmentWhereInput | PhysicalAssessmentWhereInput[]
    OR?: PhysicalAssessmentWhereInput[]
    NOT?: PhysicalAssessmentWhereInput | PhysicalAssessmentWhereInput[]
    method?: StringFilter<"PhysicalAssessment"> | string
    date?: DateTimeFilter<"PhysicalAssessment"> | Date | string
    nextAssessment?: DateTimeNullableFilter<"PhysicalAssessment"> | Date | string | null
    data?: JsonFilter<"PhysicalAssessment">
    patientId?: IntFilter<"PhysicalAssessment"> | number
    createdById?: IntFilter<"PhysicalAssessment"> | number
    patient?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PhysicalAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    nextAssessment?: SortOrderInput | SortOrder
    data?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
    _count?: PhysicalAssessmentCountOrderByAggregateInput
    _avg?: PhysicalAssessmentAvgOrderByAggregateInput
    _max?: PhysicalAssessmentMaxOrderByAggregateInput
    _min?: PhysicalAssessmentMinOrderByAggregateInput
    _sum?: PhysicalAssessmentSumOrderByAggregateInput
  }

  export type PhysicalAssessmentScalarWhereWithAggregatesInput = {
    AND?: PhysicalAssessmentScalarWhereWithAggregatesInput | PhysicalAssessmentScalarWhereWithAggregatesInput[]
    OR?: PhysicalAssessmentScalarWhereWithAggregatesInput[]
    NOT?: PhysicalAssessmentScalarWhereWithAggregatesInput | PhysicalAssessmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PhysicalAssessment"> | number
    method?: StringWithAggregatesFilter<"PhysicalAssessment"> | string
    date?: DateTimeWithAggregatesFilter<"PhysicalAssessment"> | Date | string
    nextAssessment?: DateTimeNullableWithAggregatesFilter<"PhysicalAssessment"> | Date | string | null
    data?: JsonWithAggregatesFilter<"PhysicalAssessment">
    patientId?: IntWithAggregatesFilter<"PhysicalAssessment"> | number
    createdById?: IntWithAggregatesFilter<"PhysicalAssessment"> | number
  }

  export type DataSharingWhereInput = {
    AND?: DataSharingWhereInput | DataSharingWhereInput[]
    OR?: DataSharingWhereInput[]
    NOT?: DataSharingWhereInput | DataSharingWhereInput[]
    id?: IntFilter<"DataSharing"> | number
    patientId?: IntFilter<"DataSharing"> | number
    professionalId?: IntFilter<"DataSharing"> | number
    role?: EnumRoleFilter<"DataSharing"> | $Enums.Role
    shareWorkoutWith?: BoolFilter<"DataSharing"> | boolean
    shareMealWith?: BoolFilter<"DataSharing"> | boolean
    patient?: XOR<UserRelationFilter, UserWhereInput>
    professional?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DataSharingOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    professionalId?: SortOrder
    role?: SortOrder
    shareWorkoutWith?: SortOrder
    shareMealWith?: SortOrder
    patient?: UserOrderByWithRelationInput
    professional?: UserOrderByWithRelationInput
  }

  export type DataSharingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    patientId_professionalId_role?: DataSharingPatientIdProfessionalIdRoleCompoundUniqueInput
    AND?: DataSharingWhereInput | DataSharingWhereInput[]
    OR?: DataSharingWhereInput[]
    NOT?: DataSharingWhereInput | DataSharingWhereInput[]
    patientId?: IntFilter<"DataSharing"> | number
    professionalId?: IntFilter<"DataSharing"> | number
    role?: EnumRoleFilter<"DataSharing"> | $Enums.Role
    shareWorkoutWith?: BoolFilter<"DataSharing"> | boolean
    shareMealWith?: BoolFilter<"DataSharing"> | boolean
    patient?: XOR<UserRelationFilter, UserWhereInput>
    professional?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "patientId_professionalId_role">

  export type DataSharingOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    professionalId?: SortOrder
    role?: SortOrder
    shareWorkoutWith?: SortOrder
    shareMealWith?: SortOrder
    _count?: DataSharingCountOrderByAggregateInput
    _avg?: DataSharingAvgOrderByAggregateInput
    _max?: DataSharingMaxOrderByAggregateInput
    _min?: DataSharingMinOrderByAggregateInput
    _sum?: DataSharingSumOrderByAggregateInput
  }

  export type DataSharingScalarWhereWithAggregatesInput = {
    AND?: DataSharingScalarWhereWithAggregatesInput | DataSharingScalarWhereWithAggregatesInput[]
    OR?: DataSharingScalarWhereWithAggregatesInput[]
    NOT?: DataSharingScalarWhereWithAggregatesInput | DataSharingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DataSharing"> | number
    patientId?: IntWithAggregatesFilter<"DataSharing"> | number
    professionalId?: IntWithAggregatesFilter<"DataSharing"> | number
    role?: EnumRoleWithAggregatesFilter<"DataSharing"> | $Enums.Role
    shareWorkoutWith?: BoolWithAggregatesFilter<"DataSharing"> | boolean
    shareMealWith?: BoolWithAggregatesFilter<"DataSharing"> | boolean
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingCreateNestedManyWithoutProfessionalInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingUncheckedCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUncheckedUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutPlanCreateInput = {
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    trainer: UserCreateNestedOneWithoutTrainerPlansInput
    patient: UserCreateNestedOneWithoutPatientPlansInput
    workoutDays?: WorkoutDayCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    trainerId: number
    patientId: number
    workoutDays?: WorkoutDayUncheckedCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainer?: UserUpdateOneRequiredWithoutTrainerPlansNestedInput
    patient?: UserUpdateOneRequiredWithoutPatientPlansNestedInput
    workoutDays?: WorkoutDayUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    workoutDays?: WorkoutDayUncheckedUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanCreateManyInput = {
    id?: number
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    trainerId: number
    patientId: number
  }

  export type WorkoutPlanUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutDayCreateInput = {
    dayOfWeek: string
    muscleGroup: string
    workoutPlan: WorkoutPlanCreateNestedOneWithoutWorkoutDaysInput
    exercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutDayInput
  }

  export type WorkoutDayUncheckedCreateInput = {
    id?: number
    workoutPlanId: number
    dayOfWeek: string
    muscleGroup: string
    exercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutDayInput
  }

  export type WorkoutDayUpdateInput = {
    dayOfWeek?: StringFieldUpdateOperationsInput | string
    muscleGroup?: StringFieldUpdateOperationsInput | string
    workoutPlan?: WorkoutPlanUpdateOneRequiredWithoutWorkoutDaysNestedInput
    exercises?: WorkoutExerciseUpdateManyWithoutWorkoutDayNestedInput
  }

  export type WorkoutDayUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutPlanId?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: StringFieldUpdateOperationsInput | string
    muscleGroup?: StringFieldUpdateOperationsInput | string
    exercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutDayNestedInput
  }

  export type WorkoutDayCreateManyInput = {
    id?: number
    workoutPlanId: number
    dayOfWeek: string
    muscleGroup: string
  }

  export type WorkoutDayUpdateManyMutationInput = {
    dayOfWeek?: StringFieldUpdateOperationsInput | string
    muscleGroup?: StringFieldUpdateOperationsInput | string
  }

  export type WorkoutDayUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutPlanId?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: StringFieldUpdateOperationsInput | string
    muscleGroup?: StringFieldUpdateOperationsInput | string
  }

  export type WorkoutExerciseCreateInput = {
    name: string
    order: number
    workoutDay: WorkoutDayCreateNestedOneWithoutExercisesInput
    sets?: WorkoutSetCreateNestedManyWithoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateInput = {
    id?: number
    workoutDayId: number
    name: string
    order: number
    sets?: WorkoutSetUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type WorkoutExerciseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    workoutDay?: WorkoutDayUpdateOneRequiredWithoutExercisesNestedInput
    sets?: WorkoutSetUpdateManyWithoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutDayId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: WorkoutSetUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type WorkoutExerciseCreateManyInput = {
    id?: number
    workoutDayId: number
    name: string
    order: number
  }

  export type WorkoutExerciseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutExerciseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutDayId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutSetCreateInput = {
    setNumber: number
    targetReps: number
    targetLoad: number
    exercise: WorkoutExerciseCreateNestedOneWithoutSetsInput
    logs?: WorkoutLogCreateNestedManyWithoutWorkoutSetInput
  }

  export type WorkoutSetUncheckedCreateInput = {
    id?: number
    exerciseId: number
    setNumber: number
    targetReps: number
    targetLoad: number
    logs?: WorkoutLogUncheckedCreateNestedManyWithoutWorkoutSetInput
  }

  export type WorkoutSetUpdateInput = {
    setNumber?: IntFieldUpdateOperationsInput | number
    targetReps?: IntFieldUpdateOperationsInput | number
    targetLoad?: FloatFieldUpdateOperationsInput | number
    exercise?: WorkoutExerciseUpdateOneRequiredWithoutSetsNestedInput
    logs?: WorkoutLogUpdateManyWithoutWorkoutSetNestedInput
  }

  export type WorkoutSetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    exerciseId?: IntFieldUpdateOperationsInput | number
    setNumber?: IntFieldUpdateOperationsInput | number
    targetReps?: IntFieldUpdateOperationsInput | number
    targetLoad?: FloatFieldUpdateOperationsInput | number
    logs?: WorkoutLogUncheckedUpdateManyWithoutWorkoutSetNestedInput
  }

  export type WorkoutSetCreateManyInput = {
    id?: number
    exerciseId: number
    setNumber: number
    targetReps: number
    targetLoad: number
  }

  export type WorkoutSetUpdateManyMutationInput = {
    setNumber?: IntFieldUpdateOperationsInput | number
    targetReps?: IntFieldUpdateOperationsInput | number
    targetLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkoutSetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    exerciseId?: IntFieldUpdateOperationsInput | number
    setNumber?: IntFieldUpdateOperationsInput | number
    targetReps?: IntFieldUpdateOperationsInput | number
    targetLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkoutLogCreateInput = {
    date: Date | string
    actualReps: number
    actualLoad: number
    workoutSet: WorkoutSetCreateNestedOneWithoutLogsInput
  }

  export type WorkoutLogUncheckedCreateInput = {
    id?: number
    workoutSetId: number
    date: Date | string
    actualReps: number
    actualLoad: number
  }

  export type WorkoutLogUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReps?: IntFieldUpdateOperationsInput | number
    actualLoad?: FloatFieldUpdateOperationsInput | number
    workoutSet?: WorkoutSetUpdateOneRequiredWithoutLogsNestedInput
  }

  export type WorkoutLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutSetId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReps?: IntFieldUpdateOperationsInput | number
    actualLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkoutLogCreateManyInput = {
    id?: number
    workoutSetId: number
    date: Date | string
    actualReps: number
    actualLoad: number
  }

  export type WorkoutLogUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReps?: IntFieldUpdateOperationsInput | number
    actualLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkoutLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutSetId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReps?: IntFieldUpdateOperationsInput | number
    actualLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type MealPlanCreateInput = {
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    nutritionist: UserCreateNestedOneWithoutNutritionistPlansInput
    patient: UserCreateNestedOneWithoutMealPatientPlansInput
    meals?: MealCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    nutritionistId: number
    patientId: number
    meals?: MealUncheckedCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionist?: UserUpdateOneRequiredWithoutNutritionistPlansNestedInput
    patient?: UserUpdateOneRequiredWithoutMealPatientPlansNestedInput
    meals?: MealUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionistId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    meals?: MealUncheckedUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanCreateManyInput = {
    id?: number
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    nutritionistId: number
    patientId: number
  }

  export type MealPlanUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionistId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MealCreateInput = {
    name: string
    order: number
    mealPlan: MealPlanCreateNestedOneWithoutMealsInput
    items?: MealItemCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateInput = {
    id?: number
    mealPlanId: number
    name: string
    order: number
    items?: MealItemUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    mealPlan?: MealPlanUpdateOneRequiredWithoutMealsNestedInput
    items?: MealItemUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mealPlanId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    items?: MealItemUncheckedUpdateManyWithoutMealNestedInput
  }

  export type MealCreateManyInput = {
    id?: number
    mealPlanId: number
    name: string
    order: number
  }

  export type MealUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type MealUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mealPlanId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type MealItemCreateInput = {
    foodName: string
    quantity: string
    notes?: string | null
    meal: MealCreateNestedOneWithoutItemsInput
  }

  export type MealItemUncheckedCreateInput = {
    id?: number
    mealId: number
    foodName: string
    quantity: string
    notes?: string | null
  }

  export type MealItemUpdateInput = {
    foodName?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meal?: MealUpdateOneRequiredWithoutItemsNestedInput
  }

  export type MealItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mealId?: IntFieldUpdateOperationsInput | number
    foodName?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealItemCreateManyInput = {
    id?: number
    mealId: number
    foodName: string
    quantity: string
    notes?: string | null
  }

  export type MealItemUpdateManyMutationInput = {
    foodName?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mealId?: IntFieldUpdateOperationsInput | number
    foodName?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PhysicalAssessmentCreateInput = {
    method: string
    date?: Date | string
    nextAssessment?: Date | string | null
    data: JsonNullValueInput | InputJsonValue
    patient: UserCreateNestedOneWithoutAssessmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAssessmentsInput
  }

  export type PhysicalAssessmentUncheckedCreateInput = {
    id?: number
    method: string
    date?: Date | string
    nextAssessment?: Date | string | null
    data: JsonNullValueInput | InputJsonValue
    patientId: number
    createdById: number
  }

  export type PhysicalAssessmentUpdateInput = {
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
    patient?: UserUpdateOneRequiredWithoutAssessmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput
  }

  export type PhysicalAssessmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
    patientId?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentCreateManyInput = {
    id?: number
    method: string
    date?: Date | string
    nextAssessment?: Date | string | null
    data: JsonNullValueInput | InputJsonValue
    patientId: number
    createdById: number
  }

  export type PhysicalAssessmentUpdateManyMutationInput = {
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
  }

  export type PhysicalAssessmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
    patientId?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type DataSharingCreateInput = {
    role: $Enums.Role
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
    patient: UserCreateNestedOneWithoutPatientDataSharingInput
    professional: UserCreateNestedOneWithoutProfessionalDataSharingInput
  }

  export type DataSharingUncheckedCreateInput = {
    id?: number
    patientId: number
    professionalId: number
    role: $Enums.Role
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
  }

  export type DataSharingUpdateInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
    patient?: UserUpdateOneRequiredWithoutPatientDataSharingNestedInput
    professional?: UserUpdateOneRequiredWithoutProfessionalDataSharingNestedInput
  }

  export type DataSharingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    professionalId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DataSharingCreateManyInput = {
    id?: number
    patientId: number
    professionalId: number
    role: $Enums.Role
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
  }

  export type DataSharingUpdateManyMutationInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DataSharingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    professionalId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type WorkoutPlanListRelationFilter = {
    every?: WorkoutPlanWhereInput
    some?: WorkoutPlanWhereInput
    none?: WorkoutPlanWhereInput
  }

  export type PhysicalAssessmentListRelationFilter = {
    every?: PhysicalAssessmentWhereInput
    some?: PhysicalAssessmentWhereInput
    none?: PhysicalAssessmentWhereInput
  }

  export type MealPlanListRelationFilter = {
    every?: MealPlanWhereInput
    some?: MealPlanWhereInput
    none?: MealPlanWhereInput
  }

  export type DataSharingListRelationFilter = {
    every?: DataSharingWhereInput
    some?: DataSharingWhereInput
    none?: DataSharingWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WorkoutPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PhysicalAssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DataSharingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    peso?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    peso?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    peso?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    peso?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    peso?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WorkoutDayListRelationFilter = {
    every?: WorkoutDayWhereInput
    some?: WorkoutDayWhereInput
    none?: WorkoutDayWhereInput
  }

  export type WorkoutDayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutPlanCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type WorkoutPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type WorkoutPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type WorkoutPlanMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type WorkoutPlanSumOrderByAggregateInput = {
    id?: SortOrder
    trainerId?: SortOrder
    patientId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type WorkoutPlanRelationFilter = {
    is?: WorkoutPlanWhereInput
    isNot?: WorkoutPlanWhereInput
  }

  export type WorkoutExerciseListRelationFilter = {
    every?: WorkoutExerciseWhereInput
    some?: WorkoutExerciseWhereInput
    none?: WorkoutExerciseWhereInput
  }

  export type WorkoutExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutDayCountOrderByAggregateInput = {
    id?: SortOrder
    workoutPlanId?: SortOrder
    dayOfWeek?: SortOrder
    muscleGroup?: SortOrder
  }

  export type WorkoutDayAvgOrderByAggregateInput = {
    id?: SortOrder
    workoutPlanId?: SortOrder
  }

  export type WorkoutDayMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutPlanId?: SortOrder
    dayOfWeek?: SortOrder
    muscleGroup?: SortOrder
  }

  export type WorkoutDayMinOrderByAggregateInput = {
    id?: SortOrder
    workoutPlanId?: SortOrder
    dayOfWeek?: SortOrder
    muscleGroup?: SortOrder
  }

  export type WorkoutDaySumOrderByAggregateInput = {
    id?: SortOrder
    workoutPlanId?: SortOrder
  }

  export type WorkoutDayRelationFilter = {
    is?: WorkoutDayWhereInput
    isNot?: WorkoutDayWhereInput
  }

  export type WorkoutSetListRelationFilter = {
    every?: WorkoutSetWhereInput
    some?: WorkoutSetWhereInput
    none?: WorkoutSetWhereInput
  }

  export type WorkoutSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    workoutDayId?: SortOrder
    name?: SortOrder
    order?: SortOrder
  }

  export type WorkoutExerciseAvgOrderByAggregateInput = {
    id?: SortOrder
    workoutDayId?: SortOrder
    order?: SortOrder
  }

  export type WorkoutExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutDayId?: SortOrder
    name?: SortOrder
    order?: SortOrder
  }

  export type WorkoutExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    workoutDayId?: SortOrder
    name?: SortOrder
    order?: SortOrder
  }

  export type WorkoutExerciseSumOrderByAggregateInput = {
    id?: SortOrder
    workoutDayId?: SortOrder
    order?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type WorkoutExerciseRelationFilter = {
    is?: WorkoutExerciseWhereInput
    isNot?: WorkoutExerciseWhereInput
  }

  export type WorkoutLogListRelationFilter = {
    every?: WorkoutLogWhereInput
    some?: WorkoutLogWhereInput
    none?: WorkoutLogWhereInput
  }

  export type WorkoutLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutSetCountOrderByAggregateInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    setNumber?: SortOrder
    targetReps?: SortOrder
    targetLoad?: SortOrder
  }

  export type WorkoutSetAvgOrderByAggregateInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    setNumber?: SortOrder
    targetReps?: SortOrder
    targetLoad?: SortOrder
  }

  export type WorkoutSetMaxOrderByAggregateInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    setNumber?: SortOrder
    targetReps?: SortOrder
    targetLoad?: SortOrder
  }

  export type WorkoutSetMinOrderByAggregateInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    setNumber?: SortOrder
    targetReps?: SortOrder
    targetLoad?: SortOrder
  }

  export type WorkoutSetSumOrderByAggregateInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    setNumber?: SortOrder
    targetReps?: SortOrder
    targetLoad?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type WorkoutSetRelationFilter = {
    is?: WorkoutSetWhereInput
    isNot?: WorkoutSetWhereInput
  }

  export type WorkoutLogCountOrderByAggregateInput = {
    id?: SortOrder
    workoutSetId?: SortOrder
    date?: SortOrder
    actualReps?: SortOrder
    actualLoad?: SortOrder
  }

  export type WorkoutLogAvgOrderByAggregateInput = {
    id?: SortOrder
    workoutSetId?: SortOrder
    actualReps?: SortOrder
    actualLoad?: SortOrder
  }

  export type WorkoutLogMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutSetId?: SortOrder
    date?: SortOrder
    actualReps?: SortOrder
    actualLoad?: SortOrder
  }

  export type WorkoutLogMinOrderByAggregateInput = {
    id?: SortOrder
    workoutSetId?: SortOrder
    date?: SortOrder
    actualReps?: SortOrder
    actualLoad?: SortOrder
  }

  export type WorkoutLogSumOrderByAggregateInput = {
    id?: SortOrder
    workoutSetId?: SortOrder
    actualReps?: SortOrder
    actualLoad?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type MealListRelationFilter = {
    every?: MealWhereInput
    some?: MealWhereInput
    none?: MealWhereInput
  }

  export type MealOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealPlanCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    observations?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type MealPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type MealPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    observations?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type MealPlanMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    observations?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type MealPlanSumOrderByAggregateInput = {
    id?: SortOrder
    nutritionistId?: SortOrder
    patientId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type MealPlanRelationFilter = {
    is?: MealPlanWhereInput
    isNot?: MealPlanWhereInput
  }

  export type MealItemListRelationFilter = {
    every?: MealItemWhereInput
    some?: MealItemWhereInput
    none?: MealItemWhereInput
  }

  export type MealItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealCountOrderByAggregateInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    name?: SortOrder
    order?: SortOrder
  }

  export type MealAvgOrderByAggregateInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    order?: SortOrder
  }

  export type MealMaxOrderByAggregateInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    name?: SortOrder
    order?: SortOrder
  }

  export type MealMinOrderByAggregateInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    name?: SortOrder
    order?: SortOrder
  }

  export type MealSumOrderByAggregateInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    order?: SortOrder
  }

  export type MealRelationFilter = {
    is?: MealWhereInput
    isNot?: MealWhereInput
  }

  export type MealItemCountOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodName?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
  }

  export type MealItemAvgOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
  }

  export type MealItemMaxOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodName?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
  }

  export type MealItemMinOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodName?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
  }

  export type MealItemSumOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PhysicalAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    nextAssessment?: SortOrder
    data?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }

  export type PhysicalAssessmentAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }

  export type PhysicalAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    nextAssessment?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }

  export type PhysicalAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    date?: SortOrder
    nextAssessment?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }

  export type PhysicalAssessmentSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    createdById?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DataSharingPatientIdProfessionalIdRoleCompoundUniqueInput = {
    patientId: number
    professionalId: number
    role: $Enums.Role
  }

  export type DataSharingCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    professionalId?: SortOrder
    role?: SortOrder
    shareWorkoutWith?: SortOrder
    shareMealWith?: SortOrder
  }

  export type DataSharingAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    professionalId?: SortOrder
  }

  export type DataSharingMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    professionalId?: SortOrder
    role?: SortOrder
    shareWorkoutWith?: SortOrder
    shareMealWith?: SortOrder
  }

  export type DataSharingMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    professionalId?: SortOrder
    role?: SortOrder
    shareWorkoutWith?: SortOrder
    shareMealWith?: SortOrder
  }

  export type DataSharingSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    professionalId?: SortOrder
  }

  export type WorkoutPlanCreateNestedManyWithoutTrainerInput = {
    create?: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput> | WorkoutPlanCreateWithoutTrainerInput[] | WorkoutPlanUncheckedCreateWithoutTrainerInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutTrainerInput | WorkoutPlanCreateOrConnectWithoutTrainerInput[]
    createMany?: WorkoutPlanCreateManyTrainerInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type WorkoutPlanCreateNestedManyWithoutPatientInput = {
    create?: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput> | WorkoutPlanCreateWithoutPatientInput[] | WorkoutPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutPatientInput | WorkoutPlanCreateOrConnectWithoutPatientInput[]
    createMany?: WorkoutPlanCreateManyPatientInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type PhysicalAssessmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput> | PhysicalAssessmentCreateWithoutPatientInput[] | PhysicalAssessmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutPatientInput | PhysicalAssessmentCreateOrConnectWithoutPatientInput[]
    createMany?: PhysicalAssessmentCreateManyPatientInputEnvelope
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
  }

  export type PhysicalAssessmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput> | PhysicalAssessmentCreateWithoutCreatedByInput[] | PhysicalAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutCreatedByInput | PhysicalAssessmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PhysicalAssessmentCreateManyCreatedByInputEnvelope
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
  }

  export type MealPlanCreateNestedManyWithoutNutritionistInput = {
    create?: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput> | MealPlanCreateWithoutNutritionistInput[] | MealPlanUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutNutritionistInput | MealPlanCreateOrConnectWithoutNutritionistInput[]
    createMany?: MealPlanCreateManyNutritionistInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type MealPlanCreateNestedManyWithoutPatientInput = {
    create?: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput> | MealPlanCreateWithoutPatientInput[] | MealPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutPatientInput | MealPlanCreateOrConnectWithoutPatientInput[]
    createMany?: MealPlanCreateManyPatientInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type DataSharingCreateNestedManyWithoutPatientInput = {
    create?: XOR<DataSharingCreateWithoutPatientInput, DataSharingUncheckedCreateWithoutPatientInput> | DataSharingCreateWithoutPatientInput[] | DataSharingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DataSharingCreateOrConnectWithoutPatientInput | DataSharingCreateOrConnectWithoutPatientInput[]
    createMany?: DataSharingCreateManyPatientInputEnvelope
    connect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
  }

  export type DataSharingCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<DataSharingCreateWithoutProfessionalInput, DataSharingUncheckedCreateWithoutProfessionalInput> | DataSharingCreateWithoutProfessionalInput[] | DataSharingUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: DataSharingCreateOrConnectWithoutProfessionalInput | DataSharingCreateOrConnectWithoutProfessionalInput[]
    createMany?: DataSharingCreateManyProfessionalInputEnvelope
    connect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
  }

  export type WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput = {
    create?: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput> | WorkoutPlanCreateWithoutTrainerInput[] | WorkoutPlanUncheckedCreateWithoutTrainerInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutTrainerInput | WorkoutPlanCreateOrConnectWithoutTrainerInput[]
    createMany?: WorkoutPlanCreateManyTrainerInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput> | WorkoutPlanCreateWithoutPatientInput[] | WorkoutPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutPatientInput | WorkoutPlanCreateOrConnectWithoutPatientInput[]
    createMany?: WorkoutPlanCreateManyPatientInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput> | PhysicalAssessmentCreateWithoutPatientInput[] | PhysicalAssessmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutPatientInput | PhysicalAssessmentCreateOrConnectWithoutPatientInput[]
    createMany?: PhysicalAssessmentCreateManyPatientInputEnvelope
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
  }

  export type PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput> | PhysicalAssessmentCreateWithoutCreatedByInput[] | PhysicalAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutCreatedByInput | PhysicalAssessmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PhysicalAssessmentCreateManyCreatedByInputEnvelope
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
  }

  export type MealPlanUncheckedCreateNestedManyWithoutNutritionistInput = {
    create?: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput> | MealPlanCreateWithoutNutritionistInput[] | MealPlanUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutNutritionistInput | MealPlanCreateOrConnectWithoutNutritionistInput[]
    createMany?: MealPlanCreateManyNutritionistInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type MealPlanUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput> | MealPlanCreateWithoutPatientInput[] | MealPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutPatientInput | MealPlanCreateOrConnectWithoutPatientInput[]
    createMany?: MealPlanCreateManyPatientInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type DataSharingUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<DataSharingCreateWithoutPatientInput, DataSharingUncheckedCreateWithoutPatientInput> | DataSharingCreateWithoutPatientInput[] | DataSharingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DataSharingCreateOrConnectWithoutPatientInput | DataSharingCreateOrConnectWithoutPatientInput[]
    createMany?: DataSharingCreateManyPatientInputEnvelope
    connect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
  }

  export type DataSharingUncheckedCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<DataSharingCreateWithoutProfessionalInput, DataSharingUncheckedCreateWithoutProfessionalInput> | DataSharingCreateWithoutProfessionalInput[] | DataSharingUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: DataSharingCreateOrConnectWithoutProfessionalInput | DataSharingCreateOrConnectWithoutProfessionalInput[]
    createMany?: DataSharingCreateManyProfessionalInputEnvelope
    connect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutPlanUpdateManyWithoutTrainerNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput> | WorkoutPlanCreateWithoutTrainerInput[] | WorkoutPlanUncheckedCreateWithoutTrainerInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutTrainerInput | WorkoutPlanCreateOrConnectWithoutTrainerInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput | WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput[]
    createMany?: WorkoutPlanCreateManyTrainerInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput | WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutTrainerInput | WorkoutPlanUpdateManyWithWhereWithoutTrainerInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type WorkoutPlanUpdateManyWithoutPatientNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput> | WorkoutPlanCreateWithoutPatientInput[] | WorkoutPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutPatientInput | WorkoutPlanCreateOrConnectWithoutPatientInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput | WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: WorkoutPlanCreateManyPatientInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput | WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutPatientInput | WorkoutPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type PhysicalAssessmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput> | PhysicalAssessmentCreateWithoutPatientInput[] | PhysicalAssessmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutPatientInput | PhysicalAssessmentCreateOrConnectWithoutPatientInput[]
    upsert?: PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput | PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PhysicalAssessmentCreateManyPatientInputEnvelope
    set?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    disconnect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    delete?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    update?: PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput | PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput | PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
  }

  export type PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput> | PhysicalAssessmentCreateWithoutCreatedByInput[] | PhysicalAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutCreatedByInput | PhysicalAssessmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput | PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PhysicalAssessmentCreateManyCreatedByInputEnvelope
    set?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    disconnect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    delete?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    update?: PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput | PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput | PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
  }

  export type MealPlanUpdateManyWithoutNutritionistNestedInput = {
    create?: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput> | MealPlanCreateWithoutNutritionistInput[] | MealPlanUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutNutritionistInput | MealPlanCreateOrConnectWithoutNutritionistInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutNutritionistInput | MealPlanUpsertWithWhereUniqueWithoutNutritionistInput[]
    createMany?: MealPlanCreateManyNutritionistInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutNutritionistInput | MealPlanUpdateWithWhereUniqueWithoutNutritionistInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutNutritionistInput | MealPlanUpdateManyWithWhereWithoutNutritionistInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type MealPlanUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput> | MealPlanCreateWithoutPatientInput[] | MealPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutPatientInput | MealPlanCreateOrConnectWithoutPatientInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutPatientInput | MealPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MealPlanCreateManyPatientInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutPatientInput | MealPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutPatientInput | MealPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type DataSharingUpdateManyWithoutPatientNestedInput = {
    create?: XOR<DataSharingCreateWithoutPatientInput, DataSharingUncheckedCreateWithoutPatientInput> | DataSharingCreateWithoutPatientInput[] | DataSharingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DataSharingCreateOrConnectWithoutPatientInput | DataSharingCreateOrConnectWithoutPatientInput[]
    upsert?: DataSharingUpsertWithWhereUniqueWithoutPatientInput | DataSharingUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: DataSharingCreateManyPatientInputEnvelope
    set?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    disconnect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    delete?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    connect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    update?: DataSharingUpdateWithWhereUniqueWithoutPatientInput | DataSharingUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: DataSharingUpdateManyWithWhereWithoutPatientInput | DataSharingUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: DataSharingScalarWhereInput | DataSharingScalarWhereInput[]
  }

  export type DataSharingUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<DataSharingCreateWithoutProfessionalInput, DataSharingUncheckedCreateWithoutProfessionalInput> | DataSharingCreateWithoutProfessionalInput[] | DataSharingUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: DataSharingCreateOrConnectWithoutProfessionalInput | DataSharingCreateOrConnectWithoutProfessionalInput[]
    upsert?: DataSharingUpsertWithWhereUniqueWithoutProfessionalInput | DataSharingUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: DataSharingCreateManyProfessionalInputEnvelope
    set?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    disconnect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    delete?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    connect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    update?: DataSharingUpdateWithWhereUniqueWithoutProfessionalInput | DataSharingUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: DataSharingUpdateManyWithWhereWithoutProfessionalInput | DataSharingUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: DataSharingScalarWhereInput | DataSharingScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput> | WorkoutPlanCreateWithoutTrainerInput[] | WorkoutPlanUncheckedCreateWithoutTrainerInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutTrainerInput | WorkoutPlanCreateOrConnectWithoutTrainerInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput | WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput[]
    createMany?: WorkoutPlanCreateManyTrainerInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput | WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutTrainerInput | WorkoutPlanUpdateManyWithWhereWithoutTrainerInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput> | WorkoutPlanCreateWithoutPatientInput[] | WorkoutPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutPatientInput | WorkoutPlanCreateOrConnectWithoutPatientInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput | WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: WorkoutPlanCreateManyPatientInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput | WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutPatientInput | WorkoutPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput> | PhysicalAssessmentCreateWithoutPatientInput[] | PhysicalAssessmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutPatientInput | PhysicalAssessmentCreateOrConnectWithoutPatientInput[]
    upsert?: PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput | PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PhysicalAssessmentCreateManyPatientInputEnvelope
    set?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    disconnect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    delete?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    update?: PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput | PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput | PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
  }

  export type PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput> | PhysicalAssessmentCreateWithoutCreatedByInput[] | PhysicalAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PhysicalAssessmentCreateOrConnectWithoutCreatedByInput | PhysicalAssessmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput | PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PhysicalAssessmentCreateManyCreatedByInputEnvelope
    set?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    disconnect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    delete?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    connect?: PhysicalAssessmentWhereUniqueInput | PhysicalAssessmentWhereUniqueInput[]
    update?: PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput | PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput | PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
  }

  export type MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput = {
    create?: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput> | MealPlanCreateWithoutNutritionistInput[] | MealPlanUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutNutritionistInput | MealPlanCreateOrConnectWithoutNutritionistInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutNutritionistInput | MealPlanUpsertWithWhereUniqueWithoutNutritionistInput[]
    createMany?: MealPlanCreateManyNutritionistInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutNutritionistInput | MealPlanUpdateWithWhereUniqueWithoutNutritionistInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutNutritionistInput | MealPlanUpdateManyWithWhereWithoutNutritionistInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type MealPlanUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput> | MealPlanCreateWithoutPatientInput[] | MealPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutPatientInput | MealPlanCreateOrConnectWithoutPatientInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutPatientInput | MealPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MealPlanCreateManyPatientInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutPatientInput | MealPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutPatientInput | MealPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type DataSharingUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<DataSharingCreateWithoutPatientInput, DataSharingUncheckedCreateWithoutPatientInput> | DataSharingCreateWithoutPatientInput[] | DataSharingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DataSharingCreateOrConnectWithoutPatientInput | DataSharingCreateOrConnectWithoutPatientInput[]
    upsert?: DataSharingUpsertWithWhereUniqueWithoutPatientInput | DataSharingUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: DataSharingCreateManyPatientInputEnvelope
    set?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    disconnect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    delete?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    connect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    update?: DataSharingUpdateWithWhereUniqueWithoutPatientInput | DataSharingUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: DataSharingUpdateManyWithWhereWithoutPatientInput | DataSharingUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: DataSharingScalarWhereInput | DataSharingScalarWhereInput[]
  }

  export type DataSharingUncheckedUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<DataSharingCreateWithoutProfessionalInput, DataSharingUncheckedCreateWithoutProfessionalInput> | DataSharingCreateWithoutProfessionalInput[] | DataSharingUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: DataSharingCreateOrConnectWithoutProfessionalInput | DataSharingCreateOrConnectWithoutProfessionalInput[]
    upsert?: DataSharingUpsertWithWhereUniqueWithoutProfessionalInput | DataSharingUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: DataSharingCreateManyProfessionalInputEnvelope
    set?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    disconnect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    delete?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    connect?: DataSharingWhereUniqueInput | DataSharingWhereUniqueInput[]
    update?: DataSharingUpdateWithWhereUniqueWithoutProfessionalInput | DataSharingUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: DataSharingUpdateManyWithWhereWithoutProfessionalInput | DataSharingUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: DataSharingScalarWhereInput | DataSharingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTrainerPlansInput = {
    create?: XOR<UserCreateWithoutTrainerPlansInput, UserUncheckedCreateWithoutTrainerPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrainerPlansInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPatientPlansInput = {
    create?: XOR<UserCreateWithoutPatientPlansInput, UserUncheckedCreateWithoutPatientPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientPlansInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutDayCreateNestedManyWithoutWorkoutPlanInput = {
    create?: XOR<WorkoutDayCreateWithoutWorkoutPlanInput, WorkoutDayUncheckedCreateWithoutWorkoutPlanInput> | WorkoutDayCreateWithoutWorkoutPlanInput[] | WorkoutDayUncheckedCreateWithoutWorkoutPlanInput[]
    connectOrCreate?: WorkoutDayCreateOrConnectWithoutWorkoutPlanInput | WorkoutDayCreateOrConnectWithoutWorkoutPlanInput[]
    createMany?: WorkoutDayCreateManyWorkoutPlanInputEnvelope
    connect?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
  }

  export type WorkoutDayUncheckedCreateNestedManyWithoutWorkoutPlanInput = {
    create?: XOR<WorkoutDayCreateWithoutWorkoutPlanInput, WorkoutDayUncheckedCreateWithoutWorkoutPlanInput> | WorkoutDayCreateWithoutWorkoutPlanInput[] | WorkoutDayUncheckedCreateWithoutWorkoutPlanInput[]
    connectOrCreate?: WorkoutDayCreateOrConnectWithoutWorkoutPlanInput | WorkoutDayCreateOrConnectWithoutWorkoutPlanInput[]
    createMany?: WorkoutDayCreateManyWorkoutPlanInputEnvelope
    connect?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutTrainerPlansNestedInput = {
    create?: XOR<UserCreateWithoutTrainerPlansInput, UserUncheckedCreateWithoutTrainerPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrainerPlansInput
    upsert?: UserUpsertWithoutTrainerPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTrainerPlansInput, UserUpdateWithoutTrainerPlansInput>, UserUncheckedUpdateWithoutTrainerPlansInput>
  }

  export type UserUpdateOneRequiredWithoutPatientPlansNestedInput = {
    create?: XOR<UserCreateWithoutPatientPlansInput, UserUncheckedCreateWithoutPatientPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientPlansInput
    upsert?: UserUpsertWithoutPatientPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientPlansInput, UserUpdateWithoutPatientPlansInput>, UserUncheckedUpdateWithoutPatientPlansInput>
  }

  export type WorkoutDayUpdateManyWithoutWorkoutPlanNestedInput = {
    create?: XOR<WorkoutDayCreateWithoutWorkoutPlanInput, WorkoutDayUncheckedCreateWithoutWorkoutPlanInput> | WorkoutDayCreateWithoutWorkoutPlanInput[] | WorkoutDayUncheckedCreateWithoutWorkoutPlanInput[]
    connectOrCreate?: WorkoutDayCreateOrConnectWithoutWorkoutPlanInput | WorkoutDayCreateOrConnectWithoutWorkoutPlanInput[]
    upsert?: WorkoutDayUpsertWithWhereUniqueWithoutWorkoutPlanInput | WorkoutDayUpsertWithWhereUniqueWithoutWorkoutPlanInput[]
    createMany?: WorkoutDayCreateManyWorkoutPlanInputEnvelope
    set?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
    disconnect?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
    delete?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
    connect?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
    update?: WorkoutDayUpdateWithWhereUniqueWithoutWorkoutPlanInput | WorkoutDayUpdateWithWhereUniqueWithoutWorkoutPlanInput[]
    updateMany?: WorkoutDayUpdateManyWithWhereWithoutWorkoutPlanInput | WorkoutDayUpdateManyWithWhereWithoutWorkoutPlanInput[]
    deleteMany?: WorkoutDayScalarWhereInput | WorkoutDayScalarWhereInput[]
  }

  export type WorkoutDayUncheckedUpdateManyWithoutWorkoutPlanNestedInput = {
    create?: XOR<WorkoutDayCreateWithoutWorkoutPlanInput, WorkoutDayUncheckedCreateWithoutWorkoutPlanInput> | WorkoutDayCreateWithoutWorkoutPlanInput[] | WorkoutDayUncheckedCreateWithoutWorkoutPlanInput[]
    connectOrCreate?: WorkoutDayCreateOrConnectWithoutWorkoutPlanInput | WorkoutDayCreateOrConnectWithoutWorkoutPlanInput[]
    upsert?: WorkoutDayUpsertWithWhereUniqueWithoutWorkoutPlanInput | WorkoutDayUpsertWithWhereUniqueWithoutWorkoutPlanInput[]
    createMany?: WorkoutDayCreateManyWorkoutPlanInputEnvelope
    set?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
    disconnect?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
    delete?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
    connect?: WorkoutDayWhereUniqueInput | WorkoutDayWhereUniqueInput[]
    update?: WorkoutDayUpdateWithWhereUniqueWithoutWorkoutPlanInput | WorkoutDayUpdateWithWhereUniqueWithoutWorkoutPlanInput[]
    updateMany?: WorkoutDayUpdateManyWithWhereWithoutWorkoutPlanInput | WorkoutDayUpdateManyWithWhereWithoutWorkoutPlanInput[]
    deleteMany?: WorkoutDayScalarWhereInput | WorkoutDayScalarWhereInput[]
  }

  export type WorkoutPlanCreateNestedOneWithoutWorkoutDaysInput = {
    create?: XOR<WorkoutPlanCreateWithoutWorkoutDaysInput, WorkoutPlanUncheckedCreateWithoutWorkoutDaysInput>
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutWorkoutDaysInput
    connect?: WorkoutPlanWhereUniqueInput
  }

  export type WorkoutExerciseCreateNestedManyWithoutWorkoutDayInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutDayInput, WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput> | WorkoutExerciseCreateWithoutWorkoutDayInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutDayInput | WorkoutExerciseCreateOrConnectWithoutWorkoutDayInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutDayInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutDayInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutDayInput, WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput> | WorkoutExerciseCreateWithoutWorkoutDayInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutDayInput | WorkoutExerciseCreateOrConnectWithoutWorkoutDayInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutDayInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type WorkoutPlanUpdateOneRequiredWithoutWorkoutDaysNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutWorkoutDaysInput, WorkoutPlanUncheckedCreateWithoutWorkoutDaysInput>
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutWorkoutDaysInput
    upsert?: WorkoutPlanUpsertWithoutWorkoutDaysInput
    connect?: WorkoutPlanWhereUniqueInput
    update?: XOR<XOR<WorkoutPlanUpdateToOneWithWhereWithoutWorkoutDaysInput, WorkoutPlanUpdateWithoutWorkoutDaysInput>, WorkoutPlanUncheckedUpdateWithoutWorkoutDaysInput>
  }

  export type WorkoutExerciseUpdateManyWithoutWorkoutDayNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutDayInput, WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput> | WorkoutExerciseCreateWithoutWorkoutDayInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutDayInput | WorkoutExerciseCreateOrConnectWithoutWorkoutDayInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutDayInput | WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutDayInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutDayInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutDayInput | WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutDayInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutWorkoutDayInput | WorkoutExerciseUpdateManyWithWhereWithoutWorkoutDayInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutWorkoutDayNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutDayInput, WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput> | WorkoutExerciseCreateWithoutWorkoutDayInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutDayInput | WorkoutExerciseCreateOrConnectWithoutWorkoutDayInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutDayInput | WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutDayInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutDayInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutDayInput | WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutDayInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutWorkoutDayInput | WorkoutExerciseUpdateManyWithWhereWithoutWorkoutDayInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutDayCreateNestedOneWithoutExercisesInput = {
    create?: XOR<WorkoutDayCreateWithoutExercisesInput, WorkoutDayUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: WorkoutDayCreateOrConnectWithoutExercisesInput
    connect?: WorkoutDayWhereUniqueInput
  }

  export type WorkoutSetCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutSetCreateWithoutExerciseInput, WorkoutSetUncheckedCreateWithoutExerciseInput> | WorkoutSetCreateWithoutExerciseInput[] | WorkoutSetUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutSetCreateOrConnectWithoutExerciseInput | WorkoutSetCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutSetCreateManyExerciseInputEnvelope
    connect?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
  }

  export type WorkoutSetUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutSetCreateWithoutExerciseInput, WorkoutSetUncheckedCreateWithoutExerciseInput> | WorkoutSetCreateWithoutExerciseInput[] | WorkoutSetUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutSetCreateOrConnectWithoutExerciseInput | WorkoutSetCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutSetCreateManyExerciseInputEnvelope
    connect?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
  }

  export type WorkoutDayUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<WorkoutDayCreateWithoutExercisesInput, WorkoutDayUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: WorkoutDayCreateOrConnectWithoutExercisesInput
    upsert?: WorkoutDayUpsertWithoutExercisesInput
    connect?: WorkoutDayWhereUniqueInput
    update?: XOR<XOR<WorkoutDayUpdateToOneWithWhereWithoutExercisesInput, WorkoutDayUpdateWithoutExercisesInput>, WorkoutDayUncheckedUpdateWithoutExercisesInput>
  }

  export type WorkoutSetUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutSetCreateWithoutExerciseInput, WorkoutSetUncheckedCreateWithoutExerciseInput> | WorkoutSetCreateWithoutExerciseInput[] | WorkoutSetUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutSetCreateOrConnectWithoutExerciseInput | WorkoutSetCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutSetUpsertWithWhereUniqueWithoutExerciseInput | WorkoutSetUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutSetCreateManyExerciseInputEnvelope
    set?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
    disconnect?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
    delete?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
    connect?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
    update?: WorkoutSetUpdateWithWhereUniqueWithoutExerciseInput | WorkoutSetUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutSetUpdateManyWithWhereWithoutExerciseInput | WorkoutSetUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutSetScalarWhereInput | WorkoutSetScalarWhereInput[]
  }

  export type WorkoutSetUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutSetCreateWithoutExerciseInput, WorkoutSetUncheckedCreateWithoutExerciseInput> | WorkoutSetCreateWithoutExerciseInput[] | WorkoutSetUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutSetCreateOrConnectWithoutExerciseInput | WorkoutSetCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutSetUpsertWithWhereUniqueWithoutExerciseInput | WorkoutSetUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutSetCreateManyExerciseInputEnvelope
    set?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
    disconnect?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
    delete?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
    connect?: WorkoutSetWhereUniqueInput | WorkoutSetWhereUniqueInput[]
    update?: WorkoutSetUpdateWithWhereUniqueWithoutExerciseInput | WorkoutSetUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutSetUpdateManyWithWhereWithoutExerciseInput | WorkoutSetUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutSetScalarWhereInput | WorkoutSetScalarWhereInput[]
  }

  export type WorkoutExerciseCreateNestedOneWithoutSetsInput = {
    create?: XOR<WorkoutExerciseCreateWithoutSetsInput, WorkoutExerciseUncheckedCreateWithoutSetsInput>
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutSetsInput
    connect?: WorkoutExerciseWhereUniqueInput
  }

  export type WorkoutLogCreateNestedManyWithoutWorkoutSetInput = {
    create?: XOR<WorkoutLogCreateWithoutWorkoutSetInput, WorkoutLogUncheckedCreateWithoutWorkoutSetInput> | WorkoutLogCreateWithoutWorkoutSetInput[] | WorkoutLogUncheckedCreateWithoutWorkoutSetInput[]
    connectOrCreate?: WorkoutLogCreateOrConnectWithoutWorkoutSetInput | WorkoutLogCreateOrConnectWithoutWorkoutSetInput[]
    createMany?: WorkoutLogCreateManyWorkoutSetInputEnvelope
    connect?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
  }

  export type WorkoutLogUncheckedCreateNestedManyWithoutWorkoutSetInput = {
    create?: XOR<WorkoutLogCreateWithoutWorkoutSetInput, WorkoutLogUncheckedCreateWithoutWorkoutSetInput> | WorkoutLogCreateWithoutWorkoutSetInput[] | WorkoutLogUncheckedCreateWithoutWorkoutSetInput[]
    connectOrCreate?: WorkoutLogCreateOrConnectWithoutWorkoutSetInput | WorkoutLogCreateOrConnectWithoutWorkoutSetInput[]
    createMany?: WorkoutLogCreateManyWorkoutSetInputEnvelope
    connect?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutExerciseUpdateOneRequiredWithoutSetsNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutSetsInput, WorkoutExerciseUncheckedCreateWithoutSetsInput>
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutSetsInput
    upsert?: WorkoutExerciseUpsertWithoutSetsInput
    connect?: WorkoutExerciseWhereUniqueInput
    update?: XOR<XOR<WorkoutExerciseUpdateToOneWithWhereWithoutSetsInput, WorkoutExerciseUpdateWithoutSetsInput>, WorkoutExerciseUncheckedUpdateWithoutSetsInput>
  }

  export type WorkoutLogUpdateManyWithoutWorkoutSetNestedInput = {
    create?: XOR<WorkoutLogCreateWithoutWorkoutSetInput, WorkoutLogUncheckedCreateWithoutWorkoutSetInput> | WorkoutLogCreateWithoutWorkoutSetInput[] | WorkoutLogUncheckedCreateWithoutWorkoutSetInput[]
    connectOrCreate?: WorkoutLogCreateOrConnectWithoutWorkoutSetInput | WorkoutLogCreateOrConnectWithoutWorkoutSetInput[]
    upsert?: WorkoutLogUpsertWithWhereUniqueWithoutWorkoutSetInput | WorkoutLogUpsertWithWhereUniqueWithoutWorkoutSetInput[]
    createMany?: WorkoutLogCreateManyWorkoutSetInputEnvelope
    set?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
    disconnect?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
    delete?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
    connect?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
    update?: WorkoutLogUpdateWithWhereUniqueWithoutWorkoutSetInput | WorkoutLogUpdateWithWhereUniqueWithoutWorkoutSetInput[]
    updateMany?: WorkoutLogUpdateManyWithWhereWithoutWorkoutSetInput | WorkoutLogUpdateManyWithWhereWithoutWorkoutSetInput[]
    deleteMany?: WorkoutLogScalarWhereInput | WorkoutLogScalarWhereInput[]
  }

  export type WorkoutLogUncheckedUpdateManyWithoutWorkoutSetNestedInput = {
    create?: XOR<WorkoutLogCreateWithoutWorkoutSetInput, WorkoutLogUncheckedCreateWithoutWorkoutSetInput> | WorkoutLogCreateWithoutWorkoutSetInput[] | WorkoutLogUncheckedCreateWithoutWorkoutSetInput[]
    connectOrCreate?: WorkoutLogCreateOrConnectWithoutWorkoutSetInput | WorkoutLogCreateOrConnectWithoutWorkoutSetInput[]
    upsert?: WorkoutLogUpsertWithWhereUniqueWithoutWorkoutSetInput | WorkoutLogUpsertWithWhereUniqueWithoutWorkoutSetInput[]
    createMany?: WorkoutLogCreateManyWorkoutSetInputEnvelope
    set?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
    disconnect?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
    delete?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
    connect?: WorkoutLogWhereUniqueInput | WorkoutLogWhereUniqueInput[]
    update?: WorkoutLogUpdateWithWhereUniqueWithoutWorkoutSetInput | WorkoutLogUpdateWithWhereUniqueWithoutWorkoutSetInput[]
    updateMany?: WorkoutLogUpdateManyWithWhereWithoutWorkoutSetInput | WorkoutLogUpdateManyWithWhereWithoutWorkoutSetInput[]
    deleteMany?: WorkoutLogScalarWhereInput | WorkoutLogScalarWhereInput[]
  }

  export type WorkoutSetCreateNestedOneWithoutLogsInput = {
    create?: XOR<WorkoutSetCreateWithoutLogsInput, WorkoutSetUncheckedCreateWithoutLogsInput>
    connectOrCreate?: WorkoutSetCreateOrConnectWithoutLogsInput
    connect?: WorkoutSetWhereUniqueInput
  }

  export type WorkoutSetUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<WorkoutSetCreateWithoutLogsInput, WorkoutSetUncheckedCreateWithoutLogsInput>
    connectOrCreate?: WorkoutSetCreateOrConnectWithoutLogsInput
    upsert?: WorkoutSetUpsertWithoutLogsInput
    connect?: WorkoutSetWhereUniqueInput
    update?: XOR<XOR<WorkoutSetUpdateToOneWithWhereWithoutLogsInput, WorkoutSetUpdateWithoutLogsInput>, WorkoutSetUncheckedUpdateWithoutLogsInput>
  }

  export type UserCreateNestedOneWithoutNutritionistPlansInput = {
    create?: XOR<UserCreateWithoutNutritionistPlansInput, UserUncheckedCreateWithoutNutritionistPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutNutritionistPlansInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMealPatientPlansInput = {
    create?: XOR<UserCreateWithoutMealPatientPlansInput, UserUncheckedCreateWithoutMealPatientPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealPatientPlansInput
    connect?: UserWhereUniqueInput
  }

  export type MealCreateNestedManyWithoutMealPlanInput = {
    create?: XOR<MealCreateWithoutMealPlanInput, MealUncheckedCreateWithoutMealPlanInput> | MealCreateWithoutMealPlanInput[] | MealUncheckedCreateWithoutMealPlanInput[]
    connectOrCreate?: MealCreateOrConnectWithoutMealPlanInput | MealCreateOrConnectWithoutMealPlanInput[]
    createMany?: MealCreateManyMealPlanInputEnvelope
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
  }

  export type MealUncheckedCreateNestedManyWithoutMealPlanInput = {
    create?: XOR<MealCreateWithoutMealPlanInput, MealUncheckedCreateWithoutMealPlanInput> | MealCreateWithoutMealPlanInput[] | MealUncheckedCreateWithoutMealPlanInput[]
    connectOrCreate?: MealCreateOrConnectWithoutMealPlanInput | MealCreateOrConnectWithoutMealPlanInput[]
    createMany?: MealCreateManyMealPlanInputEnvelope
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutNutritionistPlansNestedInput = {
    create?: XOR<UserCreateWithoutNutritionistPlansInput, UserUncheckedCreateWithoutNutritionistPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutNutritionistPlansInput
    upsert?: UserUpsertWithoutNutritionistPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNutritionistPlansInput, UserUpdateWithoutNutritionistPlansInput>, UserUncheckedUpdateWithoutNutritionistPlansInput>
  }

  export type UserUpdateOneRequiredWithoutMealPatientPlansNestedInput = {
    create?: XOR<UserCreateWithoutMealPatientPlansInput, UserUncheckedCreateWithoutMealPatientPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealPatientPlansInput
    upsert?: UserUpsertWithoutMealPatientPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMealPatientPlansInput, UserUpdateWithoutMealPatientPlansInput>, UserUncheckedUpdateWithoutMealPatientPlansInput>
  }

  export type MealUpdateManyWithoutMealPlanNestedInput = {
    create?: XOR<MealCreateWithoutMealPlanInput, MealUncheckedCreateWithoutMealPlanInput> | MealCreateWithoutMealPlanInput[] | MealUncheckedCreateWithoutMealPlanInput[]
    connectOrCreate?: MealCreateOrConnectWithoutMealPlanInput | MealCreateOrConnectWithoutMealPlanInput[]
    upsert?: MealUpsertWithWhereUniqueWithoutMealPlanInput | MealUpsertWithWhereUniqueWithoutMealPlanInput[]
    createMany?: MealCreateManyMealPlanInputEnvelope
    set?: MealWhereUniqueInput | MealWhereUniqueInput[]
    disconnect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    delete?: MealWhereUniqueInput | MealWhereUniqueInput[]
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    update?: MealUpdateWithWhereUniqueWithoutMealPlanInput | MealUpdateWithWhereUniqueWithoutMealPlanInput[]
    updateMany?: MealUpdateManyWithWhereWithoutMealPlanInput | MealUpdateManyWithWhereWithoutMealPlanInput[]
    deleteMany?: MealScalarWhereInput | MealScalarWhereInput[]
  }

  export type MealUncheckedUpdateManyWithoutMealPlanNestedInput = {
    create?: XOR<MealCreateWithoutMealPlanInput, MealUncheckedCreateWithoutMealPlanInput> | MealCreateWithoutMealPlanInput[] | MealUncheckedCreateWithoutMealPlanInput[]
    connectOrCreate?: MealCreateOrConnectWithoutMealPlanInput | MealCreateOrConnectWithoutMealPlanInput[]
    upsert?: MealUpsertWithWhereUniqueWithoutMealPlanInput | MealUpsertWithWhereUniqueWithoutMealPlanInput[]
    createMany?: MealCreateManyMealPlanInputEnvelope
    set?: MealWhereUniqueInput | MealWhereUniqueInput[]
    disconnect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    delete?: MealWhereUniqueInput | MealWhereUniqueInput[]
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    update?: MealUpdateWithWhereUniqueWithoutMealPlanInput | MealUpdateWithWhereUniqueWithoutMealPlanInput[]
    updateMany?: MealUpdateManyWithWhereWithoutMealPlanInput | MealUpdateManyWithWhereWithoutMealPlanInput[]
    deleteMany?: MealScalarWhereInput | MealScalarWhereInput[]
  }

  export type MealPlanCreateNestedOneWithoutMealsInput = {
    create?: XOR<MealPlanCreateWithoutMealsInput, MealPlanUncheckedCreateWithoutMealsInput>
    connectOrCreate?: MealPlanCreateOrConnectWithoutMealsInput
    connect?: MealPlanWhereUniqueInput
  }

  export type MealItemCreateNestedManyWithoutMealInput = {
    create?: XOR<MealItemCreateWithoutMealInput, MealItemUncheckedCreateWithoutMealInput> | MealItemCreateWithoutMealInput[] | MealItemUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealItemCreateOrConnectWithoutMealInput | MealItemCreateOrConnectWithoutMealInput[]
    createMany?: MealItemCreateManyMealInputEnvelope
    connect?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
  }

  export type MealItemUncheckedCreateNestedManyWithoutMealInput = {
    create?: XOR<MealItemCreateWithoutMealInput, MealItemUncheckedCreateWithoutMealInput> | MealItemCreateWithoutMealInput[] | MealItemUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealItemCreateOrConnectWithoutMealInput | MealItemCreateOrConnectWithoutMealInput[]
    createMany?: MealItemCreateManyMealInputEnvelope
    connect?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
  }

  export type MealPlanUpdateOneRequiredWithoutMealsNestedInput = {
    create?: XOR<MealPlanCreateWithoutMealsInput, MealPlanUncheckedCreateWithoutMealsInput>
    connectOrCreate?: MealPlanCreateOrConnectWithoutMealsInput
    upsert?: MealPlanUpsertWithoutMealsInput
    connect?: MealPlanWhereUniqueInput
    update?: XOR<XOR<MealPlanUpdateToOneWithWhereWithoutMealsInput, MealPlanUpdateWithoutMealsInput>, MealPlanUncheckedUpdateWithoutMealsInput>
  }

  export type MealItemUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealItemCreateWithoutMealInput, MealItemUncheckedCreateWithoutMealInput> | MealItemCreateWithoutMealInput[] | MealItemUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealItemCreateOrConnectWithoutMealInput | MealItemCreateOrConnectWithoutMealInput[]
    upsert?: MealItemUpsertWithWhereUniqueWithoutMealInput | MealItemUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealItemCreateManyMealInputEnvelope
    set?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
    disconnect?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
    delete?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
    connect?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
    update?: MealItemUpdateWithWhereUniqueWithoutMealInput | MealItemUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealItemUpdateManyWithWhereWithoutMealInput | MealItemUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealItemScalarWhereInput | MealItemScalarWhereInput[]
  }

  export type MealItemUncheckedUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealItemCreateWithoutMealInput, MealItemUncheckedCreateWithoutMealInput> | MealItemCreateWithoutMealInput[] | MealItemUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealItemCreateOrConnectWithoutMealInput | MealItemCreateOrConnectWithoutMealInput[]
    upsert?: MealItemUpsertWithWhereUniqueWithoutMealInput | MealItemUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealItemCreateManyMealInputEnvelope
    set?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
    disconnect?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
    delete?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
    connect?: MealItemWhereUniqueInput | MealItemWhereUniqueInput[]
    update?: MealItemUpdateWithWhereUniqueWithoutMealInput | MealItemUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealItemUpdateManyWithWhereWithoutMealInput | MealItemUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealItemScalarWhereInput | MealItemScalarWhereInput[]
  }

  export type MealCreateNestedOneWithoutItemsInput = {
    create?: XOR<MealCreateWithoutItemsInput, MealUncheckedCreateWithoutItemsInput>
    connectOrCreate?: MealCreateOrConnectWithoutItemsInput
    connect?: MealWhereUniqueInput
  }

  export type MealUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<MealCreateWithoutItemsInput, MealUncheckedCreateWithoutItemsInput>
    connectOrCreate?: MealCreateOrConnectWithoutItemsInput
    upsert?: MealUpsertWithoutItemsInput
    connect?: MealWhereUniqueInput
    update?: XOR<XOR<MealUpdateToOneWithWhereWithoutItemsInput, MealUpdateWithoutItemsInput>, MealUncheckedUpdateWithoutItemsInput>
  }

  export type UserCreateNestedOneWithoutAssessmentsInput = {
    create?: XOR<UserCreateWithoutAssessmentsInput, UserUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssessmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedAssessmentsInput = {
    create?: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAssessmentsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutAssessmentsNestedInput = {
    create?: XOR<UserCreateWithoutAssessmentsInput, UserUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssessmentsInput
    upsert?: UserUpsertWithoutAssessmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssessmentsInput, UserUpdateWithoutAssessmentsInput>, UserUncheckedUpdateWithoutAssessmentsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAssessmentsInput
    upsert?: UserUpsertWithoutCreatedAssessmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAssessmentsInput, UserUpdateWithoutCreatedAssessmentsInput>, UserUncheckedUpdateWithoutCreatedAssessmentsInput>
  }

  export type UserCreateNestedOneWithoutPatientDataSharingInput = {
    create?: XOR<UserCreateWithoutPatientDataSharingInput, UserUncheckedCreateWithoutPatientDataSharingInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientDataSharingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProfessionalDataSharingInput = {
    create?: XOR<UserCreateWithoutProfessionalDataSharingInput, UserUncheckedCreateWithoutProfessionalDataSharingInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessionalDataSharingInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPatientDataSharingNestedInput = {
    create?: XOR<UserCreateWithoutPatientDataSharingInput, UserUncheckedCreateWithoutPatientDataSharingInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientDataSharingInput
    upsert?: UserUpsertWithoutPatientDataSharingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientDataSharingInput, UserUpdateWithoutPatientDataSharingInput>, UserUncheckedUpdateWithoutPatientDataSharingInput>
  }

  export type UserUpdateOneRequiredWithoutProfessionalDataSharingNestedInput = {
    create?: XOR<UserCreateWithoutProfessionalDataSharingInput, UserUncheckedCreateWithoutProfessionalDataSharingInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessionalDataSharingInput
    upsert?: UserUpsertWithoutProfessionalDataSharingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfessionalDataSharingInput, UserUpdateWithoutProfessionalDataSharingInput>, UserUncheckedUpdateWithoutProfessionalDataSharingInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type WorkoutPlanCreateWithoutTrainerInput = {
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    patient: UserCreateNestedOneWithoutPatientPlansInput
    workoutDays?: WorkoutDayCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanUncheckedCreateWithoutTrainerInput = {
    id?: number
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    patientId: number
    workoutDays?: WorkoutDayUncheckedCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanCreateOrConnectWithoutTrainerInput = {
    where: WorkoutPlanWhereUniqueInput
    create: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput>
  }

  export type WorkoutPlanCreateManyTrainerInputEnvelope = {
    data: WorkoutPlanCreateManyTrainerInput | WorkoutPlanCreateManyTrainerInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutPlanCreateWithoutPatientInput = {
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    trainer: UserCreateNestedOneWithoutTrainerPlansInput
    workoutDays?: WorkoutDayCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanUncheckedCreateWithoutPatientInput = {
    id?: number
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    trainerId: number
    workoutDays?: WorkoutDayUncheckedCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanCreateOrConnectWithoutPatientInput = {
    where: WorkoutPlanWhereUniqueInput
    create: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput>
  }

  export type WorkoutPlanCreateManyPatientInputEnvelope = {
    data: WorkoutPlanCreateManyPatientInput | WorkoutPlanCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PhysicalAssessmentCreateWithoutPatientInput = {
    method: string
    date?: Date | string
    nextAssessment?: Date | string | null
    data: JsonNullValueInput | InputJsonValue
    createdBy: UserCreateNestedOneWithoutCreatedAssessmentsInput
  }

  export type PhysicalAssessmentUncheckedCreateWithoutPatientInput = {
    id?: number
    method: string
    date?: Date | string
    nextAssessment?: Date | string | null
    data: JsonNullValueInput | InputJsonValue
    createdById: number
  }

  export type PhysicalAssessmentCreateOrConnectWithoutPatientInput = {
    where: PhysicalAssessmentWhereUniqueInput
    create: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput>
  }

  export type PhysicalAssessmentCreateManyPatientInputEnvelope = {
    data: PhysicalAssessmentCreateManyPatientInput | PhysicalAssessmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PhysicalAssessmentCreateWithoutCreatedByInput = {
    method: string
    date?: Date | string
    nextAssessment?: Date | string | null
    data: JsonNullValueInput | InputJsonValue
    patient: UserCreateNestedOneWithoutAssessmentsInput
  }

  export type PhysicalAssessmentUncheckedCreateWithoutCreatedByInput = {
    id?: number
    method: string
    date?: Date | string
    nextAssessment?: Date | string | null
    data: JsonNullValueInput | InputJsonValue
    patientId: number
  }

  export type PhysicalAssessmentCreateOrConnectWithoutCreatedByInput = {
    where: PhysicalAssessmentWhereUniqueInput
    create: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput>
  }

  export type PhysicalAssessmentCreateManyCreatedByInputEnvelope = {
    data: PhysicalAssessmentCreateManyCreatedByInput | PhysicalAssessmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type MealPlanCreateWithoutNutritionistInput = {
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    patient: UserCreateNestedOneWithoutMealPatientPlansInput
    meals?: MealCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanUncheckedCreateWithoutNutritionistInput = {
    id?: number
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    patientId: number
    meals?: MealUncheckedCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanCreateOrConnectWithoutNutritionistInput = {
    where: MealPlanWhereUniqueInput
    create: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput>
  }

  export type MealPlanCreateManyNutritionistInputEnvelope = {
    data: MealPlanCreateManyNutritionistInput | MealPlanCreateManyNutritionistInput[]
    skipDuplicates?: boolean
  }

  export type MealPlanCreateWithoutPatientInput = {
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    nutritionist: UserCreateNestedOneWithoutNutritionistPlansInput
    meals?: MealCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanUncheckedCreateWithoutPatientInput = {
    id?: number
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    nutritionistId: number
    meals?: MealUncheckedCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanCreateOrConnectWithoutPatientInput = {
    where: MealPlanWhereUniqueInput
    create: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput>
  }

  export type MealPlanCreateManyPatientInputEnvelope = {
    data: MealPlanCreateManyPatientInput | MealPlanCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type DataSharingCreateWithoutPatientInput = {
    role: $Enums.Role
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
    professional: UserCreateNestedOneWithoutProfessionalDataSharingInput
  }

  export type DataSharingUncheckedCreateWithoutPatientInput = {
    id?: number
    professionalId: number
    role: $Enums.Role
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
  }

  export type DataSharingCreateOrConnectWithoutPatientInput = {
    where: DataSharingWhereUniqueInput
    create: XOR<DataSharingCreateWithoutPatientInput, DataSharingUncheckedCreateWithoutPatientInput>
  }

  export type DataSharingCreateManyPatientInputEnvelope = {
    data: DataSharingCreateManyPatientInput | DataSharingCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type DataSharingCreateWithoutProfessionalInput = {
    role: $Enums.Role
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
    patient: UserCreateNestedOneWithoutPatientDataSharingInput
  }

  export type DataSharingUncheckedCreateWithoutProfessionalInput = {
    id?: number
    patientId: number
    role: $Enums.Role
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
  }

  export type DataSharingCreateOrConnectWithoutProfessionalInput = {
    where: DataSharingWhereUniqueInput
    create: XOR<DataSharingCreateWithoutProfessionalInput, DataSharingUncheckedCreateWithoutProfessionalInput>
  }

  export type DataSharingCreateManyProfessionalInputEnvelope = {
    data: DataSharingCreateManyProfessionalInput | DataSharingCreateManyProfessionalInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutPlanUpsertWithWhereUniqueWithoutTrainerInput = {
    where: WorkoutPlanWhereUniqueInput
    update: XOR<WorkoutPlanUpdateWithoutTrainerInput, WorkoutPlanUncheckedUpdateWithoutTrainerInput>
    create: XOR<WorkoutPlanCreateWithoutTrainerInput, WorkoutPlanUncheckedCreateWithoutTrainerInput>
  }

  export type WorkoutPlanUpdateWithWhereUniqueWithoutTrainerInput = {
    where: WorkoutPlanWhereUniqueInput
    data: XOR<WorkoutPlanUpdateWithoutTrainerInput, WorkoutPlanUncheckedUpdateWithoutTrainerInput>
  }

  export type WorkoutPlanUpdateManyWithWhereWithoutTrainerInput = {
    where: WorkoutPlanScalarWhereInput
    data: XOR<WorkoutPlanUpdateManyMutationInput, WorkoutPlanUncheckedUpdateManyWithoutTrainerInput>
  }

  export type WorkoutPlanScalarWhereInput = {
    AND?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
    OR?: WorkoutPlanScalarWhereInput[]
    NOT?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
    id?: IntFilter<"WorkoutPlan"> | number
    title?: StringFilter<"WorkoutPlan"> | string
    description?: StringFilter<"WorkoutPlan"> | string
    validFrom?: DateTimeFilter<"WorkoutPlan"> | Date | string
    validUntil?: DateTimeFilter<"WorkoutPlan"> | Date | string
    isActive?: BoolFilter<"WorkoutPlan"> | boolean
    createdAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    trainerId?: IntFilter<"WorkoutPlan"> | number
    patientId?: IntFilter<"WorkoutPlan"> | number
  }

  export type WorkoutPlanUpsertWithWhereUniqueWithoutPatientInput = {
    where: WorkoutPlanWhereUniqueInput
    update: XOR<WorkoutPlanUpdateWithoutPatientInput, WorkoutPlanUncheckedUpdateWithoutPatientInput>
    create: XOR<WorkoutPlanCreateWithoutPatientInput, WorkoutPlanUncheckedCreateWithoutPatientInput>
  }

  export type WorkoutPlanUpdateWithWhereUniqueWithoutPatientInput = {
    where: WorkoutPlanWhereUniqueInput
    data: XOR<WorkoutPlanUpdateWithoutPatientInput, WorkoutPlanUncheckedUpdateWithoutPatientInput>
  }

  export type WorkoutPlanUpdateManyWithWhereWithoutPatientInput = {
    where: WorkoutPlanScalarWhereInput
    data: XOR<WorkoutPlanUpdateManyMutationInput, WorkoutPlanUncheckedUpdateManyWithoutPatientInput>
  }

  export type PhysicalAssessmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: PhysicalAssessmentWhereUniqueInput
    update: XOR<PhysicalAssessmentUpdateWithoutPatientInput, PhysicalAssessmentUncheckedUpdateWithoutPatientInput>
    create: XOR<PhysicalAssessmentCreateWithoutPatientInput, PhysicalAssessmentUncheckedCreateWithoutPatientInput>
  }

  export type PhysicalAssessmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: PhysicalAssessmentWhereUniqueInput
    data: XOR<PhysicalAssessmentUpdateWithoutPatientInput, PhysicalAssessmentUncheckedUpdateWithoutPatientInput>
  }

  export type PhysicalAssessmentUpdateManyWithWhereWithoutPatientInput = {
    where: PhysicalAssessmentScalarWhereInput
    data: XOR<PhysicalAssessmentUpdateManyMutationInput, PhysicalAssessmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type PhysicalAssessmentScalarWhereInput = {
    AND?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
    OR?: PhysicalAssessmentScalarWhereInput[]
    NOT?: PhysicalAssessmentScalarWhereInput | PhysicalAssessmentScalarWhereInput[]
    id?: IntFilter<"PhysicalAssessment"> | number
    method?: StringFilter<"PhysicalAssessment"> | string
    date?: DateTimeFilter<"PhysicalAssessment"> | Date | string
    nextAssessment?: DateTimeNullableFilter<"PhysicalAssessment"> | Date | string | null
    data?: JsonFilter<"PhysicalAssessment">
    patientId?: IntFilter<"PhysicalAssessment"> | number
    createdById?: IntFilter<"PhysicalAssessment"> | number
  }

  export type PhysicalAssessmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PhysicalAssessmentWhereUniqueInput
    update: XOR<PhysicalAssessmentUpdateWithoutCreatedByInput, PhysicalAssessmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PhysicalAssessmentCreateWithoutCreatedByInput, PhysicalAssessmentUncheckedCreateWithoutCreatedByInput>
  }

  export type PhysicalAssessmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PhysicalAssessmentWhereUniqueInput
    data: XOR<PhysicalAssessmentUpdateWithoutCreatedByInput, PhysicalAssessmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type PhysicalAssessmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: PhysicalAssessmentScalarWhereInput
    data: XOR<PhysicalAssessmentUpdateManyMutationInput, PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type MealPlanUpsertWithWhereUniqueWithoutNutritionistInput = {
    where: MealPlanWhereUniqueInput
    update: XOR<MealPlanUpdateWithoutNutritionistInput, MealPlanUncheckedUpdateWithoutNutritionistInput>
    create: XOR<MealPlanCreateWithoutNutritionistInput, MealPlanUncheckedCreateWithoutNutritionistInput>
  }

  export type MealPlanUpdateWithWhereUniqueWithoutNutritionistInput = {
    where: MealPlanWhereUniqueInput
    data: XOR<MealPlanUpdateWithoutNutritionistInput, MealPlanUncheckedUpdateWithoutNutritionistInput>
  }

  export type MealPlanUpdateManyWithWhereWithoutNutritionistInput = {
    where: MealPlanScalarWhereInput
    data: XOR<MealPlanUpdateManyMutationInput, MealPlanUncheckedUpdateManyWithoutNutritionistInput>
  }

  export type MealPlanScalarWhereInput = {
    AND?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
    OR?: MealPlanScalarWhereInput[]
    NOT?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
    id?: IntFilter<"MealPlan"> | number
    title?: StringFilter<"MealPlan"> | string
    description?: StringFilter<"MealPlan"> | string
    observations?: StringNullableFilter<"MealPlan"> | string | null
    validFrom?: DateTimeFilter<"MealPlan"> | Date | string
    validUntil?: DateTimeFilter<"MealPlan"> | Date | string
    isActive?: BoolFilter<"MealPlan"> | boolean
    createdAt?: DateTimeFilter<"MealPlan"> | Date | string
    nutritionistId?: IntFilter<"MealPlan"> | number
    patientId?: IntFilter<"MealPlan"> | number
  }

  export type MealPlanUpsertWithWhereUniqueWithoutPatientInput = {
    where: MealPlanWhereUniqueInput
    update: XOR<MealPlanUpdateWithoutPatientInput, MealPlanUncheckedUpdateWithoutPatientInput>
    create: XOR<MealPlanCreateWithoutPatientInput, MealPlanUncheckedCreateWithoutPatientInput>
  }

  export type MealPlanUpdateWithWhereUniqueWithoutPatientInput = {
    where: MealPlanWhereUniqueInput
    data: XOR<MealPlanUpdateWithoutPatientInput, MealPlanUncheckedUpdateWithoutPatientInput>
  }

  export type MealPlanUpdateManyWithWhereWithoutPatientInput = {
    where: MealPlanScalarWhereInput
    data: XOR<MealPlanUpdateManyMutationInput, MealPlanUncheckedUpdateManyWithoutPatientInput>
  }

  export type DataSharingUpsertWithWhereUniqueWithoutPatientInput = {
    where: DataSharingWhereUniqueInput
    update: XOR<DataSharingUpdateWithoutPatientInput, DataSharingUncheckedUpdateWithoutPatientInput>
    create: XOR<DataSharingCreateWithoutPatientInput, DataSharingUncheckedCreateWithoutPatientInput>
  }

  export type DataSharingUpdateWithWhereUniqueWithoutPatientInput = {
    where: DataSharingWhereUniqueInput
    data: XOR<DataSharingUpdateWithoutPatientInput, DataSharingUncheckedUpdateWithoutPatientInput>
  }

  export type DataSharingUpdateManyWithWhereWithoutPatientInput = {
    where: DataSharingScalarWhereInput
    data: XOR<DataSharingUpdateManyMutationInput, DataSharingUncheckedUpdateManyWithoutPatientInput>
  }

  export type DataSharingScalarWhereInput = {
    AND?: DataSharingScalarWhereInput | DataSharingScalarWhereInput[]
    OR?: DataSharingScalarWhereInput[]
    NOT?: DataSharingScalarWhereInput | DataSharingScalarWhereInput[]
    id?: IntFilter<"DataSharing"> | number
    patientId?: IntFilter<"DataSharing"> | number
    professionalId?: IntFilter<"DataSharing"> | number
    role?: EnumRoleFilter<"DataSharing"> | $Enums.Role
    shareWorkoutWith?: BoolFilter<"DataSharing"> | boolean
    shareMealWith?: BoolFilter<"DataSharing"> | boolean
  }

  export type DataSharingUpsertWithWhereUniqueWithoutProfessionalInput = {
    where: DataSharingWhereUniqueInput
    update: XOR<DataSharingUpdateWithoutProfessionalInput, DataSharingUncheckedUpdateWithoutProfessionalInput>
    create: XOR<DataSharingCreateWithoutProfessionalInput, DataSharingUncheckedCreateWithoutProfessionalInput>
  }

  export type DataSharingUpdateWithWhereUniqueWithoutProfessionalInput = {
    where: DataSharingWhereUniqueInput
    data: XOR<DataSharingUpdateWithoutProfessionalInput, DataSharingUncheckedUpdateWithoutProfessionalInput>
  }

  export type DataSharingUpdateManyWithWhereWithoutProfessionalInput = {
    where: DataSharingScalarWhereInput
    data: XOR<DataSharingUpdateManyMutationInput, DataSharingUncheckedUpdateManyWithoutProfessionalInput>
  }

  export type UserCreateWithoutTrainerPlansInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingCreateNestedManyWithoutProfessionalInput
  }

  export type UserUncheckedCreateWithoutTrainerPlansInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingUncheckedCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type UserCreateOrConnectWithoutTrainerPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrainerPlansInput, UserUncheckedCreateWithoutTrainerPlansInput>
  }

  export type UserCreateWithoutPatientPlansInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingCreateNestedManyWithoutProfessionalInput
  }

  export type UserUncheckedCreateWithoutPatientPlansInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingUncheckedCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type UserCreateOrConnectWithoutPatientPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientPlansInput, UserUncheckedCreateWithoutPatientPlansInput>
  }

  export type WorkoutDayCreateWithoutWorkoutPlanInput = {
    dayOfWeek: string
    muscleGroup: string
    exercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutDayInput
  }

  export type WorkoutDayUncheckedCreateWithoutWorkoutPlanInput = {
    id?: number
    dayOfWeek: string
    muscleGroup: string
    exercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutDayInput
  }

  export type WorkoutDayCreateOrConnectWithoutWorkoutPlanInput = {
    where: WorkoutDayWhereUniqueInput
    create: XOR<WorkoutDayCreateWithoutWorkoutPlanInput, WorkoutDayUncheckedCreateWithoutWorkoutPlanInput>
  }

  export type WorkoutDayCreateManyWorkoutPlanInputEnvelope = {
    data: WorkoutDayCreateManyWorkoutPlanInput | WorkoutDayCreateManyWorkoutPlanInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTrainerPlansInput = {
    update: XOR<UserUpdateWithoutTrainerPlansInput, UserUncheckedUpdateWithoutTrainerPlansInput>
    create: XOR<UserCreateWithoutTrainerPlansInput, UserUncheckedCreateWithoutTrainerPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTrainerPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTrainerPlansInput, UserUncheckedUpdateWithoutTrainerPlansInput>
  }

  export type UserUpdateWithoutTrainerPlansInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUncheckedUpdateWithoutTrainerPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUncheckedUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUpsertWithoutPatientPlansInput = {
    update: XOR<UserUpdateWithoutPatientPlansInput, UserUncheckedUpdateWithoutPatientPlansInput>
    create: XOR<UserCreateWithoutPatientPlansInput, UserUncheckedCreateWithoutPatientPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientPlansInput, UserUncheckedUpdateWithoutPatientPlansInput>
  }

  export type UserUpdateWithoutPatientPlansInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUncheckedUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type WorkoutDayUpsertWithWhereUniqueWithoutWorkoutPlanInput = {
    where: WorkoutDayWhereUniqueInput
    update: XOR<WorkoutDayUpdateWithoutWorkoutPlanInput, WorkoutDayUncheckedUpdateWithoutWorkoutPlanInput>
    create: XOR<WorkoutDayCreateWithoutWorkoutPlanInput, WorkoutDayUncheckedCreateWithoutWorkoutPlanInput>
  }

  export type WorkoutDayUpdateWithWhereUniqueWithoutWorkoutPlanInput = {
    where: WorkoutDayWhereUniqueInput
    data: XOR<WorkoutDayUpdateWithoutWorkoutPlanInput, WorkoutDayUncheckedUpdateWithoutWorkoutPlanInput>
  }

  export type WorkoutDayUpdateManyWithWhereWithoutWorkoutPlanInput = {
    where: WorkoutDayScalarWhereInput
    data: XOR<WorkoutDayUpdateManyMutationInput, WorkoutDayUncheckedUpdateManyWithoutWorkoutPlanInput>
  }

  export type WorkoutDayScalarWhereInput = {
    AND?: WorkoutDayScalarWhereInput | WorkoutDayScalarWhereInput[]
    OR?: WorkoutDayScalarWhereInput[]
    NOT?: WorkoutDayScalarWhereInput | WorkoutDayScalarWhereInput[]
    id?: IntFilter<"WorkoutDay"> | number
    workoutPlanId?: IntFilter<"WorkoutDay"> | number
    dayOfWeek?: StringFilter<"WorkoutDay"> | string
    muscleGroup?: StringFilter<"WorkoutDay"> | string
  }

  export type WorkoutPlanCreateWithoutWorkoutDaysInput = {
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    trainer: UserCreateNestedOneWithoutTrainerPlansInput
    patient: UserCreateNestedOneWithoutPatientPlansInput
  }

  export type WorkoutPlanUncheckedCreateWithoutWorkoutDaysInput = {
    id?: number
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    trainerId: number
    patientId: number
  }

  export type WorkoutPlanCreateOrConnectWithoutWorkoutDaysInput = {
    where: WorkoutPlanWhereUniqueInput
    create: XOR<WorkoutPlanCreateWithoutWorkoutDaysInput, WorkoutPlanUncheckedCreateWithoutWorkoutDaysInput>
  }

  export type WorkoutExerciseCreateWithoutWorkoutDayInput = {
    name: string
    order: number
    sets?: WorkoutSetCreateNestedManyWithoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput = {
    id?: number
    name: string
    order: number
    sets?: WorkoutSetUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type WorkoutExerciseCreateOrConnectWithoutWorkoutDayInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutWorkoutDayInput, WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput>
  }

  export type WorkoutExerciseCreateManyWorkoutDayInputEnvelope = {
    data: WorkoutExerciseCreateManyWorkoutDayInput | WorkoutExerciseCreateManyWorkoutDayInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutPlanUpsertWithoutWorkoutDaysInput = {
    update: XOR<WorkoutPlanUpdateWithoutWorkoutDaysInput, WorkoutPlanUncheckedUpdateWithoutWorkoutDaysInput>
    create: XOR<WorkoutPlanCreateWithoutWorkoutDaysInput, WorkoutPlanUncheckedCreateWithoutWorkoutDaysInput>
    where?: WorkoutPlanWhereInput
  }

  export type WorkoutPlanUpdateToOneWithWhereWithoutWorkoutDaysInput = {
    where?: WorkoutPlanWhereInput
    data: XOR<WorkoutPlanUpdateWithoutWorkoutDaysInput, WorkoutPlanUncheckedUpdateWithoutWorkoutDaysInput>
  }

  export type WorkoutPlanUpdateWithoutWorkoutDaysInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainer?: UserUpdateOneRequiredWithoutTrainerPlansNestedInput
    patient?: UserUpdateOneRequiredWithoutPatientPlansNestedInput
  }

  export type WorkoutPlanUncheckedUpdateWithoutWorkoutDaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutDayInput = {
    where: WorkoutExerciseWhereUniqueInput
    update: XOR<WorkoutExerciseUpdateWithoutWorkoutDayInput, WorkoutExerciseUncheckedUpdateWithoutWorkoutDayInput>
    create: XOR<WorkoutExerciseCreateWithoutWorkoutDayInput, WorkoutExerciseUncheckedCreateWithoutWorkoutDayInput>
  }

  export type WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutDayInput = {
    where: WorkoutExerciseWhereUniqueInput
    data: XOR<WorkoutExerciseUpdateWithoutWorkoutDayInput, WorkoutExerciseUncheckedUpdateWithoutWorkoutDayInput>
  }

  export type WorkoutExerciseUpdateManyWithWhereWithoutWorkoutDayInput = {
    where: WorkoutExerciseScalarWhereInput
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyWithoutWorkoutDayInput>
  }

  export type WorkoutExerciseScalarWhereInput = {
    AND?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
    OR?: WorkoutExerciseScalarWhereInput[]
    NOT?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
    id?: IntFilter<"WorkoutExercise"> | number
    workoutDayId?: IntFilter<"WorkoutExercise"> | number
    name?: StringFilter<"WorkoutExercise"> | string
    order?: IntFilter<"WorkoutExercise"> | number
  }

  export type WorkoutDayCreateWithoutExercisesInput = {
    dayOfWeek: string
    muscleGroup: string
    workoutPlan: WorkoutPlanCreateNestedOneWithoutWorkoutDaysInput
  }

  export type WorkoutDayUncheckedCreateWithoutExercisesInput = {
    id?: number
    workoutPlanId: number
    dayOfWeek: string
    muscleGroup: string
  }

  export type WorkoutDayCreateOrConnectWithoutExercisesInput = {
    where: WorkoutDayWhereUniqueInput
    create: XOR<WorkoutDayCreateWithoutExercisesInput, WorkoutDayUncheckedCreateWithoutExercisesInput>
  }

  export type WorkoutSetCreateWithoutExerciseInput = {
    setNumber: number
    targetReps: number
    targetLoad: number
    logs?: WorkoutLogCreateNestedManyWithoutWorkoutSetInput
  }

  export type WorkoutSetUncheckedCreateWithoutExerciseInput = {
    id?: number
    setNumber: number
    targetReps: number
    targetLoad: number
    logs?: WorkoutLogUncheckedCreateNestedManyWithoutWorkoutSetInput
  }

  export type WorkoutSetCreateOrConnectWithoutExerciseInput = {
    where: WorkoutSetWhereUniqueInput
    create: XOR<WorkoutSetCreateWithoutExerciseInput, WorkoutSetUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutSetCreateManyExerciseInputEnvelope = {
    data: WorkoutSetCreateManyExerciseInput | WorkoutSetCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutDayUpsertWithoutExercisesInput = {
    update: XOR<WorkoutDayUpdateWithoutExercisesInput, WorkoutDayUncheckedUpdateWithoutExercisesInput>
    create: XOR<WorkoutDayCreateWithoutExercisesInput, WorkoutDayUncheckedCreateWithoutExercisesInput>
    where?: WorkoutDayWhereInput
  }

  export type WorkoutDayUpdateToOneWithWhereWithoutExercisesInput = {
    where?: WorkoutDayWhereInput
    data: XOR<WorkoutDayUpdateWithoutExercisesInput, WorkoutDayUncheckedUpdateWithoutExercisesInput>
  }

  export type WorkoutDayUpdateWithoutExercisesInput = {
    dayOfWeek?: StringFieldUpdateOperationsInput | string
    muscleGroup?: StringFieldUpdateOperationsInput | string
    workoutPlan?: WorkoutPlanUpdateOneRequiredWithoutWorkoutDaysNestedInput
  }

  export type WorkoutDayUncheckedUpdateWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutPlanId?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: StringFieldUpdateOperationsInput | string
    muscleGroup?: StringFieldUpdateOperationsInput | string
  }

  export type WorkoutSetUpsertWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutSetWhereUniqueInput
    update: XOR<WorkoutSetUpdateWithoutExerciseInput, WorkoutSetUncheckedUpdateWithoutExerciseInput>
    create: XOR<WorkoutSetCreateWithoutExerciseInput, WorkoutSetUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutSetUpdateWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutSetWhereUniqueInput
    data: XOR<WorkoutSetUpdateWithoutExerciseInput, WorkoutSetUncheckedUpdateWithoutExerciseInput>
  }

  export type WorkoutSetUpdateManyWithWhereWithoutExerciseInput = {
    where: WorkoutSetScalarWhereInput
    data: XOR<WorkoutSetUpdateManyMutationInput, WorkoutSetUncheckedUpdateManyWithoutExerciseInput>
  }

  export type WorkoutSetScalarWhereInput = {
    AND?: WorkoutSetScalarWhereInput | WorkoutSetScalarWhereInput[]
    OR?: WorkoutSetScalarWhereInput[]
    NOT?: WorkoutSetScalarWhereInput | WorkoutSetScalarWhereInput[]
    id?: IntFilter<"WorkoutSet"> | number
    exerciseId?: IntFilter<"WorkoutSet"> | number
    setNumber?: IntFilter<"WorkoutSet"> | number
    targetReps?: IntFilter<"WorkoutSet"> | number
    targetLoad?: FloatFilter<"WorkoutSet"> | number
  }

  export type WorkoutExerciseCreateWithoutSetsInput = {
    name: string
    order: number
    workoutDay: WorkoutDayCreateNestedOneWithoutExercisesInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutSetsInput = {
    id?: number
    workoutDayId: number
    name: string
    order: number
  }

  export type WorkoutExerciseCreateOrConnectWithoutSetsInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutSetsInput, WorkoutExerciseUncheckedCreateWithoutSetsInput>
  }

  export type WorkoutLogCreateWithoutWorkoutSetInput = {
    date: Date | string
    actualReps: number
    actualLoad: number
  }

  export type WorkoutLogUncheckedCreateWithoutWorkoutSetInput = {
    id?: number
    date: Date | string
    actualReps: number
    actualLoad: number
  }

  export type WorkoutLogCreateOrConnectWithoutWorkoutSetInput = {
    where: WorkoutLogWhereUniqueInput
    create: XOR<WorkoutLogCreateWithoutWorkoutSetInput, WorkoutLogUncheckedCreateWithoutWorkoutSetInput>
  }

  export type WorkoutLogCreateManyWorkoutSetInputEnvelope = {
    data: WorkoutLogCreateManyWorkoutSetInput | WorkoutLogCreateManyWorkoutSetInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutExerciseUpsertWithoutSetsInput = {
    update: XOR<WorkoutExerciseUpdateWithoutSetsInput, WorkoutExerciseUncheckedUpdateWithoutSetsInput>
    create: XOR<WorkoutExerciseCreateWithoutSetsInput, WorkoutExerciseUncheckedCreateWithoutSetsInput>
    where?: WorkoutExerciseWhereInput
  }

  export type WorkoutExerciseUpdateToOneWithWhereWithoutSetsInput = {
    where?: WorkoutExerciseWhereInput
    data: XOR<WorkoutExerciseUpdateWithoutSetsInput, WorkoutExerciseUncheckedUpdateWithoutSetsInput>
  }

  export type WorkoutExerciseUpdateWithoutSetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    workoutDay?: WorkoutDayUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutSetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutDayId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutLogUpsertWithWhereUniqueWithoutWorkoutSetInput = {
    where: WorkoutLogWhereUniqueInput
    update: XOR<WorkoutLogUpdateWithoutWorkoutSetInput, WorkoutLogUncheckedUpdateWithoutWorkoutSetInput>
    create: XOR<WorkoutLogCreateWithoutWorkoutSetInput, WorkoutLogUncheckedCreateWithoutWorkoutSetInput>
  }

  export type WorkoutLogUpdateWithWhereUniqueWithoutWorkoutSetInput = {
    where: WorkoutLogWhereUniqueInput
    data: XOR<WorkoutLogUpdateWithoutWorkoutSetInput, WorkoutLogUncheckedUpdateWithoutWorkoutSetInput>
  }

  export type WorkoutLogUpdateManyWithWhereWithoutWorkoutSetInput = {
    where: WorkoutLogScalarWhereInput
    data: XOR<WorkoutLogUpdateManyMutationInput, WorkoutLogUncheckedUpdateManyWithoutWorkoutSetInput>
  }

  export type WorkoutLogScalarWhereInput = {
    AND?: WorkoutLogScalarWhereInput | WorkoutLogScalarWhereInput[]
    OR?: WorkoutLogScalarWhereInput[]
    NOT?: WorkoutLogScalarWhereInput | WorkoutLogScalarWhereInput[]
    id?: IntFilter<"WorkoutLog"> | number
    workoutSetId?: IntFilter<"WorkoutLog"> | number
    date?: DateTimeFilter<"WorkoutLog"> | Date | string
    actualReps?: IntFilter<"WorkoutLog"> | number
    actualLoad?: FloatFilter<"WorkoutLog"> | number
  }

  export type WorkoutSetCreateWithoutLogsInput = {
    setNumber: number
    targetReps: number
    targetLoad: number
    exercise: WorkoutExerciseCreateNestedOneWithoutSetsInput
  }

  export type WorkoutSetUncheckedCreateWithoutLogsInput = {
    id?: number
    exerciseId: number
    setNumber: number
    targetReps: number
    targetLoad: number
  }

  export type WorkoutSetCreateOrConnectWithoutLogsInput = {
    where: WorkoutSetWhereUniqueInput
    create: XOR<WorkoutSetCreateWithoutLogsInput, WorkoutSetUncheckedCreateWithoutLogsInput>
  }

  export type WorkoutSetUpsertWithoutLogsInput = {
    update: XOR<WorkoutSetUpdateWithoutLogsInput, WorkoutSetUncheckedUpdateWithoutLogsInput>
    create: XOR<WorkoutSetCreateWithoutLogsInput, WorkoutSetUncheckedCreateWithoutLogsInput>
    where?: WorkoutSetWhereInput
  }

  export type WorkoutSetUpdateToOneWithWhereWithoutLogsInput = {
    where?: WorkoutSetWhereInput
    data: XOR<WorkoutSetUpdateWithoutLogsInput, WorkoutSetUncheckedUpdateWithoutLogsInput>
  }

  export type WorkoutSetUpdateWithoutLogsInput = {
    setNumber?: IntFieldUpdateOperationsInput | number
    targetReps?: IntFieldUpdateOperationsInput | number
    targetLoad?: FloatFieldUpdateOperationsInput | number
    exercise?: WorkoutExerciseUpdateOneRequiredWithoutSetsNestedInput
  }

  export type WorkoutSetUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    exerciseId?: IntFieldUpdateOperationsInput | number
    setNumber?: IntFieldUpdateOperationsInput | number
    targetReps?: IntFieldUpdateOperationsInput | number
    targetLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutNutritionistPlansInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingCreateNestedManyWithoutProfessionalInput
  }

  export type UserUncheckedCreateWithoutNutritionistPlansInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingUncheckedCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type UserCreateOrConnectWithoutNutritionistPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNutritionistPlansInput, UserUncheckedCreateWithoutNutritionistPlansInput>
  }

  export type UserCreateWithoutMealPatientPlansInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    patientDataSharing?: DataSharingCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingCreateNestedManyWithoutProfessionalInput
  }

  export type UserUncheckedCreateWithoutMealPatientPlansInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    patientDataSharing?: DataSharingUncheckedCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type UserCreateOrConnectWithoutMealPatientPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMealPatientPlansInput, UserUncheckedCreateWithoutMealPatientPlansInput>
  }

  export type MealCreateWithoutMealPlanInput = {
    name: string
    order: number
    items?: MealItemCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutMealPlanInput = {
    id?: number
    name: string
    order: number
    items?: MealItemUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutMealPlanInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutMealPlanInput, MealUncheckedCreateWithoutMealPlanInput>
  }

  export type MealCreateManyMealPlanInputEnvelope = {
    data: MealCreateManyMealPlanInput | MealCreateManyMealPlanInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutNutritionistPlansInput = {
    update: XOR<UserUpdateWithoutNutritionistPlansInput, UserUncheckedUpdateWithoutNutritionistPlansInput>
    create: XOR<UserCreateWithoutNutritionistPlansInput, UserUncheckedCreateWithoutNutritionistPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNutritionistPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNutritionistPlansInput, UserUncheckedUpdateWithoutNutritionistPlansInput>
  }

  export type UserUpdateWithoutNutritionistPlansInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUncheckedUpdateWithoutNutritionistPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUncheckedUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUpsertWithoutMealPatientPlansInput = {
    update: XOR<UserUpdateWithoutMealPatientPlansInput, UserUncheckedUpdateWithoutMealPatientPlansInput>
    create: XOR<UserCreateWithoutMealPatientPlansInput, UserUncheckedCreateWithoutMealPatientPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMealPatientPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMealPatientPlansInput, UserUncheckedUpdateWithoutMealPatientPlansInput>
  }

  export type UserUpdateWithoutMealPatientPlansInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    patientDataSharing?: DataSharingUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUncheckedUpdateWithoutMealPatientPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    patientDataSharing?: DataSharingUncheckedUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type MealUpsertWithWhereUniqueWithoutMealPlanInput = {
    where: MealWhereUniqueInput
    update: XOR<MealUpdateWithoutMealPlanInput, MealUncheckedUpdateWithoutMealPlanInput>
    create: XOR<MealCreateWithoutMealPlanInput, MealUncheckedCreateWithoutMealPlanInput>
  }

  export type MealUpdateWithWhereUniqueWithoutMealPlanInput = {
    where: MealWhereUniqueInput
    data: XOR<MealUpdateWithoutMealPlanInput, MealUncheckedUpdateWithoutMealPlanInput>
  }

  export type MealUpdateManyWithWhereWithoutMealPlanInput = {
    where: MealScalarWhereInput
    data: XOR<MealUpdateManyMutationInput, MealUncheckedUpdateManyWithoutMealPlanInput>
  }

  export type MealScalarWhereInput = {
    AND?: MealScalarWhereInput | MealScalarWhereInput[]
    OR?: MealScalarWhereInput[]
    NOT?: MealScalarWhereInput | MealScalarWhereInput[]
    id?: IntFilter<"Meal"> | number
    mealPlanId?: IntFilter<"Meal"> | number
    name?: StringFilter<"Meal"> | string
    order?: IntFilter<"Meal"> | number
  }

  export type MealPlanCreateWithoutMealsInput = {
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    nutritionist: UserCreateNestedOneWithoutNutritionistPlansInput
    patient: UserCreateNestedOneWithoutMealPatientPlansInput
  }

  export type MealPlanUncheckedCreateWithoutMealsInput = {
    id?: number
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    nutritionistId: number
    patientId: number
  }

  export type MealPlanCreateOrConnectWithoutMealsInput = {
    where: MealPlanWhereUniqueInput
    create: XOR<MealPlanCreateWithoutMealsInput, MealPlanUncheckedCreateWithoutMealsInput>
  }

  export type MealItemCreateWithoutMealInput = {
    foodName: string
    quantity: string
    notes?: string | null
  }

  export type MealItemUncheckedCreateWithoutMealInput = {
    id?: number
    foodName: string
    quantity: string
    notes?: string | null
  }

  export type MealItemCreateOrConnectWithoutMealInput = {
    where: MealItemWhereUniqueInput
    create: XOR<MealItemCreateWithoutMealInput, MealItemUncheckedCreateWithoutMealInput>
  }

  export type MealItemCreateManyMealInputEnvelope = {
    data: MealItemCreateManyMealInput | MealItemCreateManyMealInput[]
    skipDuplicates?: boolean
  }

  export type MealPlanUpsertWithoutMealsInput = {
    update: XOR<MealPlanUpdateWithoutMealsInput, MealPlanUncheckedUpdateWithoutMealsInput>
    create: XOR<MealPlanCreateWithoutMealsInput, MealPlanUncheckedCreateWithoutMealsInput>
    where?: MealPlanWhereInput
  }

  export type MealPlanUpdateToOneWithWhereWithoutMealsInput = {
    where?: MealPlanWhereInput
    data: XOR<MealPlanUpdateWithoutMealsInput, MealPlanUncheckedUpdateWithoutMealsInput>
  }

  export type MealPlanUpdateWithoutMealsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionist?: UserUpdateOneRequiredWithoutNutritionistPlansNestedInput
    patient?: UserUpdateOneRequiredWithoutMealPatientPlansNestedInput
  }

  export type MealPlanUncheckedUpdateWithoutMealsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionistId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MealItemUpsertWithWhereUniqueWithoutMealInput = {
    where: MealItemWhereUniqueInput
    update: XOR<MealItemUpdateWithoutMealInput, MealItemUncheckedUpdateWithoutMealInput>
    create: XOR<MealItemCreateWithoutMealInput, MealItemUncheckedCreateWithoutMealInput>
  }

  export type MealItemUpdateWithWhereUniqueWithoutMealInput = {
    where: MealItemWhereUniqueInput
    data: XOR<MealItemUpdateWithoutMealInput, MealItemUncheckedUpdateWithoutMealInput>
  }

  export type MealItemUpdateManyWithWhereWithoutMealInput = {
    where: MealItemScalarWhereInput
    data: XOR<MealItemUpdateManyMutationInput, MealItemUncheckedUpdateManyWithoutMealInput>
  }

  export type MealItemScalarWhereInput = {
    AND?: MealItemScalarWhereInput | MealItemScalarWhereInput[]
    OR?: MealItemScalarWhereInput[]
    NOT?: MealItemScalarWhereInput | MealItemScalarWhereInput[]
    id?: IntFilter<"MealItem"> | number
    mealId?: IntFilter<"MealItem"> | number
    foodName?: StringFilter<"MealItem"> | string
    quantity?: StringFilter<"MealItem"> | string
    notes?: StringNullableFilter<"MealItem"> | string | null
  }

  export type MealCreateWithoutItemsInput = {
    name: string
    order: number
    mealPlan: MealPlanCreateNestedOneWithoutMealsInput
  }

  export type MealUncheckedCreateWithoutItemsInput = {
    id?: number
    mealPlanId: number
    name: string
    order: number
  }

  export type MealCreateOrConnectWithoutItemsInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutItemsInput, MealUncheckedCreateWithoutItemsInput>
  }

  export type MealUpsertWithoutItemsInput = {
    update: XOR<MealUpdateWithoutItemsInput, MealUncheckedUpdateWithoutItemsInput>
    create: XOR<MealCreateWithoutItemsInput, MealUncheckedCreateWithoutItemsInput>
    where?: MealWhereInput
  }

  export type MealUpdateToOneWithWhereWithoutItemsInput = {
    where?: MealWhereInput
    data: XOR<MealUpdateWithoutItemsInput, MealUncheckedUpdateWithoutItemsInput>
  }

  export type MealUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    mealPlan?: MealPlanUpdateOneRequiredWithoutMealsNestedInput
  }

  export type MealUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    mealPlanId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutAssessmentsInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingCreateNestedManyWithoutProfessionalInput
  }

  export type UserUncheckedCreateWithoutAssessmentsInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingUncheckedCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type UserCreateOrConnectWithoutAssessmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssessmentsInput, UserUncheckedCreateWithoutAssessmentsInput>
  }

  export type UserCreateWithoutCreatedAssessmentsInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingCreateNestedManyWithoutProfessionalInput
  }

  export type UserUncheckedCreateWithoutCreatedAssessmentsInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingUncheckedCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type UserCreateOrConnectWithoutCreatedAssessmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
  }

  export type UserUpsertWithoutAssessmentsInput = {
    update: XOR<UserUpdateWithoutAssessmentsInput, UserUncheckedUpdateWithoutAssessmentsInput>
    create: XOR<UserCreateWithoutAssessmentsInput, UserUncheckedCreateWithoutAssessmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssessmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssessmentsInput, UserUncheckedUpdateWithoutAssessmentsInput>
  }

  export type UserUpdateWithoutAssessmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUncheckedUpdateWithoutAssessmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUncheckedUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUpsertWithoutCreatedAssessmentsInput = {
    update: XOR<UserUpdateWithoutCreatedAssessmentsInput, UserUncheckedUpdateWithoutCreatedAssessmentsInput>
    create: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedAssessmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedAssessmentsInput, UserUncheckedUpdateWithoutCreatedAssessmentsInput>
  }

  export type UserUpdateWithoutCreatedAssessmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedAssessmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUncheckedUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type UserCreateWithoutPatientDataSharingInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingCreateNestedManyWithoutProfessionalInput
  }

  export type UserUncheckedCreateWithoutPatientDataSharingInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
    professionalDataSharing?: DataSharingUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type UserCreateOrConnectWithoutPatientDataSharingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientDataSharingInput, UserUncheckedCreateWithoutPatientDataSharingInput>
  }

  export type UserCreateWithoutProfessionalDataSharingInput = {
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingCreateNestedManyWithoutPatientInput
  }

  export type UserUncheckedCreateWithoutProfessionalDataSharingInput = {
    id?: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    birthDate: Date | string
    gender: $Enums.Gender
    peso?: number | null
    createdAt?: Date | string
    trainerPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutTrainerInput
    patientPlans?: WorkoutPlanUncheckedCreateNestedManyWithoutPatientInput
    assessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutPatientInput
    createdAssessments?: PhysicalAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    nutritionistPlans?: MealPlanUncheckedCreateNestedManyWithoutNutritionistInput
    mealPatientPlans?: MealPlanUncheckedCreateNestedManyWithoutPatientInput
    patientDataSharing?: DataSharingUncheckedCreateNestedManyWithoutPatientInput
  }

  export type UserCreateOrConnectWithoutProfessionalDataSharingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfessionalDataSharingInput, UserUncheckedCreateWithoutProfessionalDataSharingInput>
  }

  export type UserUpsertWithoutPatientDataSharingInput = {
    update: XOR<UserUpdateWithoutPatientDataSharingInput, UserUncheckedUpdateWithoutPatientDataSharingInput>
    create: XOR<UserCreateWithoutPatientDataSharingInput, UserUncheckedCreateWithoutPatientDataSharingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientDataSharingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientDataSharingInput, UserUncheckedUpdateWithoutPatientDataSharingInput>
  }

  export type UserUpdateWithoutPatientDataSharingInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientDataSharingInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
    professionalDataSharing?: DataSharingUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type UserUpsertWithoutProfessionalDataSharingInput = {
    update: XOR<UserUpdateWithoutProfessionalDataSharingInput, UserUncheckedUpdateWithoutProfessionalDataSharingInput>
    create: XOR<UserCreateWithoutProfessionalDataSharingInput, UserUncheckedCreateWithoutProfessionalDataSharingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfessionalDataSharingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfessionalDataSharingInput, UserUncheckedUpdateWithoutProfessionalDataSharingInput>
  }

  export type UserUpdateWithoutProfessionalDataSharingInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUpdateManyWithoutPatientNestedInput
  }

  export type UserUncheckedUpdateWithoutProfessionalDataSharingInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerPlans?: WorkoutPlanUncheckedUpdateManyWithoutTrainerNestedInput
    patientPlans?: WorkoutPlanUncheckedUpdateManyWithoutPatientNestedInput
    assessments?: PhysicalAssessmentUncheckedUpdateManyWithoutPatientNestedInput
    createdAssessments?: PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    nutritionistPlans?: MealPlanUncheckedUpdateManyWithoutNutritionistNestedInput
    mealPatientPlans?: MealPlanUncheckedUpdateManyWithoutPatientNestedInput
    patientDataSharing?: DataSharingUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type WorkoutPlanCreateManyTrainerInput = {
    id?: number
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    patientId: number
  }

  export type WorkoutPlanCreateManyPatientInput = {
    id?: number
    title: string
    description: string
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    trainerId: number
  }

  export type PhysicalAssessmentCreateManyPatientInput = {
    id?: number
    method: string
    date?: Date | string
    nextAssessment?: Date | string | null
    data: JsonNullValueInput | InputJsonValue
    createdById: number
  }

  export type PhysicalAssessmentCreateManyCreatedByInput = {
    id?: number
    method: string
    date?: Date | string
    nextAssessment?: Date | string | null
    data: JsonNullValueInput | InputJsonValue
    patientId: number
  }

  export type MealPlanCreateManyNutritionistInput = {
    id?: number
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    patientId: number
  }

  export type MealPlanCreateManyPatientInput = {
    id?: number
    title: string
    description: string
    observations?: string | null
    validFrom: Date | string
    validUntil: Date | string
    isActive?: boolean
    createdAt?: Date | string
    nutritionistId: number
  }

  export type DataSharingCreateManyPatientInput = {
    id?: number
    professionalId: number
    role: $Enums.Role
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
  }

  export type DataSharingCreateManyProfessionalInput = {
    id?: number
    patientId: number
    role: $Enums.Role
    shareWorkoutWith?: boolean
    shareMealWith?: boolean
  }

  export type WorkoutPlanUpdateWithoutTrainerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: UserUpdateOneRequiredWithoutPatientPlansNestedInput
    workoutDays?: WorkoutDayUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanUncheckedUpdateWithoutTrainerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    workoutDays?: WorkoutDayUncheckedUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutTrainerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutPlanUpdateWithoutPatientInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainer?: UserUpdateOneRequiredWithoutTrainerPlansNestedInput
    workoutDays?: WorkoutDayUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerId?: IntFieldUpdateOperationsInput | number
    workoutDays?: WorkoutDayUncheckedUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainerId?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentUpdateWithoutPatientInput = {
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
    createdBy?: UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput
  }

  export type PhysicalAssessmentUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentUpdateWithoutCreatedByInput = {
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
    patient?: UserUpdateOneRequiredWithoutAssessmentsNestedInput
  }

  export type PhysicalAssessmentUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type PhysicalAssessmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nextAssessment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data?: JsonNullValueInput | InputJsonValue
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanUpdateWithoutNutritionistInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: UserUpdateOneRequiredWithoutMealPatientPlansNestedInput
    meals?: MealUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanUncheckedUpdateWithoutNutritionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    meals?: MealUncheckedUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanUncheckedUpdateManyWithoutNutritionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanUpdateWithoutPatientInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionist?: UserUpdateOneRequiredWithoutNutritionistPlansNestedInput
    meals?: MealUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionistId?: IntFieldUpdateOperationsInput | number
    meals?: MealUncheckedUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nutritionistId?: IntFieldUpdateOperationsInput | number
  }

  export type DataSharingUpdateWithoutPatientInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
    professional?: UserUpdateOneRequiredWithoutProfessionalDataSharingNestedInput
  }

  export type DataSharingUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    professionalId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DataSharingUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    professionalId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DataSharingUpdateWithoutProfessionalInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
    patient?: UserUpdateOneRequiredWithoutPatientDataSharingNestedInput
  }

  export type DataSharingUncheckedUpdateWithoutProfessionalInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DataSharingUncheckedUpdateManyWithoutProfessionalInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    shareWorkoutWith?: BoolFieldUpdateOperationsInput | boolean
    shareMealWith?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkoutDayCreateManyWorkoutPlanInput = {
    id?: number
    dayOfWeek: string
    muscleGroup: string
  }

  export type WorkoutDayUpdateWithoutWorkoutPlanInput = {
    dayOfWeek?: StringFieldUpdateOperationsInput | string
    muscleGroup?: StringFieldUpdateOperationsInput | string
    exercises?: WorkoutExerciseUpdateManyWithoutWorkoutDayNestedInput
  }

  export type WorkoutDayUncheckedUpdateWithoutWorkoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: StringFieldUpdateOperationsInput | string
    muscleGroup?: StringFieldUpdateOperationsInput | string
    exercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutDayNestedInput
  }

  export type WorkoutDayUncheckedUpdateManyWithoutWorkoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: StringFieldUpdateOperationsInput | string
    muscleGroup?: StringFieldUpdateOperationsInput | string
  }

  export type WorkoutExerciseCreateManyWorkoutDayInput = {
    id?: number
    name: string
    order: number
  }

  export type WorkoutExerciseUpdateWithoutWorkoutDayInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: WorkoutSetUpdateManyWithoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutWorkoutDayInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: WorkoutSetUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutWorkoutDayInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutSetCreateManyExerciseInput = {
    id?: number
    setNumber: number
    targetReps: number
    targetLoad: number
  }

  export type WorkoutSetUpdateWithoutExerciseInput = {
    setNumber?: IntFieldUpdateOperationsInput | number
    targetReps?: IntFieldUpdateOperationsInput | number
    targetLoad?: FloatFieldUpdateOperationsInput | number
    logs?: WorkoutLogUpdateManyWithoutWorkoutSetNestedInput
  }

  export type WorkoutSetUncheckedUpdateWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    setNumber?: IntFieldUpdateOperationsInput | number
    targetReps?: IntFieldUpdateOperationsInput | number
    targetLoad?: FloatFieldUpdateOperationsInput | number
    logs?: WorkoutLogUncheckedUpdateManyWithoutWorkoutSetNestedInput
  }

  export type WorkoutSetUncheckedUpdateManyWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    setNumber?: IntFieldUpdateOperationsInput | number
    targetReps?: IntFieldUpdateOperationsInput | number
    targetLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkoutLogCreateManyWorkoutSetInput = {
    id?: number
    date: Date | string
    actualReps: number
    actualLoad: number
  }

  export type WorkoutLogUpdateWithoutWorkoutSetInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReps?: IntFieldUpdateOperationsInput | number
    actualLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkoutLogUncheckedUpdateWithoutWorkoutSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReps?: IntFieldUpdateOperationsInput | number
    actualLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkoutLogUncheckedUpdateManyWithoutWorkoutSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReps?: IntFieldUpdateOperationsInput | number
    actualLoad?: FloatFieldUpdateOperationsInput | number
  }

  export type MealCreateManyMealPlanInput = {
    id?: number
    name: string
    order: number
  }

  export type MealUpdateWithoutMealPlanInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    items?: MealItemUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutMealPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    items?: MealItemUncheckedUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateManyWithoutMealPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type MealItemCreateManyMealInput = {
    id?: number
    foodName: string
    quantity: string
    notes?: string | null
  }

  export type MealItemUpdateWithoutMealInput = {
    foodName?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealItemUncheckedUpdateWithoutMealInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodName?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealItemUncheckedUpdateManyWithoutMealInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodName?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutPlanCountOutputTypeDefaultArgs instead
     */
    export type WorkoutPlanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutPlanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutDayCountOutputTypeDefaultArgs instead
     */
    export type WorkoutDayCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutDayCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutExerciseCountOutputTypeDefaultArgs instead
     */
    export type WorkoutExerciseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutSetCountOutputTypeDefaultArgs instead
     */
    export type WorkoutSetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutSetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MealPlanCountOutputTypeDefaultArgs instead
     */
    export type MealPlanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MealPlanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MealCountOutputTypeDefaultArgs instead
     */
    export type MealCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MealCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutPlanDefaultArgs instead
     */
    export type WorkoutPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutDayDefaultArgs instead
     */
    export type WorkoutDayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutDayDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutExerciseDefaultArgs instead
     */
    export type WorkoutExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutExerciseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutSetDefaultArgs instead
     */
    export type WorkoutSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutSetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutLogDefaultArgs instead
     */
    export type WorkoutLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MealPlanDefaultArgs instead
     */
    export type MealPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MealPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MealDefaultArgs instead
     */
    export type MealArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MealDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MealItemDefaultArgs instead
     */
    export type MealItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MealItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PhysicalAssessmentDefaultArgs instead
     */
    export type PhysicalAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PhysicalAssessmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DataSharingDefaultArgs instead
     */
    export type DataSharingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DataSharingDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}